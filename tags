!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLEGRO_HAS_CLIPBOARD	imgui-master/examples/imgui_impl_allegro5.cpp	/^#define ALLEGRO_HAS_CLIPBOARD /;"	d	file:
APIENTRY	imgui-master/examples/imgui_impl_glfw.cpp	/^#undef APIENTRY$/;"	d	file:
APIENTRY	imgui-master/examples/imgui_impl_opengl2.cpp	/^#define APIENTRY /;"	d	file:
APIENTRY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define APIENTRY$/;"	d
APIENTRY	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^  #define APIENTRY /;"	d
APIENTRY	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^  #define APIENTRY$/;"	d
APIENTRY	imgui-master/examples/libs/glfw/include/GLFW/glfw3native.h	/^ #undef APIENTRY$/;"	d
APIENTRYP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define APIENTRYP /;"	d
AcceptDragDropPayload	imgui-master/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui
ActivateItem	imgui-master/imgui.cpp	/^void ImGui::ActivateItem(ImGuiID id)$/;"	f	class:ImGui
Active	imgui-master/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unless Collapsed$/;"	m	struct:ImGuiWindow
ActiveId	imgui-master/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext
ActiveIdAllowNavDirFlags	imgui-master/imgui_internal.h	/^    int                     ActiveIdAllowNavDirFlags;           \/\/ Active widget allows using directional navigation (e.g. can activate a button and move away from it)$/;"	m	struct:ImGuiContext
ActiveIdAllowOverlap	imgui-master/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows another widget to steal active id (generally for overlapping widgets, but not always)$/;"	m	struct:ImGuiContext
ActiveIdClickOffset	imgui-master/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-left corner, if applicable (currently only set by ButtonBehavior)$/;"	m	struct:ImGuiContext
ActiveIdHasBeenEdited	imgui-master/imgui_internal.h	/^    bool                    ActiveIdHasBeenEdited;              \/\/ Was the value associated to the widget Edited over the course of the Active state.$/;"	m	struct:ImGuiContext
ActiveIdIsAlive	imgui-master/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen this frame (we can't use a bool as the ActiveId may change within the frame)$/;"	m	struct:ImGuiContext
ActiveIdIsJustActivated	imgui-master/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activation for one frame$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrame	imgui-master/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrameHasBeenEdited	imgui-master/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEdited;$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrameIsAlive	imgui-master/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext
ActiveIdPreviousFrameWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext
ActiveIdSource	imgui-master/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating with mouse or nav (gamepad\/keyboard)$/;"	m	struct:ImGuiContext
ActiveIdTimer	imgui-master/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext
ActiveIdWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext
Add	imgui-master/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Data.Size) { Data.resize(Data.Size + 1); FreeIdx++; } else { FreeIdx = *(int*)&Data[idx]; } IM_PLACEMENT_NEW(&Data[idx]) T(); return &Data[idx]; }$/;"	f	struct:ImPool
Add	imgui-master/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (Min.y > r.Min.y) Min.y = r.Min.y; if (Max.x < r.Max.x) Max.x = r.Max.x; if (Max.y < r.Max.y) Max.y = r.Max.y; }$/;"	f	struct:ImRect
Add	imgui-master/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (Min.y > p.y)     Min.y = p.y;     if (Max.x < p.x)     Max.x = p.x;     if (Max.y < p.y)     Max.y = p.y; }$/;"	f	struct:ImRect
AddBezierCurve	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddBezierCurve(const ImVec2& pos0, const ImVec2& cp0, const ImVec2& cp1, const ImVec2& pos1, ImU32 col, float thickness, int num_segments)$/;"	f	class:ImDrawList
AddCallback	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList
AddChar	imgui-master/imgui.h	/^        void           AddChar(ImWchar c)   { SetBit(c); }                          \/\/ Add character$/;"	f	struct:ImFontAtlas::GlyphRangesBuilder
AddCircle	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments, float thickness)$/;"	f	class:ImDrawList
AddCircleFilled	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList
AddConvexPolyFilled	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList
AddCustomRectFontGlyph	imgui-master/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset)$/;"	f	class:ImFontAtlas
AddCustomRectRegular	imgui-master/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(unsigned int id, int width, int height)$/;"	f	class:ImFontAtlas
AddDrawCmd	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList
AddDrawListToDrawData	imgui-master/imgui.cpp	/^static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)$/;"	f	file:
AddFont	imgui-master/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas
AddFontDefault	imgui-master/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas
AddFontFromFileTTF	imgui-master/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddFontFromMemoryCompressedBase85TTF	imgui-master/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddFontFromMemoryCompressedTTF	imgui-master/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddFontFromMemoryTTF	imgui-master/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)$/;"	f	class:ImFontAtlas
AddGlyph	imgui-master/imgui_draw.cpp	/^void ImFont::AddGlyph(ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)$/;"	f	class:ImFont
AddImage	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col)$/;"	f	class:ImDrawList
AddImageQuad	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col)$/;"	f	class:ImDrawList
AddImageRounded	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, int rounding_corners)$/;"	f	class:ImDrawList
AddInputCharacter	imgui-master/imgui.cpp	/^void ImGuiIO::AddInputCharacter(ImWchar c)$/;"	f	class:ImGuiIO
AddInputCharactersUTF8	imgui-master/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO
AddLine	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness)$/;"	f	class:ImDrawList
AddPolyline	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, bool closed, float thickness)$/;"	f	class:ImDrawList
AddQuad	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness)$/;"	f	class:ImDrawList
AddQuadFilled	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col)$/;"	f	class:ImDrawList
AddRanges	imgui-master/imgui_draw.cpp	/^void ImFontAtlas::GlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontAtlas::GlyphRangesBuilder
AddRect	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding, int rounding_corners_flags, float thickness)$/;"	f	class:ImDrawList
AddRectFilled	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding, int rounding_corners_flags)$/;"	f	class:ImDrawList
AddRectFilledMultiColor	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& a, const ImVec2& c, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)$/;"	f	class:ImDrawList
AddRemapChar	imgui-master/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont
AddText	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const ImVec4* cpu_fine_clip_rect)$/;"	f	class:ImDrawList
AddText	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end)$/;"	f	class:ImDrawList
AddText	imgui-master/imgui_draw.cpp	/^void ImFontAtlas::GlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontAtlas::GlyphRangesBuilder
AddTriangle	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness)$/;"	f	class:ImDrawList
AddTriangleFilled	imgui-master/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList
AddWindowToDrawData	imgui-master/imgui.cpp	/^static void AddWindowToDrawData(ImVector<ImDrawList*>* out_render_list, ImGuiWindow* window)$/;"	f	file:
AddWindowToDrawDataSelectLayer	imgui-master/imgui.cpp	/^static void AddWindowToDrawDataSelectLayer(ImGuiWindow* window)$/;"	f	file:
AddWindowToSortBuffer	imgui-master/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* window)$/;"	f	file:
AdvanceCursor	imgui-master/imgui_internal.h	/^    bool        AdvanceCursor;$/;"	m	struct:ImGuiGroupData
AdvanceX	imgui-master/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)$/;"	m	struct:ImFontGlyph
AdvanceX	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float AdvanceX;		\/\/ The distance from the origin to the origin of the next glyph. This is usually a value > 0.$/;"	m	struct:__anon1::GlyphInfo	file:
AlignFirstTextHeightToWidgets	imgui-master/imgui.h	/^    static inline void  AlignFirstTextHeightToWidgets()       { AlignTextToFramePadding(); }$/;"	f	namespace:ImGui
AlignTextToFramePadding	imgui-master/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui
Allocator	imgui-master/examples/imgui_impl_vulkan.h	/^    const VkAllocationCallbacks*    Allocator;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
Alpha	imgui-master/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in ImGui.$/;"	m	struct:ImGuiStyle
AngleMax12	imgui-master/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	file:
AngleMin12	imgui-master/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	file:
AntiAliasedFill	imgui-master/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)$/;"	m	struct:ImGuiStyle
AntiAliasedLines	imgui-master/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliasing on lines\/borders. Disable if you are really tight on CPU\/GPU.$/;"	m	struct:ImGuiStyle
Appearing	imgui-master/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where the window is appearing (or re-appearing)$/;"	m	struct:ImGuiWindow
ArrowButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui
ArrowButtonEx	imgui-master/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui
Ascender	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float       Ascender;           \/\/ The pixel extents above the baseline in pixels (typically positive).$/;"	m	struct:__anon1::FontInfo	file:
Ascent	imgui-master/imgui.h	/^    float                       Ascent, Descent;    \/\/              \/\/ Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]$/;"	m	struct:ImFont
AutoFitChildAxises	imgui-master/imgui_internal.h	/^    int                     AutoFitChildAxises;$/;"	m	struct:ImGuiWindow
AutoFitFramesX	imgui-master/imgui_internal.h	/^    int                     AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow
AutoFitFramesY	imgui-master/imgui_internal.h	/^    int                     AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow
AutoFitOnlyGrows	imgui-master/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow
AutoPosLastDirection	imgui-master/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow
BackBuffer	imgui-master/examples/imgui_impl_vulkan.h	/^    VkImage             BackBuffer[16];$/;"	m	struct:ImGui_ImplVulkanH_WindowData
BackBufferCount	imgui-master/examples/imgui_impl_vulkan.h	/^    uint32_t            BackBufferCount;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
BackBufferView	imgui-master/examples/imgui_impl_vulkan.h	/^    VkImageView         BackBufferView[16];$/;"	m	struct:ImGui_ImplVulkanH_WindowData
BackbufferIndex	imgui-master/examples/imgui_impl_vulkan.h	/^    uint32_t            BackbufferIndex;        \/\/ Keep track of recently rendered swapchain frame indices$/;"	m	struct:ImGui_ImplVulkanH_FrameData
BackendFlags	imgui-master/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags_ enum. Set by back-end (imgui_impl_xxx files or custom back-end) to communicate features supported by the back-end.$/;"	m	struct:ImGuiIO
BackendLanguageUserData	imgui-master/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendPlatformName	imgui-master/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendPlatformUserData	imgui-master/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendRendererName	imgui-master/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO
BackendRendererUserData	imgui-master/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL$/;"	m	struct:ImGuiIO
Backup	imgui-master/imgui_internal.h	/^    void Backup()           { ImGuiWindow* window = GImGui->CurrentWindow; LastItemId = window->DC.LastItemId; LastItemStatusFlags = window->DC.LastItemStatusFlags; LastItemRect = window->DC.LastItemRect; LastItemDisplayRect = window->DC.LastItemDisplayRect; }$/;"	f	struct:ImGuiItemHoveredDataBackup
BackupActiveIdIsAlive	imgui-master/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData
BackupActiveIdPreviousFrameIsAlive	imgui-master/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData
BackupCurrentLineSize	imgui-master/imgui_internal.h	/^    ImVec2      BackupCurrentLineSize;$/;"	m	struct:ImGuiGroupData
BackupCurrentLineTextBaseOffset	imgui-master/imgui_internal.h	/^    float       BackupCurrentLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData
BackupCursorMaxPos	imgui-master/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData
BackupCursorPos	imgui-master/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData
BackupFloat	imgui-master/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon29
BackupGroupOffset	imgui-master/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData
BackupIndent	imgui-master/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData
BackupInt	imgui-master/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon29
BackupLogLinePosY	imgui-master/imgui_internal.h	/^    float       BackupLogLinePosY;$/;"	m	struct:ImGuiGroupData
BackupValue	imgui-master/imgui_internal.h	/^    ImVec4      BackupValue;$/;"	m	struct:ImGuiColorMod
BarRect	imgui-master/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar
Begin	imgui-master/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui
Begin	imgui-master/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, const ImVec2& size_first_use, float bg_alpha_override, ImGuiWindowFlags flags)$/;"	f	class:ImGui
Begin	imgui-master/imgui.cpp	/^void ImGuiListClipper::Begin(int count, float items_height)$/;"	f	class:ImGuiListClipper
BeginChild	imgui-master/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginChild	imgui-master/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginChildEx	imgui-master/imgui.cpp	/^static bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags flags)$/;"	f	class:ImGui
BeginChildFrame	imgui-master/imgui.cpp	/^bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginColumns	imgui-master/imgui.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiColumnsFlags flags)$/;"	f	class:ImGui
BeginCombo	imgui-master/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui
BeginCount	imgui-master/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during the current frame (generally 0 or 1, 1+ if appending via multiple Begin\/End pairs)$/;"	m	struct:ImGuiWindow
BeginDragDropSource	imgui-master/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui
BeginDragDropTarget	imgui-master/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui
BeginDragDropTargetCustom	imgui-master/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui
BeginGroup	imgui-master/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui
BeginMainMenuBar	imgui-master/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui
BeginMenu	imgui-master/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui
BeginMenuBar	imgui-master/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui
BeginOrderWithinContext	imgui-master/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Order within entire imgui context. This is mostly used for debugging submission order related issues.$/;"	m	struct:ImGuiWindow
BeginOrderWithinParent	imgui-master/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Order within immediate parent window, if we are a child window. Otherwise 0.$/;"	m	struct:ImGuiWindow
BeginPopup	imgui-master/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui
BeginPopupContextItem	imgui-master/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, int mouse_button)$/;"	f	class:ImGui
BeginPopupContextVoid	imgui-master/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, int mouse_button)$/;"	f	class:ImGui
BeginPopupContextWindow	imgui-master/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, int mouse_button, bool also_over_items)$/;"	f	class:ImGui
BeginPopupEx	imgui-master/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui
BeginPopupModal	imgui-master/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui
BeginPopupStack	imgui-master/imgui_internal.h	/^    ImVector<ImGuiPopupRef> BeginPopupStack;                    \/\/ Which level of BeginPopup() we are in (reset every frame)$/;"	m	struct:ImGuiContext
BeginTabBar	imgui-master/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui
BeginTabBarEx	imgui-master/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags flags)$/;"	f	class:ImGui
BeginTabItem	imgui-master/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui
BeginTooltip	imgui-master/imgui.cpp	/^void ImGui::BeginTooltip()$/;"	f	class:ImGui
BeginTooltipEx	imgui-master/imgui.cpp	/^void ImGui::BeginTooltipEx(ImGuiWindowFlags extra_flags, bool override_previous_tooltip)$/;"	f	class:ImGui
BgAlphaCond	imgui-master/imgui_internal.h	/^    ImGuiCond               BgAlphaCond;$/;"	m	struct:ImGuiNextWindowData
BgAlphaVal	imgui-master/imgui_internal.h	/^    float                   BgAlphaVal;$/;"	m	struct:ImGuiNextWindowData
BlitGlyph	imgui-master/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::BlitGlyph(FT_BitmapGlyph ft_bitmap, uint8_t* dst, uint32_t dst_pitch, unsigned char* multiply_table)$/;"	f	class:__anon1::FreeTypeFont
Bold	imgui-master/misc/freetype/imgui_freetype.h	/^        Bold            = 1 << 5,   \/\/ Styling: Should we artificially embolden the font?$/;"	e	enum:ImGuiFreeType::RasterizerFlags
BringWindowToDisplayBack	imgui-master/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui
BringWindowToDisplayFront	imgui-master/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui
BringWindowToFocusFront	imgui-master/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui
Buf	imgui-master/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer
Buf	imgui-master/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-write   \/\/ [Resize] Can replace pointer \/ [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!$/;"	m	struct:ImGuiInputTextCallbackData
Buf	imgui-master/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	file:
BufCapacityA	imgui-master/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState
BufDirty	imgui-master/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write        \/\/ [Completion,History,Always]$/;"	m	struct:ImGuiInputTextCallbackData
BufSize	imgui-master/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only    \/\/ [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1$/;"	m	struct:ImGuiInputTextCallbackData
BufTextLen	imgui-master/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-write   \/\/ [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()$/;"	m	struct:ImGuiInputTextCallbackData
Build	imgui-master/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter
Build	imgui-master/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas
BuildFontAtlas	imgui-master/misc/freetype/imgui_freetype.cpp	/^bool ImGuiFreeType::BuildFontAtlas(ImFontAtlas* atlas, unsigned int extra_flags)$/;"	f	class:ImGuiFreeType
BuildLookupTable	imgui-master/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont
BuildRanges	imgui-master/imgui_draw.cpp	/^void ImFontAtlas::GlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontAtlas::GlyphRangesBuilder
BuildSortByKey	imgui-master/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage
Bullet	imgui-master/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui
BulletText	imgui-master/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui
BulletTextV	imgui-master/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui
Button	imgui-master/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui
ButtonBehavior	imgui-master/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)$/;"	f	class:ImGui
ButtonEx	imgui-master/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui
ButtonTextAlign	imgui-master/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger than text. Defaults to (0.5f,0.5f) for horizontally+vertically centered.$/;"	m	struct:ImGuiStyle
CALLBACK	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define CALLBACK /;"	d
CALLBACK	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #undef CALLBACK$/;"	d
CFLAGS	imgui-master/examples/example_glfw_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui-master/examples/example_glfw_opengl2/Makefile	/^   CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui-master/examples/example_glfw_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui-master/examples/example_glfw_opengl3/Makefile	/^   CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui-master/examples/example_sdl_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui-master/examples/example_sdl_opengl2/Makefile	/^   CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui-master/examples/example_sdl_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui-master/examples/example_sdl_opengl3/Makefile	/^   CFLAGS = $(CXXFLAGS)$/;"	m
CUSTOMVERTEX	imgui-master/examples/imgui_impl_dx9.cpp	/^struct CUSTOMVERTEX$/;"	s	file:
CXXFLAGS	imgui-master/examples/example_glfw_opengl2/Makefile	/^	CXXFLAGS = -I..\/ -I..\/..\/ -I\/usr\/local\/include$/;"	m
CXXFLAGS	imgui-master/examples/example_glfw_opengl2/Makefile	/^	CXXFLAGS = -I..\/ -I..\/..\/ `pkg-config --cflags glfw3`$/;"	m
CXXFLAGS	imgui-master/examples/example_glfw_opengl2/Makefile	/^   CXXFLAGS = -I..\/ -I..\/..\/ -I..\/libs\/gl3w `pkg-config --cflags glfw3`$/;"	m
CXXFLAGS	imgui-master/examples/example_glfw_opengl3/Makefile	/^CXXFLAGS = -I..\/libs\/gl3w$/;"	m
CXXFLAGS	imgui-master/examples/example_sdl_opengl2/Makefile	/^	CXXFLAGS = -I ..\/ -I..\/..\/  `sdl2-config --cflags`$/;"	m
CXXFLAGS	imgui-master/examples/example_sdl_opengl2/Makefile	/^	CXXFLAGS = -I ..\/ -I..\/..\/ -I\/usr\/local\/include `sdl2-config --cflags`$/;"	m
CXXFLAGS	imgui-master/examples/example_sdl_opengl2/Makefile	/^   CXXFLAGS = -I ..\/ -I..\/..\/ `pkg-config --cflags sdl2`$/;"	m
CXXFLAGS	imgui-master/examples/example_sdl_opengl3/Makefile	/^	CXXFLAGS = -I..\/ -I..\/..\/ -I..\/libs\/gl3w -I\/usr\/local\/include `sdl2-config --cflags`$/;"	m
CXXFLAGS	imgui-master/examples/example_sdl_opengl3/Makefile	/^	CXXFLAGS = -I..\/ -I..\/..\/ -I..\/libs\/gl3w `sdl2-config --cflags`$/;"	m
CXXFLAGS	imgui-master/examples/example_sdl_opengl3/Makefile	/^   CXXFLAGS = -I..\/ -I..\/..\/ -I..\/libs\/gl3w `pkg-config --cflags sdl2`$/;"	m
CXXFLAGS	imgui-master/examples/example_sdl_opengl3/Makefile	/^CXXFLAGS = -I..\/libs\/gl3w$/;"	m
CalcCustomRectUV	imgui-master/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const CustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max)$/;"	f	class:ImFontAtlas
CalcExtraSpace	imgui-master/imgui_widgets.cpp	/^float ImGuiMenuColumns::CalcExtraSpace(float avail_w)$/;"	f	class:ImGuiMenuColumns
CalcFontSize	imgui-master/imgui_internal.h	/^    float       CalcFontSize() const                    { return GImGui->FontBaseSize * FontWindowScale; }$/;"	f	struct:ImGuiWindow
CalcGlyphInfo	imgui-master/misc/freetype/imgui_freetype.cpp	/^    bool FreeTypeFont::CalcGlyphInfo(uint32_t codepoint, GlyphInfo &glyph_info, FT_Glyph& ft_glyph, FT_BitmapGlyph& ft_bitmap)$/;"	f	class:__anon1::FreeTypeFont
CalcItemRectClosestPoint	imgui-master/imgui.h	/^    static inline ImVec2 CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge = false, float outward = 0.f) { (void)on_edge; (void)outward; IM_ASSERT(0); return pos; }$/;"	f	namespace:ImGui
CalcItemSize	imgui-master/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_x, float default_y)$/;"	f	class:ImGui
CalcItemWidth	imgui-master/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui
CalcListClipping	imgui-master/imgui.cpp	/^void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)$/;"	f	class:ImGui
CalcMaxPopupHeightFromItemCount	imgui-master/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	file:
CalcNextScrollFromScrollTargetAndClamp	imgui-master/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window, bool snap_on_edges)$/;"	f	file:
CalcResizePosSizeFromAnyCorner	imgui-master/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, const ImVec2& corner_norm, ImVec2* out_pos, ImVec2* out_size)$/;"	f	file:
CalcSizeAfterConstraint	imgui-master/imgui.cpp	/^static ImVec2 CalcSizeAfterConstraint(ImGuiWindow* window, ImVec2 new_size)$/;"	f	file:
CalcSizeAutoFit	imgui-master/imgui.cpp	/^static ImVec2 CalcSizeAutoFit(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	file:
CalcSizeContents	imgui-master/imgui.cpp	/^static ImVec2 CalcSizeContents(ImGuiWindow* window)$/;"	f	file:
CalcTextSize	imgui-master/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)$/;"	f	class:ImGui
CalcTextSizeA	imgui-master/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining) const$/;"	f	class:ImFont
CalcTypematicPressedRepeatAmount	imgui-master/imgui.cpp	/^int ImGui::CalcTypematicPressedRepeatAmount(float t, float t_prev, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui
CalcWindowExpectedSize	imgui-master/imgui.cpp	/^ImVec2 ImGui::CalcWindowExpectedSize(ImGuiWindow* window)$/;"	f	class:ImGui
CalcWordWrapPositionA	imgui-master/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const$/;"	f	class:ImFont
CalcWrapWidthForPos	imgui-master/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui
Capacity	imgui-master/imgui.h	/^    int                         Capacity;$/;"	m	class:ImVector
CaptureKeyboardFromApp	imgui-master/imgui.cpp	/^void ImGui::CaptureKeyboardFromApp(bool capture)$/;"	f	class:ImGui
CaptureMouseFromApp	imgui-master/imgui.cpp	/^void ImGui::CaptureMouseFromApp(bool capture)$/;"	f	class:ImGui
ChainCallback	imgui-master/misc/cpp/imgui_stdlib.cpp	/^    ImGuiInputTextCallback  ChainCallback;$/;"	m	struct:InputTextCallback_UserData	file:
ChainCallbackUserData	imgui-master/misc/cpp/imgui_stdlib.cpp	/^    void*                   ChainCallbackUserData;$/;"	m	struct:InputTextCallback_UserData	file:
ChannelsMerge	imgui-master/imgui_draw.cpp	/^void ImDrawList::ChannelsMerge()$/;"	f	class:ImDrawList
ChannelsSetCurrent	imgui-master/imgui_draw.cpp	/^void ImDrawList::ChannelsSetCurrent(int idx)$/;"	f	class:ImDrawList
ChannelsSplit	imgui-master/imgui_draw.cpp	/^void ImDrawList::ChannelsSplit(int channels_count)$/;"	f	class:ImDrawList
CheckProgram	imgui-master/examples/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	file:
CheckShader	imgui-master/examples/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	file:
CheckStacksSize	imgui-master/imgui.cpp	/^static void CheckStacksSize(ImGuiWindow* window, bool write)$/;"	f	file:
CheckVkResultFn	imgui-master/examples/imgui_impl_vulkan.h	/^    void                            (*CheckVkResultFn)(VkResult err);$/;"	m	struct:ImGui_ImplVulkan_InitInfo
Checkbox	imgui-master/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui
CheckboxFlags	imgui-master/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui
ChildBorderSize	imgui-master/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
ChildId	imgui-master/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in parent window (for navigation to return from child window to parent window)$/;"	m	struct:ImGuiWindow
ChildRounding	imgui-master/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to 0.0f to have rectangular windows.$/;"	m	struct:ImGuiStyle
ChildWindowComparer	imgui-master/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	file:
ChildWindows	imgui-master/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData
CircleVtx12	imgui-master/imgui_internal.h	/^    ImVec2          CircleVtx12[12];$/;"	m	struct:ImDrawListSharedData
CleanupDeviceD3D	imgui-master/examples/example_win32_directx10/main.cpp	/^void CleanupDeviceD3D()$/;"	f
CleanupDeviceD3D	imgui-master/examples/example_win32_directx11/main.cpp	/^void CleanupDeviceD3D()$/;"	f
CleanupDeviceD3D	imgui-master/examples/example_win32_directx12/main.cpp	/^void CleanupDeviceD3D()$/;"	f
CleanupRenderTarget	imgui-master/examples/example_win32_directx10/main.cpp	/^void CleanupRenderTarget()$/;"	f
CleanupRenderTarget	imgui-master/examples/example_win32_directx11/main.cpp	/^void CleanupRenderTarget()$/;"	f
CleanupRenderTarget	imgui-master/examples/example_win32_directx12/main.cpp	/^void CleanupRenderTarget()$/;"	f
CleanupVulkan	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	file:
CleanupVulkan	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	file:
Clear	imgui-master/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter
Clear	imgui-master/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage
Clear	imgui-master/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType, 0, sizeof(DataType)); DataFrameCount = -1; Preview = Delivery = false; }$/;"	f	struct:ImGuiPayload
Clear	imgui-master/imgui.h	/^    void Clear()    { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; DisplayPos = DisplaySize = ImVec2(0.f, 0.f); } \/\/ The ImDrawList are owned by ImGuiContext!$/;"	f	struct:ImDrawData
Clear	imgui-master/imgui_demo.cpp	/^    void    Clear()     { Buf.clear(); LineOffsets.clear(); }$/;"	f	struct:ExampleAppLog
Clear	imgui-master/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas
Clear	imgui-master/imgui_draw.cpp	/^void ImDrawList::Clear()$/;"	f	class:ImDrawList
Clear	imgui-master/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { int idx = Map.Data[n].val_i; if (idx != -1) Data[idx].~T(); }  Map.Clear(); Data.clear(); FreeIdx = 0; }$/;"	f	struct:ImPool
Clear	imgui-master/imgui_internal.h	/^    void    Clear()$/;"	f	struct:ImGuiNextWindowData
Clear	imgui-master/imgui_internal.h	/^    void Clear()            { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].resize(0); }$/;"	f	struct:ImDrawDataBuilder
Clear	imgui-master/imgui_internal.h	/^    void Clear()         { ID = 0; Window = NULL; DistBox = DistCenter = DistAxial = FLT_MAX; RectRel = ImRect(); }$/;"	f	struct:ImGuiNavMoveResult
Clear	imgui-master/imgui_internal.h	/^    void Clear()$/;"	f	struct:ImGuiColumnsSet
ClearActiveID	imgui-master/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui
ClearDragDrop	imgui-master/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui
ClearEnable	imgui-master/examples/imgui_impl_vulkan.h	/^    bool                ClearEnable;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
ClearFonts	imgui-master/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas
ClearFreeMemory	imgui-master/imgui_draw.cpp	/^void ImDrawList::ClearFreeMemory()$/;"	f	class:ImDrawList
ClearFreeMemory	imgui-master/imgui_internal.h	/^    void ClearFreeMemory()  { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].clear(); }$/;"	f	struct:ImDrawDataBuilder
ClearInputCharacters	imgui-master/imgui.h	/^    inline void     ClearInputCharacters() { InputCharacters[0] = 0; }  \/\/ Clear the text input buffer manually$/;"	f	struct:ImGuiIO
ClearInputData	imgui-master/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas
ClearLog	imgui-master/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole
ClearOutputData	imgui-master/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont
ClearSelection	imgui-master/imgui_internal.h	/^    void                ClearSelection()            { StbState.select_start = StbState.select_end = StbState.cursor; }$/;"	f	struct:ImGuiInputTextState
ClearTexData	imgui-master/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas
ClearValue	imgui-master/examples/imgui_impl_vulkan.h	/^    VkClearValue        ClearValue;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
ClipRect	imgui-master/imgui.h	/^    ImVec4          ClipRect;               \/\/ Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in "viewport" coordinates$/;"	m	struct:ImDrawCmd
ClipRect	imgui-master/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping rectangle. = DrawList->clip_rect_stack.back(). Scissoring \/ clipping rectangle. x1, y1, x2, y2.$/;"	m	struct:ImGuiWindow
ClipRect	imgui-master/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiColumnData
ClipRectFullscreen	imgui-master/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData
ClipWith	imgui-master/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, r.Max); }                   \/\/ Simple version, may lead to an inverted rectangle, which is fine for Contains\/Overlaps test but not for display.$/;"	f	struct:ImRect
ClipWithFull	imgui-master/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = ImClamp(Max, r.Min, r.Max); } \/\/ Full version, ensure both points are fully clipped.$/;"	f	struct:ImRect
ClipboardUserData	imgui-master/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO
CloneOutput	imgui-master/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList
CloseButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos, float radius)$/;"	f	class:ImGui
CloseCurrentPopup	imgui-master/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui
ClosePopupToLevel	imgui-master/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool apply_focus_to_window_under)$/;"	f	class:ImGui
ClosePopupsOverWindow	imgui-master/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window)$/;"	f	class:ImGui
CmdBuffer	imgui-master/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.$/;"	m	struct:ImDrawList
CmdBuffer	imgui-master/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;$/;"	m	struct:ImDrawChannel
CmdLists	imgui-master/imgui.h	/^    ImDrawList**    CmdLists;               \/\/ Array of ImDrawList* to render. The ImDrawList are owned by ImGuiContext and only pointed to from here.$/;"	m	struct:ImDrawData
CmdListsCount	imgui-master/imgui.h	/^    int             CmdListsCount;          \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData
Codepoint	imgui-master/imgui.h	/^    ImWchar         Codepoint;          \/\/ 0x0000..0xFFFF$/;"	m	struct:ImFontGlyph
Col	imgui-master/imgui_internal.h	/^    ImGuiCol    Col;$/;"	m	struct:ImGuiColorMod
CollapseButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui
Collapsed	imgui-master/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window to become only title-bar$/;"	m	struct:ImGuiWindow
Collapsed	imgui-master/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings
CollapsedCond	imgui-master/imgui_internal.h	/^    ImGuiCond               CollapsedCond;$/;"	m	struct:ImGuiNextWindowData
CollapsedVal	imgui-master/imgui_internal.h	/^    bool                    CollapsedVal;$/;"	m	struct:ImGuiNextWindowData
CollapsingHeader	imgui-master/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
CollapsingHeader	imgui-master/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
Color	imgui-master/imgui_demo.cpp	/^    ImVec4      Color;          \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	file:
ColorButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size)$/;"	f	class:ImGui
ColorConvertFloat4ToU32	imgui-master/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui
ColorConvertHSVtoRGB	imgui-master/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)$/;"	f	class:ImGui
ColorConvertRGBtoHSV	imgui-master/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)$/;"	f	class:ImGui
ColorConvertU32ToFloat4	imgui-master/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui
ColorEdit3	imgui-master/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorEdit4	imgui-master/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorEditOptions	imgui-master/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for color edit widgets$/;"	m	struct:ImGuiContext
ColorEditOptionsPopup	imgui-master/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorModifiers	imgui-master/imgui_internal.h	/^    ImVector<ImGuiColorMod> ColorModifiers;                     \/\/ Stack for PushStyleColor()\/PopStyleColor()$/;"	m	struct:ImGuiContext
ColorPicker3	imgui-master/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorPicker4	imgui-master/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)$/;"	f	class:ImGui
ColorPickerOptionsPopup	imgui-master/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui
ColorPickerRef	imgui-master/imgui_internal.h	/^    ImVec4                  ColorPickerRef;$/;"	m	struct:ImGuiContext
ColorTooltip	imgui-master/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui
Colors	imgui-master/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle
Columns	imgui-master/imgui.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui
Columns	imgui-master/imgui_internal.h	/^    ImVector<ImGuiColumnData> Columns;$/;"	m	struct:ImGuiColumnsSet
ColumnsMinSpacing	imgui-master/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns.$/;"	m	struct:ImGuiStyle
ColumnsOffset	imgui-master/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if ColumnsCurrent > 0). FIXME: This and the above should be a stack to allow use cases like Tree->Column->Tree. Need revamp columns API.$/;"	m	struct:ImGuiWindowTempData
ColumnsSet	imgui-master/imgui_internal.h	/^    ImGuiColumnsSet*        ColumnsSet;             \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData
ColumnsStorage	imgui-master/imgui_internal.h	/^    ImVector<ImGuiColumnsSet> ColumnsStorage;$/;"	m	struct:ImGuiWindow
Combo	imgui-master/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int popup_max_height_in_items)$/;"	f	class:ImGui
Combo	imgui-master/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items)$/;"	f	class:ImGui
Combo	imgui-master/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)$/;"	f	class:ImGui
CommandAllocator	imgui-master/examples/example_win32_directx12/main.cpp	/^    ID3D12CommandAllocator* CommandAllocator;$/;"	m	struct:FrameContext	file:
CommandBuffer	imgui-master/examples/imgui_impl_vulkan.h	/^    VkCommandBuffer     CommandBuffer;$/;"	m	struct:ImGui_ImplVulkanH_FrameData
CommandPool	imgui-master/examples/imgui_impl_vulkan.h	/^    VkCommandPool       CommandPool;$/;"	m	struct:ImGui_ImplVulkanH_FrameData
Commands	imgui-master/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	file:
ConfigData	imgui-master/imgui.h	/^    ImFontConfig*               ConfigData;         \/\/              \/\/ Pointer within ContainerAtlas->ConfigData$/;"	m	struct:ImFont
ConfigData	imgui-master/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Internal data$/;"	m	struct:ImFontAtlas
ConfigDataCount	imgui-master/imgui.h	/^    short                       ConfigDataCount;    \/\/ ~ 1          \/\/ Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.$/;"	m	struct:ImFont
ConfigFlags	imgui-master/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_ enum. Set by user\/application. Gamepad\/keyboard navigation options, etc.$/;"	m	struct:ImGuiIO
ConfigInputTextCursorBlink	imgui-master/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Set to false to disable blinking cursor, for users who consider it distracting. (was called: io.OptCursorBlink prior to 1.63)$/;"	m	struct:ImGuiIO
ConfigMacOSXBehaviors	imgui-master/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd\/Super instead of Ctrl, Line\/Text Start and End using Cmd+Arrows instead of Home\/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd\/Super instead of Ctrl (was called io.OptMacOSXBehaviors prior to 1.63)$/;"	m	struct:ImGuiIO
ConfigWindowsMoveFromTitleBarOnly	imgui-master/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly;\/\/ = false        \/\/ [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.$/;"	m	struct:ImGuiIO
ConfigWindowsResizeFromEdges	imgui-master/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be the a per-window ImGuiWindowFlags_ResizeFromAnySide flag)$/;"	m	struct:ImGuiIO
ContainerAtlas	imgui-master/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/              \/\/ What we has been loaded into$/;"	m	struct:ImFont
Contains	imgui-master/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min.y && r.Max.x <= Max.x && r.Max.y <= Max.y; }$/;"	f	struct:ImRect
Contains	imgui-master/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min.y && p.x     <  Max.x && p.y     <  Max.y; }$/;"	f	struct:ImRect
ContentSizeCond	imgui-master/imgui_internal.h	/^    ImGuiCond               ContentSizeCond;$/;"	m	struct:ImGuiNextWindowData
ContentSizeVal	imgui-master/imgui_internal.h	/^    ImVec2                  ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData
ContentsHeight	imgui-master/imgui_internal.h	/^    float               ContentsHeight;$/;"	m	struct:ImGuiTabBar
ContentsRegionRect	imgui-master/imgui_internal.h	/^    ImRect                  ContentsRegionRect;                 \/\/ FIXME: This is currently confusing\/misleading. Maximum visible content position ~~ Pos + (SizeContentsExplicit ? SizeContentsExplicit : Size - ScrollbarSizes) - CursorStartPos, per axis$/;"	m	struct:ImGuiWindow
CornerPos	imgui-master/imgui.cpp	/^    ImVec2  CornerPos;$/;"	m	struct:ImGuiResizeGripDef	file:
Count	imgui-master/imgui.cpp	/^    ImU32           Count;$/;"	m	struct:ImGuiStyleVarInfo	file:
Count	imgui-master/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiColumnsSet
Count	imgui-master/imgui_internal.h	/^    int         Count;$/;"	m	struct:ImGuiMenuColumns
CountGrep	imgui-master/imgui.h	/^    int                 CountGrep;$/;"	m	struct:ImGuiTextFilter
CreateContext	imgui-master/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui
CreateDeviceD3D	imgui-master/examples/example_win32_directx10/main.cpp	/^HRESULT CreateDeviceD3D(HWND hWnd)$/;"	f
CreateDeviceD3D	imgui-master/examples/example_win32_directx11/main.cpp	/^HRESULT CreateDeviceD3D(HWND hWnd)$/;"	f
CreateDeviceD3D	imgui-master/examples/example_win32_directx12/main.cpp	/^HRESULT CreateDeviceD3D(HWND hWnd)$/;"	f
CreateNewWindow	imgui-master/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)$/;"	f	file:
CreateNewWindowSettings	imgui-master/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui
CreateOrResizeBuffer	imgui-master/examples/imgui_impl_vulkan.cpp	/^static void CreateOrResizeBuffer(VkBuffer& buffer, VkDeviceMemory& buffer_memory, VkDeviceSize& p_buffer_size, size_t new_size, VkBufferUsageFlagBits usage)$/;"	f	file:
CreateRenderTarget	imgui-master/examples/example_win32_directx10/main.cpp	/^void CreateRenderTarget()$/;"	f
CreateRenderTarget	imgui-master/examples/example_win32_directx11/main.cpp	/^void CreateRenderTarget()$/;"	f
CreateRenderTarget	imgui-master/examples/example_win32_directx12/main.cpp	/^void CreateRenderTarget()$/;"	f
CurLenA	imgui-master/imgui_internal.h	/^    int                     CurLenA, CurLenW;       \/\/ we need to maintain our buffer length in both UTF-8 and wchar format.$/;"	m	struct:ImGuiInputTextState
CurLenW	imgui-master/imgui_internal.h	/^    int                     CurLenA, CurLenW;       \/\/ we need to maintain our buffer length in both UTF-8 and wchar format.$/;"	m	struct:ImGuiInputTextState
CurrFrameVisible	imgui-master/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar
Current	imgui-master/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiColumnsSet
CurrentLineSize	imgui-master/imgui_internal.h	/^    ImVec2                  CurrentLineSize;$/;"	m	struct:ImGuiWindowTempData
CurrentLineTextBaseOffset	imgui-master/imgui_internal.h	/^    float                   CurrentLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData
CurrentSize	imgui-master/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData
CurrentTabBar	imgui-master/imgui_internal.h	/^    ImVector<ImGuiTabBar*>  CurrentTabBar;$/;"	m	struct:ImGuiContext
CurrentWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Being drawn into$/;"	m	struct:ImGuiContext
CurrentWindowStack	imgui-master/imgui_internal.h	/^    ImVector<ImGuiWindow*>  CurrentWindowStack;$/;"	m	struct:ImGuiContext
CursorAnim	imgui-master/imgui_internal.h	/^    float                   CursorAnim;$/;"	m	struct:ImGuiInputTextState
CursorAnimReset	imgui-master/imgui_internal.h	/^    void                CursorAnimReset()           { CursorAnim = -0.30f; }                                   \/\/ After a user-input the cursor stays on for a while without blinking$/;"	f	struct:ImGuiInputTextState
CursorClamp	imgui-master/imgui_internal.h	/^    void                CursorClamp()               { StbState.cursor = ImMin(StbState.cursor, CurLenW); StbState.select_start = ImMin(StbState.select_start, CurLenW); StbState.select_end = ImMin(StbState.select_end, CurLenW); }$/;"	f	struct:ImGuiInputTextState
CursorFollow	imgui-master/imgui_internal.h	/^    bool                    CursorFollow;$/;"	m	struct:ImGuiInputTextState
CursorMaxPos	imgui-master/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate the size of our contents, always growing during the frame. Turned into window->SizeContents at the beginning of next frame$/;"	m	struct:ImGuiWindowTempData
CursorPos	imgui-master/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-write   \/\/ [Completion,History,Always]$/;"	m	struct:ImGuiInputTextCallbackData
CursorPos	imgui-master/imgui_internal.h	/^    ImVec2                  CursorPos;$/;"	m	struct:ImGuiWindowTempData
CursorPosPrevLine	imgui-master/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData
CursorStartPos	imgui-master/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position in client area with padding$/;"	m	struct:ImGuiWindowTempData
CurveTessellationTol	imgui-master/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.$/;"	m	struct:ImGuiStyle
CurveTessellationTol	imgui-master/imgui_internal.h	/^    float           CurveTessellationTol;$/;"	m	struct:ImDrawListSharedData
CustomRect	imgui-master/imgui.h	/^        CustomRect()            { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0,0); Font = NULL; }$/;"	f	struct:ImFontAtlas::CustomRect
CustomRect	imgui-master/imgui.h	/^    struct CustomRect$/;"	s	struct:ImFontAtlas
CustomRectIds	imgui-master/imgui.h	/^    int                         CustomRectIds[1];   \/\/ Identifiers of custom texture rectangle used by ImFontAtlas\/ImDrawList$/;"	m	struct:ImFontAtlas
CustomRects	imgui-master/imgui.h	/^    ImVector<CustomRect>        CustomRects;        \/\/ Rectangles for packing custom texture data into the atlas.$/;"	m	struct:ImFontAtlas
D3DFVF_CUSTOMVERTEX	imgui-master/examples/imgui_impl_dx9.cpp	/^#define D3DFVF_CUSTOMVERTEX /;"	d	file:
DC	imgui-master/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, reset at the beginning of the frame. This used to be called ImGuiDrawContext, hence the "DC" variable name.$/;"	m	struct:ImGuiWindow
DIRECTINPUT_VERSION	imgui-master/examples/example_win32_directx10/main.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
DIRECTINPUT_VERSION	imgui-master/examples/example_win32_directx11/main.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
DIRECTINPUT_VERSION	imgui-master/examples/example_win32_directx9/main.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
DIRECTINPUT_VERSION	imgui-master/examples/imgui_impl_dx9.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
DX12_ENABLE_DEBUG_LAYER	imgui-master/examples/example_win32_directx12/main.cpp	/^#define DX12_ENABLE_DEBUG_LAYER /;"	d	file:
Data	imgui-master/imgui.h	/^    ImVector<Pair>      Data;$/;"	m	struct:ImGuiStorage
Data	imgui-master/imgui.h	/^    T*                          Data;$/;"	m	class:ImVector
Data	imgui-master/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload
Data	imgui-master/imgui_internal.h	/^    ImVector<T>     Data;       \/\/ Contiguous data$/;"	m	struct:ImPool
DataFrameCount	imgui-master/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload
DataSize	imgui-master/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload
DataType	imgui-master/imgui.h	/^    char            DataType[32+1];     \/\/ Data type tag (short user-supplied string, 32 characters max)$/;"	m	struct:ImGuiPayload
DataTypeApplyOp	imgui-master/imgui_widgets.cpp	/^static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const void* arg2)$/;"	f	file:
DataTypeApplyOpFromText	imgui-master/imgui_widgets.cpp	/^static bool DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* format)$/;"	f	file:
DataTypeFormatString	imgui-master/imgui_widgets.cpp	/^static inline int DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* data_ptr, const char* format)$/;"	f	file:
DeIndexAllBuffers	imgui-master/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData
DebugCheckVersionAndDataLayout	imgui-master/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert)$/;"	f	class:ImGui
DeclColumns	imgui-master/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) \/\/ not using va_arg because they promote float to double$/;"	f	class:ImGuiMenuColumns
Decode85	imgui-master/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	file:
Decode85Byte	imgui-master/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\' ? c-36 : c-35; }$/;"	f	file:
DeleteChars	imgui-master/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData
Delivery	imgui-master/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mouse button is released over the target item.$/;"	m	struct:ImGuiPayload
DeltaTime	imgui-master/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since last frame, in seconds.$/;"	m	struct:ImGuiIO
Descender	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float       Descender;          \/\/ The extents below the baseline in pixels (typically negative).$/;"	m	struct:__anon1::FontInfo	file:
Descent	imgui-master/imgui.h	/^    float                       Ascent, Descent;    \/\/              \/\/ Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]$/;"	m	struct:ImFont
DescriptorPool	imgui-master/examples/imgui_impl_vulkan.h	/^    VkDescriptorPool                DescriptorPool;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
DesiredSize	imgui-master/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.$/;"	m	struct:ImGuiSizeCallbackData
DestroyContext	imgui-master/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui
Device	imgui-master/examples/imgui_impl_vulkan.h	/^    VkDevice                        Device;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
DimBgRatio	imgui-master/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fading in a dimming background (for modal window and CTRL+TAB list)$/;"	m	struct:ImGuiContext
Dirty	imgui-master/imgui_demo.cpp	/^    bool        Dirty;          \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	file:
DirtyLookupTables	imgui-master/imgui.h	/^    bool                        DirtyLookupTables;$/;"	m	struct:ImFont
DisplayContents	imgui-master/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument
DisplayContextMenu	imgui-master/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument
DisplayEnd	imgui-master/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
DisplayFramebufferScale	imgui-master/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1.0f,1.0f)    \/\/ For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.$/;"	m	struct:ImGuiIO
DisplayOffset	imgui-master/imgui.h	/^    ImVec2                      DisplayOffset;      \/\/ = (0.f,0.f)  \/\/ Offset font rendering by xx pixels$/;"	m	struct:ImFont
DisplayPos	imgui-master/imgui.h	/^    ImVec2          DisplayPos;             \/\/ Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)$/;"	m	struct:ImDrawData
DisplaySafeAreaPadding	imgui-master/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups\/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!$/;"	m	struct:ImGuiStyle
DisplaySize	imgui-master/imgui.h	/^    ImVec2          DisplaySize;            \/\/ Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)$/;"	m	struct:ImDrawData
DisplaySize	imgui-master/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in pixels. For clamping windows positions.$/;"	m	struct:ImGuiIO
DisplayStart	imgui-master/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
DisplayVisibleMax	imgui-master/imgui.h	/^    ImVec2      DisplayVisibleMax;              \/\/ <unset>          \/\/ [OBSOLETE] Just use io.DisplaySize! If the values are the same, we defaults to Min=(0.0f) and Max=DisplaySize$/;"	m	struct:ImGuiIO
DisplayVisibleMin	imgui-master/imgui.h	/^    ImVec2      DisplayVisibleMin;              \/\/ <unset>          \/\/ [OBSOLETE] If you use DisplaySize as a virtual space larger than your screen, set DisplayVisibleMin\/Max to the visible area.$/;"	m	struct:ImGuiIO
DisplayWindowPadding	imgui-master/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible within the display area by at least this amount. Only applies to regular windows.$/;"	m	struct:ImGuiStyle
DistAxial	imgui-master/imgui_internal.h	/^    float         DistAxial;$/;"	m	struct:ImGuiNavMoveResult
DistBox	imgui-master/imgui_internal.h	/^    float         DistBox;      \/\/ Best candidate box distance to current NavId$/;"	m	struct:ImGuiNavMoveResult
DistCenter	imgui-master/imgui_internal.h	/^    float         DistCenter;   \/\/ Best candidate center distance to current NavId$/;"	m	struct:ImGuiNavMoveResult
DoForceClose	imgui-master/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument
DoOpen	imgui-master/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument
DoQueueClose	imgui-master/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument
DoSave	imgui-master/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument
Documents	imgui-master/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	file:
DragBehavior	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* v, float v_speed, const void* v_min, const void* v_max, const char* format, float power, ImGuiDragFlags flags)$/;"	f	class:ImGui
DragBehaviorT	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiDragFlags flags)$/;"	f	class:ImGui
DragCurrentAccum	imgui-master/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging modification. Always high-precision, not rounded by end-user precision settings$/;"	m	struct:ImGuiContext
DragCurrentAccumDirty	imgui-master/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext
DragDropAcceptFlags	imgui-master/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext
DragDropAcceptFrameCount	imgui-master/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expressed a desire to accept the source$/;"	m	struct:ImGuiContext
DragDropAcceptIdCurr	imgui-master/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the time of accepting the payload)$/;"	m	struct:ImGuiContext
DragDropAcceptIdCurrRectSurface	imgui-master/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we resolve overlapping targets by prioritizing the smaller surface)$/;"	m	struct:ImGuiContext
DragDropAcceptIdPrev	imgui-master/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previous frame (we need to store this to allow for overlapping drag and drop targets)$/;"	m	struct:ImGuiContext
DragDropActive	imgui-master/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext
DragDropMouseButton	imgui-master/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext
DragDropPayload	imgui-master/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext
DragDropPayloadBufHeap	imgui-master/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVector<> directly$/;"	m	struct:ImGuiContext
DragDropPayloadBufLocal	imgui-master/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[8];         \/\/ Local buffer for small payloads$/;"	m	struct:ImGuiContext
DragDropSourceFlags	imgui-master/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext
DragDropSourceFrameCount	imgui-master/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext
DragDropTargetId	imgui-master/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext
DragDropTargetRect	imgui-master/imgui_internal.h	/^    ImRect                  DragDropTargetRect;$/;"	m	struct:ImGuiContext
DragDropWithinSourceOrTarget	imgui-master/imgui_internal.h	/^    bool                    DragDropWithinSourceOrTarget;$/;"	m	struct:ImGuiContext
DragFloat	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloat2	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloat3	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloat4	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
DragFloatRange2	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, float power)$/;"	f	class:ImGui
DragInt	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragInt2	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragInt3	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragInt4	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
DragIntRange2	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max)$/;"	f	class:ImGui
DragScalar	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* v, float v_speed, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
DragScalarN	imgui-master/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* v, int components, float v_speed, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
DragSpeedDefaultRatio	imgui-master/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max-min) * DragSpeedDefaultRatio$/;"	m	struct:ImGuiContext
Draw	imgui-master/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter
Draw	imgui-master/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog
Draw	imgui-master/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole
DrawData	imgui-master/imgui_internal.h	/^    ImDrawData              DrawData;                           \/\/ Main ImDrawData instance to pass render information to the user$/;"	m	struct:ImGuiContext
DrawDataBuilder	imgui-master/imgui_internal.h	/^    ImDrawDataBuilder       DrawDataBuilder;$/;"	m	struct:ImGuiContext
DrawList	imgui-master/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backward compatibility reason with code using imgui_internal.h we keep this a pointer)$/;"	m	struct:ImGuiWindow
DrawListInst	imgui-master/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow
DrawListSharedData	imgui-master/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext
DstFont	imgui-master/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig
Dummy	imgui-master/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui
ECHO_MESSAGE	imgui-master/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_glfw_opengl2/Makefile	/^   ECHO_MESSAGE = "Windows"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_glfw_opengl3/Makefile	/^   ECHO_MESSAGE = "Windows"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_sdl_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_sdl_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_sdl_opengl2/Makefile	/^   ECHO_MESSAGE = "Windows"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_sdl_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_sdl_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui-master/examples/example_sdl_opengl3/Makefile	/^   ECHO_MESSAGE = "Windows"$/;"	m
EXE	imgui-master/examples/example_glfw_opengl2/Makefile	/^EXE = example_glfw_opengl2$/;"	m
EXE	imgui-master/examples/example_glfw_opengl3/Makefile	/^EXE = example_glfw_opengl3$/;"	m
EXE	imgui-master/examples/example_sdl_opengl2/Makefile	/^EXE = example_sdl_opengl2$/;"	m
EXE	imgui-master/examples/example_sdl_opengl3/Makefile	/^EXE = example_sdl_opengl3$/;"	m
ElemCount	imgui-master/imgui.h	/^    unsigned int    ElemCount;              \/\/ Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].$/;"	m	struct:ImDrawCmd
EmptyString	imgui-master/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	file:
EmptyString	imgui-master/imgui.h	/^    static char         EmptyString[1];$/;"	m	struct:ImGuiTextBuffer
Encode85Byte	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^char Encode85Byte(unsigned int x) $/;"	f
End	imgui-master/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui
End	imgui-master/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper
EndChild	imgui-master/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui
EndChildFrame	imgui-master/imgui.cpp	/^void ImGui::EndChildFrame()$/;"	f	class:ImGui
EndColumns	imgui-master/imgui.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui
EndCombo	imgui-master/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui
EndDragDropSource	imgui-master/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui
EndDragDropTarget	imgui-master/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui
EndFrame	imgui-master/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui
EndGroup	imgui-master/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui
EndMainMenuBar	imgui-master/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui
EndMenu	imgui-master/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui
EndMenuBar	imgui-master/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui
EndPopup	imgui-master/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui
EndTabBar	imgui-master/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui
EndTabItem	imgui-master/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui
EndTooltip	imgui-master/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui
EventChar	imgui-master/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-write   \/\/ [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;$/;"	m	struct:ImGuiInputTextCallbackData
EventFlag	imgui-master/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData
EventKey	imgui-master/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-only    \/\/ [Completion,History]$/;"	m	struct:ImGuiInputTextCallbackData
ExampleAppConsole	imgui-master/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole
ExampleAppConsole	imgui-master/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	imgui-master/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments
ExampleAppDocuments	imgui-master/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	imgui-master/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExecCommand	imgui-master/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole
Expand	imgui-master/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max.x += amount.x; Max.y += amount.y; }$/;"	f	struct:ImRect
Expand	imgui-master/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max.x += amount;   Max.y += amount; }$/;"	f	struct:ImRect
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	imgui-master/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	imgui-master/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H      = 27;$/;"	v
FONT_ATLAS_DEFAULT_TEX_DATA_ID	imgui-master/imgui_draw.cpp	/^const unsigned int FONT_ATLAS_DEFAULT_TEX_DATA_ID = 0x80000000;$/;"	v
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	imgui-master/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF * FONT_ATLAS_DEFAULT_TEX_DATA_H + 1] =$/;"	v	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF	imgui-master/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF = 108;$/;"	v
FT_CEIL	imgui-master/misc/freetype/imgui_freetype.cpp	/^    #define FT_CEIL(/;"	d	file:
FallbackAdvanceX	imgui-master/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ == FallbackGlyph->AdvanceX$/;"	m	struct:ImFont
FallbackChar	imgui-master/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ = '?'        \/\/ Replacement glyph if one isn't found. Only set via SetFallbackChar()$/;"	m	struct:ImFont
FallbackGlyph	imgui-master/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ == FindGlyph(FontFallbackChar)$/;"	m	struct:ImFont
Fence	imgui-master/examples/imgui_impl_vulkan.h	/^    VkFence             Fence;$/;"	m	struct:ImGui_ImplVulkanH_FrameData
FenceValue	imgui-master/examples/example_win32_directx12/main.cpp	/^    UINT64                  FenceValue;$/;"	m	struct:FrameContext	file:
Filter	imgui-master/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	file:
Filters	imgui-master/imgui.h	/^    ImVector<TextRange> Filters;$/;"	m	struct:ImGuiTextFilter
FindBestWindowPosForPopup	imgui-master/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui
FindBestWindowPosForPopupEx	imgui-master/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* last_dir, const ImRect& r_outer, const ImRect& r_avoid, ImGuiPopupPositionPolicy policy)$/;"	f	class:ImGui
FindGlyph	imgui-master/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont
FindGlyphNoFallback	imgui-master/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont
FindHoveredWindow	imgui-master/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	file:
FindOrAddColumnsSet	imgui-master/imgui.cpp	/^static ImGuiColumnsSet* FindOrAddColumnsSet(ImGuiWindow* window, ImGuiID id)$/;"	f	file:
FindRenderedTextEnd	imgui-master/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui
FindSettingsHandler	imgui-master/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui
FindWindowByID	imgui-master/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui
FindWindowByName	imgui-master/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui
FindWindowFocusIndex	imgui-master/imgui.cpp	/^static int FindWindowFocusIndex(ImGuiWindow* window) \/\/ FIXME-OPT O(N)$/;"	f	file:
FindWindowNavFocusable	imgui-master/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	file:
FindWindowSettings	imgui-master/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)$/;"	f	class:ImGui
Flags	imgui-master/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust anti-aliasing settings per-primitive.$/;"	m	struct:ImDrawList
Flags	imgui-master/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas
Flags	imgui-master/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData
Flags	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;              \/\/ Not exposed$/;"	m	struct:ImGuiColumnData
Flags	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;$/;"	m	struct:ImGuiColumnsSet
Flags	imgui-master/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar
Flags	imgui-master/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem
Flags	imgui-master/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow
FlattenIntoSingleLayer	imgui-master/imgui.cpp	/^void ImDrawDataBuilder::FlattenIntoSingleLayer()$/;"	f	class:ImDrawDataBuilder
Floor	imgui-master/imgui_internal.h	/^    void        Floor()                             { Min.x = (float)(int)Min.x; Min.y = (float)(int)Min.y; Max.x = (float)(int)Max.x; Max.y = (float)(int)Max.y; }$/;"	f	struct:ImRect
FocusCond	imgui-master/imgui_internal.h	/^    ImGuiCond               FocusCond;$/;"	m	struct:ImGuiNextWindowData
FocusIdxAllCounter	imgui-master/imgui_internal.h	/^    int                     FocusIdxAllCounter;                 \/\/ Start at -1 and increase as assigned via FocusItemRegister()$/;"	m	struct:ImGuiWindow
FocusIdxAllRequestCurrent	imgui-master/imgui_internal.h	/^    int                     FocusIdxAllRequestCurrent;          \/\/ Item being requested for focus$/;"	m	struct:ImGuiWindow
FocusIdxAllRequestNext	imgui-master/imgui_internal.h	/^    int                     FocusIdxAllRequestNext;             \/\/ Item being requested for focus, for next update (relies on layout to be stable between the frame pressing TAB and the next frame)$/;"	m	struct:ImGuiWindow
FocusIdxTabCounter	imgui-master/imgui_internal.h	/^    int                     FocusIdxTabCounter;                 \/\/ (same, but only count widgets which you can Tab through)$/;"	m	struct:ImGuiWindow
FocusIdxTabRequestCurrent	imgui-master/imgui_internal.h	/^    int                     FocusIdxTabRequestCurrent;          \/\/ Tab-able item being requested for focus$/;"	m	struct:ImGuiWindow
FocusIdxTabRequestNext	imgui-master/imgui_internal.h	/^    int                     FocusIdxTabRequestNext;             \/\/ "$/;"	m	struct:ImGuiWindow
FocusPreviousWindowIgnoringOne	imgui-master/imgui.cpp	/^void ImGui::FocusPreviousWindowIgnoringOne(ImGuiWindow* ignore_window)$/;"	f	class:ImGui
FocusWindow	imgui-master/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window)$/;"	f	class:ImGui
FocusableItemRegister	imgui-master/imgui.cpp	/^bool ImGui::FocusableItemRegister(ImGuiWindow* window, ImGuiID id, bool tab_stop)$/;"	f	class:ImGui
FocusableItemUnregister	imgui-master/imgui.cpp	/^void ImGui::FocusableItemUnregister(ImGuiWindow* window)$/;"	f	class:ImGui
Font	imgui-master/imgui.h	/^        ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000): target font$/;"	m	struct:ImFontAtlas::CustomRect
Font	imgui-master/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.empty() ? IO.Font : FontStack.back()$/;"	m	struct:ImGuiContext
Font	imgui-master/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simplified AddText overload)$/;"	m	struct:ImDrawListSharedData
FontAllowUserScaling	imgui-master/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling text of individual window with CTRL+Wheel.$/;"	m	struct:ImGuiIO
FontAtlasOwnedByContext	imgui-master/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ Io.Fonts-> is owned by the ImGuiContext and will be destructed along with it.$/;"	m	struct:ImGuiContext
FontBaseSize	imgui-master/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobalScale * Font->Scale * Font->FontSize. Base text height.$/;"	m	struct:ImGuiContext
FontData	imgui-master/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig
FontDataOwnedByAtlas	imgui-master/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).$/;"	m	struct:ImFontConfig
FontDataSize	imgui-master/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig
FontDefault	imgui-master/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].$/;"	m	struct:ImGuiIO
FontGlobalScale	imgui-master/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all fonts$/;"	m	struct:ImGuiIO
FontInfo	imgui-master/misc/freetype/imgui_freetype.cpp	/^    struct FontInfo $/;"	s	namespace:__anon1	file:
FontNo	imgui-master/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF file$/;"	m	struct:ImFontConfig
FontSize	imgui-master/imgui.h	/^    float                       FontSize;           \/\/ <user set>   \/\/ Height of characters, set during loading (don't change after loading)$/;"	m	struct:ImFont
FontSize	imgui-master/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize * g.CurrentWindow->FontWindowScale == window->FontSize(). Text height for current window.$/;"	m	struct:ImGuiContext
FontSize	imgui-master/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for simplified AddText overload)$/;"	m	struct:ImDrawListSharedData
FontStack	imgui-master/imgui_internal.h	/^    ImVector<ImFont*>       FontStack;                          \/\/ Stack for PushFont()\/PopFont()$/;"	m	struct:ImGuiContext
FontWindowScale	imgui-master/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-window$/;"	m	struct:ImGuiWindow
Fonts	imgui-master/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Load, rasterize and pack one or more fonts into a single texture.$/;"	m	struct:ImGuiIO
Fonts	imgui-master/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()\/PopFont() to change the current font.$/;"	m	struct:ImFontAtlas
ForceAutoHint	imgui-master/misc/freetype/imgui_freetype.h	/^        ForceAutoHint   = 1 << 2,   \/\/ Indicates that the auto-hinter is preferred over the font's native hinter.$/;"	e	enum:ImGuiFreeType::RasterizerFlags
FrameBorderSize	imgui-master/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
FrameContext	imgui-master/examples/example_win32_directx12/main.cpp	/^struct FrameContext$/;"	s	file:
FrameCount	imgui-master/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext
FrameCountEnded	imgui-master/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext
FrameCountRendered	imgui-master/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext
FrameDataForRender	imgui-master/examples/imgui_impl_vulkan.cpp	/^struct FrameDataForRender$/;"	s	file:
FrameIndex	imgui-master/examples/imgui_impl_vulkan.h	/^    uint32_t            FrameIndex;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
FramePadding	imgui-master/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most widgets).$/;"	m	struct:ImGuiStyle
FramePresent	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_WindowData* wd)$/;"	f	file:
FramePresent	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_WindowData* wd)$/;"	f	file:
FrameRender	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_WindowData* wd)$/;"	f	file:
FrameRender	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_WindowData* wd)$/;"	f	file:
FrameResources	imgui-master/examples/imgui_impl_dx12.cpp	/^struct FrameResources$/;"	s	file:
FrameRounding	imgui-master/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).$/;"	m	struct:ImGuiStyle
FrameScopeActive	imgui-master/imgui_internal.h	/^    bool                    FrameScopeActive;                   \/\/ Set by NewFrame(), cleared by EndFrame()\/Render()$/;"	m	struct:ImGuiContext
Framebuffer	imgui-master/examples/imgui_impl_vulkan.h	/^    VkFramebuffer       Framebuffer[16];$/;"	m	struct:ImGui_ImplVulkanH_WindowData
Framerate	imgui-master/imgui.h	/^    float       Framerate;                      \/\/ Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames$/;"	m	struct:ImGuiIO
FramerateSecPerFrame	imgui-master/imgui_internal.h	/^    float                   FramerateSecPerFrame[120];          \/\/ Calculate estimate of framerate for user over the last 2 seconds.$/;"	m	struct:ImGuiContext
FramerateSecPerFrameAccum	imgui-master/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext
FramerateSecPerFrameIdx	imgui-master/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext
Frames	imgui-master/examples/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_FrameData Frames[IMGUI_VK_QUEUED_FRAMES];$/;"	m	struct:ImGui_ImplVulkanH_WindowData
FreeIdx	imgui-master/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool
FreeTypeFont	imgui-master/misc/freetype/imgui_freetype.cpp	/^    struct FreeTypeFont$/;"	s	namespace:__anon1	file:
FreeWrapper	imgui-master/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { (void)user_data; (void)ptr; IM_ASSERT(0); }$/;"	f	file:
FreeWrapper	imgui-master/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { (void)user_data; free(ptr); }$/;"	f	file:
FreetypeFace	imgui-master/misc/freetype/imgui_freetype.cpp	/^        FT_Face         FreetypeFace;$/;"	m	struct:__anon1::FreeTypeFont	file:
FreetypeLibrary	imgui-master/misc/freetype/imgui_freetype.cpp	/^        FT_Library      FreetypeLibrary;$/;"	m	struct:__anon1::FreeTypeFont	file:
FreetypeLoadFlags	imgui-master/misc/freetype/imgui_freetype.cpp	/^        FT_Int32        FreetypeLoadFlags;$/;"	m	struct:__anon1::FreeTypeFont	file:
GDataTypeInfo	imgui-master/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	file:
GImAllocatorAllocFunc	imgui-master/imgui.cpp	/^static void*  (*GImAllocatorAllocFunc)(size_t size, void* user_data) = MallocWrapper;$/;"	v	file:
GImAllocatorFreeFunc	imgui-master/imgui.cpp	/^static void   (*GImAllocatorFreeFunc)(void* ptr, void* user_data) = FreeWrapper;$/;"	v	file:
GImAllocatorUserData	imgui-master/imgui.cpp	/^static void*    GImAllocatorUserData = NULL;$/;"	v	file:
GLAPI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GLAPI /;"	d
GLDEBUGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);$/;"	t
GLDEBUGPROCAMD	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);$/;"	t
GLDEBUGPROCARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);$/;"	t
GLEXT_64_TYPES_DEFINED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GLEXT_64_TYPES_DEFINED$/;"	d
GLFWAPI	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFWAPI /;"	d
GLFWAPI	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFWAPI$/;"	d
GLFW_ACCUM_ALPHA_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_ALPHA_BITS /;"	d
GLFW_ACCUM_BLUE_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_BLUE_BITS /;"	d
GLFW_ACCUM_GREEN_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_GREEN_BITS /;"	d
GLFW_ACCUM_RED_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_RED_BITS /;"	d
GLFW_ALPHA_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ALPHA_BITS /;"	d
GLFW_ANY_RELEASE_BEHAVIOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ANY_RELEASE_BEHAVIOR /;"	d
GLFW_API_UNAVAILABLE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_API_UNAVAILABLE /;"	d
GLFW_ARROW_CURSOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ARROW_CURSOR /;"	d
GLFW_AUTO_ICONIFY	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUTO_ICONIFY /;"	d
GLFW_AUX_BUFFERS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUX_BUFFERS /;"	d
GLFW_BLUE_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_BLUE_BITS /;"	d
GLFW_CALLBACK_DEFINED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_CALLBACK_DEFINED$/;"	d
GLFW_CALLBACK_DEFINED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #undef GLFW_CALLBACK_DEFINED$/;"	d
GLFW_CLIENT_API	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CLIENT_API /;"	d
GLFW_CONNECTED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONNECTED /;"	d
GLFW_CONTEXT_NO_ERROR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_NO_ERROR /;"	d
GLFW_CONTEXT_RELEASE_BEHAVIOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_RELEASE_BEHAVIOR /;"	d
GLFW_CONTEXT_REVISION	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_REVISION /;"	d
GLFW_CONTEXT_ROBUSTNESS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_ROBUSTNESS /;"	d
GLFW_CONTEXT_VERSION_MAJOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MAJOR /;"	d
GLFW_CONTEXT_VERSION_MINOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MINOR /;"	d
GLFW_CROSSHAIR_CURSOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CROSSHAIR_CURSOR /;"	d
GLFW_CURSOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR /;"	d
GLFW_CURSOR_DISABLED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_DISABLED /;"	d
GLFW_CURSOR_HIDDEN	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_HIDDEN /;"	d
GLFW_CURSOR_NORMAL	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_NORMAL /;"	d
GLFW_DECORATED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DECORATED /;"	d
GLFW_DEPTH_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DEPTH_BITS /;"	d
GLFW_DISCONNECTED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DISCONNECTED /;"	d
GLFW_DONT_CARE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DONT_CARE /;"	d
GLFW_DOUBLEBUFFER	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DOUBLEBUFFER /;"	d
GLFW_EXPOSE_NATIVE_WIN32	imgui-master/examples/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_WIN32$/;"	d	file:
GLFW_FALSE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FALSE /;"	d
GLFW_FLOATING	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FLOATING /;"	d
GLFW_FOCUSED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FOCUSED /;"	d
GLFW_FORMAT_UNAVAILABLE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FORMAT_UNAVAILABLE /;"	d
GLFW_GREEN_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_GREEN_BITS /;"	d
GLFW_HAND_CURSOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HAND_CURSOR /;"	d
GLFW_HAS_PER_MONITOR_DPI	imgui-master/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_PER_MONITOR_DPI /;"	d	file:
GLFW_HAS_VULKAN	imgui-master/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_VULKAN /;"	d	file:
GLFW_HAS_WINDOW_ALPHA	imgui-master/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_ALPHA /;"	d	file:
GLFW_HAS_WINDOW_HOVERED	imgui-master/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_HOVERED /;"	d	file:
GLFW_HAS_WINDOW_TOPMOST	imgui-master/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_TOPMOST /;"	d	file:
GLFW_HRESIZE_CURSOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HRESIZE_CURSOR /;"	d
GLFW_IBEAM_CURSOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_IBEAM_CURSOR /;"	d
GLFW_ICONIFIED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ICONIFIED /;"	d
GLFW_INCLUDE_NONE	imgui-master/examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_NONE$/;"	d	file:
GLFW_INCLUDE_VULKAN	imgui-master/examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_VULKAN$/;"	d	file:
GLFW_INVALID_ENUM	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_ENUM /;"	d
GLFW_INVALID_VALUE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_VALUE /;"	d
GLFW_JOYSTICK_1	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_1 /;"	d
GLFW_JOYSTICK_10	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_10 /;"	d
GLFW_JOYSTICK_11	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_11 /;"	d
GLFW_JOYSTICK_12	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_12 /;"	d
GLFW_JOYSTICK_13	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_13 /;"	d
GLFW_JOYSTICK_14	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_14 /;"	d
GLFW_JOYSTICK_15	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_15 /;"	d
GLFW_JOYSTICK_16	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_16 /;"	d
GLFW_JOYSTICK_2	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_2 /;"	d
GLFW_JOYSTICK_3	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_3 /;"	d
GLFW_JOYSTICK_4	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_4 /;"	d
GLFW_JOYSTICK_5	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_5 /;"	d
GLFW_JOYSTICK_6	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_6 /;"	d
GLFW_JOYSTICK_7	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_7 /;"	d
GLFW_JOYSTICK_8	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_8 /;"	d
GLFW_JOYSTICK_9	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_9 /;"	d
GLFW_JOYSTICK_LAST	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_LAST /;"	d
GLFW_KEY_0	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_0 /;"	d
GLFW_KEY_1	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_1 /;"	d
GLFW_KEY_2	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_2 /;"	d
GLFW_KEY_3	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_3 /;"	d
GLFW_KEY_4	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_4 /;"	d
GLFW_KEY_5	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_5 /;"	d
GLFW_KEY_6	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_6 /;"	d
GLFW_KEY_7	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_7 /;"	d
GLFW_KEY_8	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_8 /;"	d
GLFW_KEY_9	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_9 /;"	d
GLFW_KEY_A	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_A /;"	d
GLFW_KEY_APOSTROPHE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_APOSTROPHE /;"	d
GLFW_KEY_B	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_B /;"	d
GLFW_KEY_BACKSLASH	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSLASH /;"	d
GLFW_KEY_BACKSPACE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSPACE /;"	d
GLFW_KEY_C	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_C /;"	d
GLFW_KEY_CAPS_LOCK	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_CAPS_LOCK /;"	d
GLFW_KEY_COMMA	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_COMMA /;"	d
GLFW_KEY_D	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_D /;"	d
GLFW_KEY_DELETE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DELETE /;"	d
GLFW_KEY_DOWN	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DOWN /;"	d
GLFW_KEY_E	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_E /;"	d
GLFW_KEY_END	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_END /;"	d
GLFW_KEY_ENTER	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ENTER /;"	d
GLFW_KEY_EQUAL	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_EQUAL /;"	d
GLFW_KEY_ESCAPE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ESCAPE /;"	d
GLFW_KEY_F	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F /;"	d
GLFW_KEY_F1	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F1 /;"	d
GLFW_KEY_F10	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F10 /;"	d
GLFW_KEY_F11	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F11 /;"	d
GLFW_KEY_F12	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F12 /;"	d
GLFW_KEY_F13	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F13 /;"	d
GLFW_KEY_F14	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F14 /;"	d
GLFW_KEY_F15	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F15 /;"	d
GLFW_KEY_F16	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F16 /;"	d
GLFW_KEY_F17	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F17 /;"	d
GLFW_KEY_F18	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F18 /;"	d
GLFW_KEY_F19	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F19 /;"	d
GLFW_KEY_F2	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F2 /;"	d
GLFW_KEY_F20	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F20 /;"	d
GLFW_KEY_F21	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F21 /;"	d
GLFW_KEY_F22	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F22 /;"	d
GLFW_KEY_F23	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F23 /;"	d
GLFW_KEY_F24	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F24 /;"	d
GLFW_KEY_F25	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F25 /;"	d
GLFW_KEY_F3	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F3 /;"	d
GLFW_KEY_F4	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F4 /;"	d
GLFW_KEY_F5	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F5 /;"	d
GLFW_KEY_F6	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F6 /;"	d
GLFW_KEY_F7	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F7 /;"	d
GLFW_KEY_F8	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F8 /;"	d
GLFW_KEY_F9	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F9 /;"	d
GLFW_KEY_G	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_G /;"	d
GLFW_KEY_GRAVE_ACCENT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_GRAVE_ACCENT /;"	d
GLFW_KEY_H	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_H /;"	d
GLFW_KEY_HOME	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_HOME /;"	d
GLFW_KEY_I	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_I /;"	d
GLFW_KEY_INSERT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_INSERT /;"	d
GLFW_KEY_J	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_J /;"	d
GLFW_KEY_K	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_K /;"	d
GLFW_KEY_KP_0	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_0 /;"	d
GLFW_KEY_KP_1	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_1 /;"	d
GLFW_KEY_KP_2	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_2 /;"	d
GLFW_KEY_KP_3	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_3 /;"	d
GLFW_KEY_KP_4	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_4 /;"	d
GLFW_KEY_KP_5	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_5 /;"	d
GLFW_KEY_KP_6	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_6 /;"	d
GLFW_KEY_KP_7	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_7 /;"	d
GLFW_KEY_KP_8	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_8 /;"	d
GLFW_KEY_KP_9	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_9 /;"	d
GLFW_KEY_KP_ADD	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ADD /;"	d
GLFW_KEY_KP_DECIMAL	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DECIMAL /;"	d
GLFW_KEY_KP_DIVIDE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DIVIDE /;"	d
GLFW_KEY_KP_ENTER	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ENTER /;"	d
GLFW_KEY_KP_EQUAL	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_EQUAL /;"	d
GLFW_KEY_KP_MULTIPLY	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_MULTIPLY /;"	d
GLFW_KEY_KP_SUBTRACT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_SUBTRACT /;"	d
GLFW_KEY_L	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_L /;"	d
GLFW_KEY_LAST	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LAST /;"	d
GLFW_KEY_LEFT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT /;"	d
GLFW_KEY_LEFT_ALT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_ALT /;"	d
GLFW_KEY_LEFT_BRACKET	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_BRACKET /;"	d
GLFW_KEY_LEFT_CONTROL	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_CONTROL /;"	d
GLFW_KEY_LEFT_SHIFT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SHIFT /;"	d
GLFW_KEY_LEFT_SUPER	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SUPER /;"	d
GLFW_KEY_M	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_M /;"	d
GLFW_KEY_MENU	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MENU /;"	d
GLFW_KEY_MINUS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MINUS /;"	d
GLFW_KEY_N	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_N /;"	d
GLFW_KEY_NUM_LOCK	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_NUM_LOCK /;"	d
GLFW_KEY_O	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_O /;"	d
GLFW_KEY_P	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_P /;"	d
GLFW_KEY_PAGE_DOWN	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_DOWN /;"	d
GLFW_KEY_PAGE_UP	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_UP /;"	d
GLFW_KEY_PAUSE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAUSE /;"	d
GLFW_KEY_PERIOD	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PERIOD /;"	d
GLFW_KEY_PRINT_SCREEN	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PRINT_SCREEN /;"	d
GLFW_KEY_Q	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Q /;"	d
GLFW_KEY_R	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_R /;"	d
GLFW_KEY_RIGHT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT /;"	d
GLFW_KEY_RIGHT_ALT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_ALT /;"	d
GLFW_KEY_RIGHT_BRACKET	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_BRACKET /;"	d
GLFW_KEY_RIGHT_CONTROL	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_CONTROL /;"	d
GLFW_KEY_RIGHT_SHIFT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SHIFT /;"	d
GLFW_KEY_RIGHT_SUPER	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SUPER /;"	d
GLFW_KEY_S	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_S /;"	d
GLFW_KEY_SCROLL_LOCK	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SCROLL_LOCK /;"	d
GLFW_KEY_SEMICOLON	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SEMICOLON /;"	d
GLFW_KEY_SLASH	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SLASH /;"	d
GLFW_KEY_SPACE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SPACE /;"	d
GLFW_KEY_T	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_T /;"	d
GLFW_KEY_TAB	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_TAB /;"	d
GLFW_KEY_U	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_U /;"	d
GLFW_KEY_UNKNOWN	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UNKNOWN /;"	d
GLFW_KEY_UP	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UP /;"	d
GLFW_KEY_V	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_V /;"	d
GLFW_KEY_W	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_W /;"	d
GLFW_KEY_WORLD_1	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_1 /;"	d
GLFW_KEY_WORLD_2	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_2 /;"	d
GLFW_KEY_X	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_X /;"	d
GLFW_KEY_Y	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Y /;"	d
GLFW_KEY_Z	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Z /;"	d
GLFW_LOSE_CONTEXT_ON_RESET	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_LOSE_CONTEXT_ON_RESET /;"	d
GLFW_MAXIMIZED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MAXIMIZED /;"	d
GLFW_MOD_ALT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_ALT /;"	d
GLFW_MOD_CONTROL	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_CONTROL /;"	d
GLFW_MOD_SHIFT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SHIFT /;"	d
GLFW_MOD_SUPER	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SUPER /;"	d
GLFW_MOUSE_BUTTON_1	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_1 /;"	d
GLFW_MOUSE_BUTTON_2	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_2 /;"	d
GLFW_MOUSE_BUTTON_3	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_3 /;"	d
GLFW_MOUSE_BUTTON_4	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_4 /;"	d
GLFW_MOUSE_BUTTON_5	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_5 /;"	d
GLFW_MOUSE_BUTTON_6	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_6 /;"	d
GLFW_MOUSE_BUTTON_7	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_7 /;"	d
GLFW_MOUSE_BUTTON_8	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_8 /;"	d
GLFW_MOUSE_BUTTON_LAST	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LAST /;"	d
GLFW_MOUSE_BUTTON_LEFT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LEFT /;"	d
GLFW_MOUSE_BUTTON_MIDDLE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_MIDDLE /;"	d
GLFW_MOUSE_BUTTON_RIGHT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_RIGHT /;"	d
GLFW_NOT_INITIALIZED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NOT_INITIALIZED /;"	d
GLFW_NO_API	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_API /;"	d
GLFW_NO_CURRENT_CONTEXT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_CURRENT_CONTEXT /;"	d
GLFW_NO_RESET_NOTIFICATION	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_RESET_NOTIFICATION /;"	d
GLFW_NO_ROBUSTNESS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_ROBUSTNESS /;"	d
GLFW_NO_WINDOW_CONTEXT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_WINDOW_CONTEXT /;"	d
GLFW_OPENGL_ANY_PROFILE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ANY_PROFILE /;"	d
GLFW_OPENGL_API	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_API /;"	d
GLFW_OPENGL_COMPAT_PROFILE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_COMPAT_PROFILE /;"	d
GLFW_OPENGL_CORE_PROFILE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_CORE_PROFILE /;"	d
GLFW_OPENGL_DEBUG_CONTEXT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_DEBUG_CONTEXT /;"	d
GLFW_OPENGL_ES_API	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ES_API /;"	d
GLFW_OPENGL_FORWARD_COMPAT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_FORWARD_COMPAT /;"	d
GLFW_OPENGL_PROFILE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_PROFILE /;"	d
GLFW_OUT_OF_MEMORY	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OUT_OF_MEMORY /;"	d
GLFW_PLATFORM_ERROR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PLATFORM_ERROR /;"	d
GLFW_PRESS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PRESS /;"	d
GLFW_RED_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RED_BITS /;"	d
GLFW_REFRESH_RATE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REFRESH_RATE /;"	d
GLFW_RELEASE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE /;"	d
GLFW_RELEASE_BEHAVIOR_FLUSH	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_FLUSH /;"	d
GLFW_RELEASE_BEHAVIOR_NONE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_NONE /;"	d
GLFW_REPEAT	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REPEAT /;"	d
GLFW_RESIZABLE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RESIZABLE /;"	d
GLFW_SAMPLES	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SAMPLES /;"	d
GLFW_SRGB_CAPABLE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SRGB_CAPABLE /;"	d
GLFW_STENCIL_BITS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STENCIL_BITS /;"	d
GLFW_STEREO	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STEREO /;"	d
GLFW_STICKY_KEYS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_KEYS /;"	d
GLFW_STICKY_MOUSE_BUTTONS	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_MOUSE_BUTTONS /;"	d
GLFW_TRUE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_TRUE /;"	d
GLFW_VERSION_MAJOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MAJOR /;"	d
GLFW_VERSION_MINOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MINOR /;"	d
GLFW_VERSION_REVISION	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_REVISION /;"	d
GLFW_VERSION_UNAVAILABLE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_UNAVAILABLE /;"	d
GLFW_VISIBLE	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VISIBLE /;"	d
GLFW_VRESIZE_CURSOR	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VRESIZE_CURSOR /;"	d
GLFW_WINGDIAPI_DEFINED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_WINGDIAPI_DEFINED$/;"	d
GLFW_WINGDIAPI_DEFINED	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #undef GLFW_WINGDIAPI_DEFINED$/;"	d
GLFWcharfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);$/;"	t
GLFWcharmodsfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);$/;"	t
GLFWcursor	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWcursor GLFWcursor;$/;"	t	typeref:struct:GLFWcursor
GLFWcursorenterfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);$/;"	t
GLFWcursorposfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);$/;"	t
GLFWdropfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);$/;"	t
GLFWerrorfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWerrorfun)(int,const char*);$/;"	t
GLFWframebuffersizefun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);$/;"	t
GLFWgammaramp	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWgammaramp$/;"	s
GLFWgammaramp	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWgammaramp;$/;"	t	typeref:struct:GLFWgammaramp
GLFWglproc	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWglproc)(void);$/;"	t
GLFWimage	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWimage$/;"	s
GLFWimage	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWimage;$/;"	t	typeref:struct:GLFWimage
GLFWjoystickfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWjoystickfun)(int,int);$/;"	t
GLFWkeyfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);$/;"	t
GLFWmonitor	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWmonitor GLFWmonitor;$/;"	t	typeref:struct:GLFWmonitor
GLFWmonitorfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);$/;"	t
GLFWmousebuttonfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);$/;"	t
GLFWscrollfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);$/;"	t
GLFWvidmode	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWvidmode$/;"	s
GLFWvidmode	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWvidmode;$/;"	t	typeref:struct:GLFWvidmode
GLFWvkproc	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWvkproc)(void);$/;"	t
GLFWwindow	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWwindow GLFWwindow;$/;"	t	typeref:struct:GLFWwindow
GLFWwindowclosefun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowclosefun)(GLFWwindow*);$/;"	t
GLFWwindowfocusfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);$/;"	t
GLFWwindowiconifyfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);$/;"	t
GLFWwindowposfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);$/;"	t
GLFWwindowrefreshfun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);$/;"	t
GLFWwindowsizefun	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);$/;"	t
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS /;"	d
GL_ACTIVE_ATTRIBUTES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_ATTRIBUTES /;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH /;"	d
GL_ACTIVE_PROGRAM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_PROGRAM /;"	d
GL_ACTIVE_RESOURCES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_RESOURCES /;"	d
GL_ACTIVE_SUBROUTINES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINES /;"	d
GL_ACTIVE_SUBROUTINE_MAX_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH /;"	d
GL_ACTIVE_SUBROUTINE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_UNIFORMS /;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS /;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH /;"	d
GL_ACTIVE_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_TEXTURE /;"	d
GL_ACTIVE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORMS /;"	d
GL_ACTIVE_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORM_BLOCKS /;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH /;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORM_MAX_LENGTH /;"	d
GL_ACTIVE_VARIABLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_VARIABLES /;"	d
GL_ALIASED_LINE_WIDTH_RANGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALIASED_LINE_WIDTH_RANGE /;"	d
GL_ALL_BARRIER_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALL_BARRIER_BITS /;"	d
GL_ALL_SHADER_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALL_SHADER_BITS /;"	d
GL_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALPHA /;"	d
GL_ALREADY_SIGNALED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALREADY_SIGNALED /;"	d
GL_ALWAYS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALWAYS /;"	d
GL_AND	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AND /;"	d
GL_AND_INVERTED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AND_INVERTED /;"	d
GL_AND_REVERSE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AND_REVERSE /;"	d
GL_ANY_SAMPLES_PASSED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ANY_SAMPLES_PASSED /;"	d
GL_ANY_SAMPLES_PASSED_CONSERVATIVE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE /;"	d
GL_ARB_ES2_compatibility	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_ES2_compatibility /;"	d
GL_ARB_ES3_compatibility	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_ES3_compatibility /;"	d
GL_ARB_arrays_of_arrays	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_arrays_of_arrays /;"	d
GL_ARB_base_instance	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_base_instance /;"	d
GL_ARB_blend_func_extended	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_blend_func_extended /;"	d
GL_ARB_cl_event	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_cl_event /;"	d
GL_ARB_clear_buffer_object	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_clear_buffer_object /;"	d
GL_ARB_compressed_texture_pixel_storage	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_compressed_texture_pixel_storage /;"	d
GL_ARB_compute_shader	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_compute_shader /;"	d
GL_ARB_conservative_depth	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_conservative_depth /;"	d
GL_ARB_copy_buffer	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_copy_buffer /;"	d
GL_ARB_copy_image	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_copy_image /;"	d
GL_ARB_debug_output	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_debug_output /;"	d
GL_ARB_depth_buffer_float	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_depth_buffer_float /;"	d
GL_ARB_depth_clamp	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_depth_clamp /;"	d
GL_ARB_draw_buffers_blend	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_draw_buffers_blend /;"	d
GL_ARB_draw_elements_base_vertex	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_draw_elements_base_vertex /;"	d
GL_ARB_draw_indirect	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_draw_indirect /;"	d
GL_ARB_explicit_attrib_location	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_explicit_attrib_location /;"	d
GL_ARB_explicit_uniform_location	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_explicit_uniform_location /;"	d
GL_ARB_fragment_coord_conventions	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_fragment_coord_conventions /;"	d
GL_ARB_fragment_layer_viewport	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_fragment_layer_viewport /;"	d
GL_ARB_framebuffer_no_attachments	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_framebuffer_no_attachments /;"	d
GL_ARB_framebuffer_object	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_framebuffer_object /;"	d
GL_ARB_framebuffer_sRGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_framebuffer_sRGB /;"	d
GL_ARB_get_program_binary	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_get_program_binary /;"	d
GL_ARB_gpu_shader5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_gpu_shader5 /;"	d
GL_ARB_gpu_shader_fp64	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_gpu_shader_fp64 /;"	d
GL_ARB_half_float_vertex	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_half_float_vertex /;"	d
GL_ARB_internalformat_query	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_internalformat_query /;"	d
GL_ARB_internalformat_query2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_internalformat_query2 /;"	d
GL_ARB_invalidate_subdata	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_invalidate_subdata /;"	d
GL_ARB_map_buffer_alignment	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_map_buffer_alignment /;"	d
GL_ARB_map_buffer_range	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_map_buffer_range /;"	d
GL_ARB_multi_draw_indirect	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_multi_draw_indirect /;"	d
GL_ARB_occlusion_query2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_occlusion_query2 /;"	d
GL_ARB_program_interface_query	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_program_interface_query /;"	d
GL_ARB_provoking_vertex	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_provoking_vertex /;"	d
GL_ARB_robust_buffer_access_behavior	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_robust_buffer_access_behavior /;"	d
GL_ARB_robustness	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_robustness /;"	d
GL_ARB_robustness_isolation	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_robustness_isolation /;"	d
GL_ARB_sample_shading	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_sample_shading /;"	d
GL_ARB_sampler_objects	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_sampler_objects /;"	d
GL_ARB_seamless_cube_map	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_seamless_cube_map /;"	d
GL_ARB_separate_shader_objects	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_separate_shader_objects /;"	d
GL_ARB_shader_atomic_counters	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_atomic_counters /;"	d
GL_ARB_shader_bit_encoding	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_bit_encoding /;"	d
GL_ARB_shader_image_load_store	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_image_load_store /;"	d
GL_ARB_shader_image_size	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_image_size /;"	d
GL_ARB_shader_stencil_export	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_stencil_export /;"	d
GL_ARB_shader_storage_buffer_object	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_storage_buffer_object /;"	d
GL_ARB_shader_subroutine	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_subroutine /;"	d
GL_ARB_shading_language_420pack	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shading_language_420pack /;"	d
GL_ARB_shading_language_include	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shading_language_include /;"	d
GL_ARB_shading_language_packing	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shading_language_packing /;"	d
GL_ARB_stencil_texturing	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_stencil_texturing /;"	d
GL_ARB_sync	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_sync /;"	d
GL_ARB_tessellation_shader	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_tessellation_shader /;"	d
GL_ARB_texture_buffer_object_rgb32	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_buffer_object_rgb32 /;"	d
GL_ARB_texture_buffer_range	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_buffer_range /;"	d
GL_ARB_texture_compression_bptc	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_compression_bptc /;"	d
GL_ARB_texture_compression_rgtc	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_compression_rgtc /;"	d
GL_ARB_texture_cube_map_array	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_cube_map_array /;"	d
GL_ARB_texture_gather	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_gather /;"	d
GL_ARB_texture_multisample	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_multisample /;"	d
GL_ARB_texture_query_levels	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_query_levels /;"	d
GL_ARB_texture_query_lod	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_query_lod /;"	d
GL_ARB_texture_rg	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_rg /;"	d
GL_ARB_texture_rgb10_a2ui	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_rgb10_a2ui /;"	d
GL_ARB_texture_storage	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_storage /;"	d
GL_ARB_texture_storage_multisample	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_storage_multisample /;"	d
GL_ARB_texture_swizzle	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_swizzle /;"	d
GL_ARB_texture_view	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_view /;"	d
GL_ARB_timer_query	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_timer_query /;"	d
GL_ARB_transform_feedback2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_transform_feedback2 /;"	d
GL_ARB_transform_feedback3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_transform_feedback3 /;"	d
GL_ARB_transform_feedback_instanced	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_transform_feedback_instanced /;"	d
GL_ARB_uniform_buffer_object	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_uniform_buffer_object /;"	d
GL_ARB_vertex_array_bgra	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_array_bgra /;"	d
GL_ARB_vertex_array_object	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_array_object /;"	d
GL_ARB_vertex_attrib_64bit	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_attrib_64bit /;"	d
GL_ARB_vertex_attrib_binding	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_attrib_binding /;"	d
GL_ARB_vertex_type_2_10_10_10_rev	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_type_2_10_10_10_rev /;"	d
GL_ARB_viewport_array	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_viewport_array /;"	d
GL_ARRAY_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_BUFFER /;"	d
GL_ARRAY_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_BUFFER_BINDING /;"	d
GL_ARRAY_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_SIZE /;"	d
GL_ARRAY_STRIDE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_STRIDE /;"	d
GL_ATOMIC_COUNTER_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BARRIER_BIT /;"	d
GL_ATOMIC_COUNTER_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER /;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS /;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES /;"	d
GL_ATOMIC_COUNTER_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_BINDING /;"	d
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE /;"	d
GL_ATOMIC_COUNTER_BUFFER_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_INDEX /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_SIZE /;"	d
GL_ATOMIC_COUNTER_BUFFER_START	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_START /;"	d
GL_ATTACHED_SHADERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATTACHED_SHADERS /;"	d
GL_AUTO_GENERATE_MIPMAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AUTO_GENERATE_MIPMAP /;"	d
GL_BACK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BACK /;"	d
GL_BACK_LEFT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BACK_LEFT /;"	d
GL_BACK_RIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BACK_RIGHT /;"	d
GL_BGR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGR /;"	d
GL_BGRA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGRA /;"	d
GL_BGRA_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGRA_INTEGER /;"	d
GL_BGR_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGR_INTEGER /;"	d
GL_BLEND	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND /;"	d
GL_BLEND_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_COLOR /;"	d
GL_BLEND_DST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_DST /;"	d
GL_BLEND_DST_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_DST_ALPHA /;"	d
GL_BLEND_DST_RGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_DST_RGB /;"	d
GL_BLEND_EQUATION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_EQUATION /;"	d
GL_BLEND_EQUATION_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_EQUATION_ALPHA /;"	d
GL_BLEND_EQUATION_RGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_EQUATION_RGB /;"	d
GL_BLEND_SRC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_SRC /;"	d
GL_BLEND_SRC_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_SRC_ALPHA /;"	d
GL_BLEND_SRC_RGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_SRC_RGB /;"	d
GL_BLOCK_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLOCK_INDEX /;"	d
GL_BLUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLUE /;"	d
GL_BLUE_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLUE_INTEGER /;"	d
GL_BOOL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL /;"	d
GL_BOOL_VEC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL_VEC2 /;"	d
GL_BOOL_VEC3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL_VEC3 /;"	d
GL_BOOL_VEC4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL_VEC4 /;"	d
GL_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER /;"	d
GL_BUFFER_ACCESS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_ACCESS /;"	d
GL_BUFFER_ACCESS_FLAGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_ACCESS_FLAGS /;"	d
GL_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_BINDING /;"	d
GL_BUFFER_DATA_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_DATA_SIZE /;"	d
GL_BUFFER_MAPPED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAPPED /;"	d
GL_BUFFER_MAP_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAP_LENGTH /;"	d
GL_BUFFER_MAP_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAP_OFFSET /;"	d
GL_BUFFER_MAP_POINTER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAP_POINTER /;"	d
GL_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_SIZE /;"	d
GL_BUFFER_UPDATE_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_UPDATE_BARRIER_BIT /;"	d
GL_BUFFER_USAGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_USAGE /;"	d
GL_BUFFER_VARIABLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_VARIABLE /;"	d
GL_BYTE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BYTE /;"	d
GL_CAVEAT_SUPPORT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CAVEAT_SUPPORT /;"	d
GL_CCW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CCW /;"	d
GL_CLAMP_READ_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLAMP_READ_COLOR /;"	d
GL_CLAMP_TO_BORDER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLAMP_TO_BORDER /;"	d
GL_CLAMP_TO_EDGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLAMP_TO_EDGE /;"	d
GL_CLEAR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLEAR /;"	d
GL_CLEAR_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLEAR_BUFFER /;"	d
GL_CLIP_DISTANCE0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE0 /;"	d
GL_CLIP_DISTANCE1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE1 /;"	d
GL_CLIP_DISTANCE2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE2 /;"	d
GL_CLIP_DISTANCE3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE3 /;"	d
GL_CLIP_DISTANCE4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE4 /;"	d
GL_CLIP_DISTANCE5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE5 /;"	d
GL_CLIP_DISTANCE6	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE6 /;"	d
GL_CLIP_DISTANCE7	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE7 /;"	d
GL_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR /;"	d
GL_COLOR_ATTACHMENT0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT0 /;"	d
GL_COLOR_ATTACHMENT1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT1 /;"	d
GL_COLOR_ATTACHMENT10	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT10 /;"	d
GL_COLOR_ATTACHMENT11	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT11 /;"	d
GL_COLOR_ATTACHMENT12	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT12 /;"	d
GL_COLOR_ATTACHMENT13	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT13 /;"	d
GL_COLOR_ATTACHMENT14	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT14 /;"	d
GL_COLOR_ATTACHMENT15	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT15 /;"	d
GL_COLOR_ATTACHMENT2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT2 /;"	d
GL_COLOR_ATTACHMENT3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT3 /;"	d
GL_COLOR_ATTACHMENT4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT4 /;"	d
GL_COLOR_ATTACHMENT5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT5 /;"	d
GL_COLOR_ATTACHMENT6	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT6 /;"	d
GL_COLOR_ATTACHMENT7	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT7 /;"	d
GL_COLOR_ATTACHMENT8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT8 /;"	d
GL_COLOR_ATTACHMENT9	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT9 /;"	d
GL_COLOR_BUFFER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_BUFFER_BIT /;"	d
GL_COLOR_CLEAR_VALUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_CLEAR_VALUE /;"	d
GL_COLOR_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_COMPONENTS /;"	d
GL_COLOR_ENCODING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ENCODING /;"	d
GL_COLOR_LOGIC_OP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_LOGIC_OP /;"	d
GL_COLOR_RENDERABLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_RENDERABLE /;"	d
GL_COLOR_WRITEMASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_WRITEMASK /;"	d
GL_COMMAND_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMMAND_BARRIER_BIT /;"	d
GL_COMPARE_REF_TO_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPARE_REF_TO_TEXTURE /;"	d
GL_COMPATIBLE_SUBROUTINES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPATIBLE_SUBROUTINES /;"	d
GL_COMPILE_STATUS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPILE_STATUS /;"	d
GL_COMPRESSED_R11_EAC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_R11_EAC /;"	d
GL_COMPRESSED_RED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RED /;"	d
GL_COMPRESSED_RED_RGTC1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RED_RGTC1 /;"	d
GL_COMPRESSED_RG	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RG /;"	d
GL_COMPRESSED_RG11_EAC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RG11_EAC /;"	d
GL_COMPRESSED_RGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB /;"	d
GL_COMPRESSED_RGB8_ETC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB8_ETC2 /;"	d
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 /;"	d
GL_COMPRESSED_RGBA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA /;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA8_ETC2_EAC /;"	d
GL_COMPRESSED_RGBA_ASTC_10x10_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_10x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_10x6_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_10x8_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_12x10_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_12x12_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_5x4_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_5x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_6x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_6x6_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x6_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR /;"	d
GL_COMPRESSED_RGBA_BPTC_UNORM_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB /;"	d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB /;"	d
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB /;"	d
GL_COMPRESSED_RG_RGTC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RG_RGTC2 /;"	d
GL_COMPRESSED_SIGNED_R11_EAC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_R11_EAC /;"	d
GL_COMPRESSED_SIGNED_RED_RGTC1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_RED_RGTC1 /;"	d
GL_COMPRESSED_SIGNED_RG11_EAC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_RG11_EAC /;"	d
GL_COMPRESSED_SIGNED_RG_RGTC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_RG_RGTC2 /;"	d
GL_COMPRESSED_SRGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC /;"	d
GL_COMPRESSED_SRGB8_ETC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ETC2 /;"	d
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 /;"	d
GL_COMPRESSED_SRGB_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB_ALPHA /;"	d
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB /;"	d
GL_COMPRESSED_TEXTURE_FORMATS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_TEXTURE_FORMATS /;"	d
GL_COMPUTE_LOCAL_WORK_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_LOCAL_WORK_SIZE /;"	d
GL_COMPUTE_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SHADER /;"	d
GL_COMPUTE_SHADER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SHADER_BIT /;"	d
GL_COMPUTE_SUBROUTINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SUBROUTINE /;"	d
GL_COMPUTE_SUBROUTINE_UNIFORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SUBROUTINE_UNIFORM /;"	d
GL_COMPUTE_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_TEXTURE /;"	d
GL_CONDITION_SATISFIED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONDITION_SATISFIED /;"	d
GL_CONSTANT_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONSTANT_ALPHA /;"	d
GL_CONSTANT_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONSTANT_COLOR /;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT /;"	d
GL_CONTEXT_CORE_PROFILE_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_CORE_PROFILE_BIT /;"	d
GL_CONTEXT_FLAGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAGS /;"	d
GL_CONTEXT_FLAG_DEBUG_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAG_DEBUG_BIT /;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT /;"	d
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB /;"	d
GL_CONTEXT_PROFILE_MASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_PROFILE_MASK /;"	d
GL_COPY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY /;"	d
GL_COPY_INVERTED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_INVERTED /;"	d
GL_COPY_READ_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_READ_BUFFER /;"	d
GL_COPY_READ_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_READ_BUFFER_BINDING /;"	d
GL_COPY_WRITE_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_WRITE_BUFFER /;"	d
GL_COPY_WRITE_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_WRITE_BUFFER_BINDING /;"	d
GL_CULL_FACE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CULL_FACE /;"	d
GL_CULL_FACE_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CULL_FACE_MODE /;"	d
GL_CURRENT_PROGRAM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CURRENT_PROGRAM /;"	d
GL_CURRENT_QUERY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CURRENT_QUERY /;"	d
GL_CURRENT_VERTEX_ATTRIB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CURRENT_VERTEX_ATTRIB /;"	d
GL_CW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CW /;"	d
GL_DEBUG_CALLBACK_FUNCTION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_FUNCTION /;"	d
GL_DEBUG_CALLBACK_FUNCTION_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_FUNCTION_ARB /;"	d
GL_DEBUG_CALLBACK_USER_PARAM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_USER_PARAM /;"	d
GL_DEBUG_CALLBACK_USER_PARAM_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_USER_PARAM_ARB /;"	d
GL_DEBUG_GROUP_STACK_DEPTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_GROUP_STACK_DEPTH /;"	d
GL_DEBUG_LOGGED_MESSAGES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_LOGGED_MESSAGES /;"	d
GL_DEBUG_LOGGED_MESSAGES_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_LOGGED_MESSAGES_ARB /;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH /;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB /;"	d
GL_DEBUG_OUTPUT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_OUTPUT /;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_OUTPUT_SYNCHRONOUS /;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB /;"	d
GL_DEBUG_SEVERITY_HIGH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_HIGH /;"	d
GL_DEBUG_SEVERITY_HIGH_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_HIGH_ARB /;"	d
GL_DEBUG_SEVERITY_LOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_LOW /;"	d
GL_DEBUG_SEVERITY_LOW_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_LOW_ARB /;"	d
GL_DEBUG_SEVERITY_MEDIUM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_MEDIUM /;"	d
GL_DEBUG_SEVERITY_MEDIUM_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_MEDIUM_ARB /;"	d
GL_DEBUG_SEVERITY_NOTIFICATION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_NOTIFICATION /;"	d
GL_DEBUG_SOURCE_API	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_API /;"	d
GL_DEBUG_SOURCE_API_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_API_ARB /;"	d
GL_DEBUG_SOURCE_APPLICATION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_APPLICATION /;"	d
GL_DEBUG_SOURCE_APPLICATION_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_APPLICATION_ARB /;"	d
GL_DEBUG_SOURCE_OTHER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_OTHER /;"	d
GL_DEBUG_SOURCE_OTHER_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_OTHER_ARB /;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_SHADER_COMPILER /;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB /;"	d
GL_DEBUG_SOURCE_THIRD_PARTY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_THIRD_PARTY /;"	d
GL_DEBUG_SOURCE_THIRD_PARTY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB /;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_WINDOW_SYSTEM /;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB /;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR /;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB /;"	d
GL_DEBUG_TYPE_ERROR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_ERROR /;"	d
GL_DEBUG_TYPE_ERROR_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_ERROR_ARB /;"	d
GL_DEBUG_TYPE_MARKER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_MARKER /;"	d
GL_DEBUG_TYPE_OTHER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_OTHER /;"	d
GL_DEBUG_TYPE_OTHER_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_OTHER_ARB /;"	d
GL_DEBUG_TYPE_PERFORMANCE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PERFORMANCE /;"	d
GL_DEBUG_TYPE_PERFORMANCE_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PERFORMANCE_ARB /;"	d
GL_DEBUG_TYPE_POP_GROUP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_POP_GROUP /;"	d
GL_DEBUG_TYPE_PORTABILITY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PORTABILITY /;"	d
GL_DEBUG_TYPE_PORTABILITY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PORTABILITY_ARB /;"	d
GL_DEBUG_TYPE_PUSH_GROUP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PUSH_GROUP /;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR /;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB /;"	d
GL_DECR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DECR /;"	d
GL_DECR_WRAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DECR_WRAP /;"	d
GL_DELETE_STATUS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DELETE_STATUS /;"	d
GL_DEPTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH /;"	d
GL_DEPTH24_STENCIL8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH24_STENCIL8 /;"	d
GL_DEPTH32F_STENCIL8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH32F_STENCIL8 /;"	d
GL_DEPTH_ATTACHMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_ATTACHMENT /;"	d
GL_DEPTH_BUFFER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_BUFFER_BIT /;"	d
GL_DEPTH_CLAMP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_CLAMP /;"	d
GL_DEPTH_CLEAR_VALUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_CLEAR_VALUE /;"	d
GL_DEPTH_COMPONENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT /;"	d
GL_DEPTH_COMPONENT16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT16 /;"	d
GL_DEPTH_COMPONENT24	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT24 /;"	d
GL_DEPTH_COMPONENT32	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT32 /;"	d
GL_DEPTH_COMPONENT32F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT32F /;"	d
GL_DEPTH_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENTS /;"	d
GL_DEPTH_FUNC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_FUNC /;"	d
GL_DEPTH_RANGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_RANGE /;"	d
GL_DEPTH_RENDERABLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_RENDERABLE /;"	d
GL_DEPTH_STENCIL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_STENCIL /;"	d
GL_DEPTH_STENCIL_ATTACHMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_STENCIL_ATTACHMENT /;"	d
GL_DEPTH_STENCIL_TEXTURE_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_STENCIL_TEXTURE_MODE /;"	d
GL_DEPTH_TEST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_TEST /;"	d
GL_DEPTH_WRITEMASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_WRITEMASK /;"	d
GL_DISPATCH_INDIRECT_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DISPATCH_INDIRECT_BUFFER /;"	d
GL_DISPATCH_INDIRECT_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DISPATCH_INDIRECT_BUFFER_BINDING /;"	d
GL_DISPLAY_LIST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DISPLAY_LIST /;"	d
GL_DITHER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DITHER /;"	d
GL_DONT_CARE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DONT_CARE /;"	d
GL_DOUBLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE /;"	d
GL_DOUBLEBUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLEBUFFER /;"	d
GL_DOUBLE_MAT2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT2 /;"	d
GL_DOUBLE_MAT2x3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT2x3 /;"	d
GL_DOUBLE_MAT2x4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT2x4 /;"	d
GL_DOUBLE_MAT3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT3 /;"	d
GL_DOUBLE_MAT3x2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT3x2 /;"	d
GL_DOUBLE_MAT3x4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT3x4 /;"	d
GL_DOUBLE_MAT4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT4 /;"	d
GL_DOUBLE_MAT4x2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT4x2 /;"	d
GL_DOUBLE_MAT4x3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT4x3 /;"	d
GL_DOUBLE_VEC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_VEC2 /;"	d
GL_DOUBLE_VEC3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_VEC3 /;"	d
GL_DOUBLE_VEC4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_VEC4 /;"	d
GL_DRAW_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER /;"	d
GL_DRAW_BUFFER0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER0 /;"	d
GL_DRAW_BUFFER1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER1 /;"	d
GL_DRAW_BUFFER10	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER10 /;"	d
GL_DRAW_BUFFER11	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER11 /;"	d
GL_DRAW_BUFFER12	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER12 /;"	d
GL_DRAW_BUFFER13	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER13 /;"	d
GL_DRAW_BUFFER14	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER14 /;"	d
GL_DRAW_BUFFER15	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER15 /;"	d
GL_DRAW_BUFFER2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER2 /;"	d
GL_DRAW_BUFFER3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER3 /;"	d
GL_DRAW_BUFFER4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER4 /;"	d
GL_DRAW_BUFFER5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER5 /;"	d
GL_DRAW_BUFFER6	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER6 /;"	d
GL_DRAW_BUFFER7	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER7 /;"	d
GL_DRAW_BUFFER8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER8 /;"	d
GL_DRAW_BUFFER9	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER9 /;"	d
GL_DRAW_FRAMEBUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_FRAMEBUFFER /;"	d
GL_DRAW_FRAMEBUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_FRAMEBUFFER_BINDING /;"	d
GL_DRAW_INDIRECT_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_INDIRECT_BUFFER /;"	d
GL_DRAW_INDIRECT_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_INDIRECT_BUFFER_BINDING /;"	d
GL_DST_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DST_ALPHA /;"	d
GL_DST_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DST_COLOR /;"	d
GL_DYNAMIC_COPY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DYNAMIC_COPY /;"	d
GL_DYNAMIC_DRAW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DYNAMIC_DRAW /;"	d
GL_DYNAMIC_READ	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DYNAMIC_READ /;"	d
GL_ELEMENT_ARRAY_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ELEMENT_ARRAY_BARRIER_BIT /;"	d
GL_ELEMENT_ARRAY_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ELEMENT_ARRAY_BUFFER /;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GL_EQUAL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_EQUAL /;"	d
GL_EQUIV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_EQUIV /;"	d
GL_EXTENSIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_EXTENSIONS /;"	d
GL_FALSE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FALSE /;"	d
GL_FASTEST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FASTEST /;"	d
GL_FILL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FILL /;"	d
GL_FILTER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FILTER /;"	d
GL_FIRST_VERTEX_CONVENTION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FIRST_VERTEX_CONVENTION /;"	d
GL_FIXED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FIXED /;"	d
GL_FIXED_ONLY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FIXED_ONLY /;"	d
GL_FLOAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT /;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV /;"	d
GL_FLOAT_MAT2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT2 /;"	d
GL_FLOAT_MAT2x3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT2x3 /;"	d
GL_FLOAT_MAT2x4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT2x4 /;"	d
GL_FLOAT_MAT3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT3 /;"	d
GL_FLOAT_MAT3x2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT3x2 /;"	d
GL_FLOAT_MAT3x4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT3x4 /;"	d
GL_FLOAT_MAT4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT4 /;"	d
GL_FLOAT_MAT4x2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT4x2 /;"	d
GL_FLOAT_MAT4x3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT4x3 /;"	d
GL_FLOAT_VEC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_VEC2 /;"	d
GL_FLOAT_VEC3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_VEC3 /;"	d
GL_FLOAT_VEC4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_VEC4 /;"	d
GL_FRACTIONAL_EVEN	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRACTIONAL_EVEN /;"	d
GL_FRACTIONAL_ODD	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRACTIONAL_ODD /;"	d
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS /;"	d
GL_FRAGMENT_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SHADER /;"	d
GL_FRAGMENT_SHADER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SHADER_BIT /;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT /;"	d
GL_FRAGMENT_SUBROUTINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SUBROUTINE /;"	d
GL_FRAGMENT_SUBROUTINE_UNIFORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SUBROUTINE_UNIFORM /;"	d
GL_FRAGMENT_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_TEXTURE /;"	d
GL_FRAMEBUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER /;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING /;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED /;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME /;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL /;"	d
GL_FRAMEBUFFER_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_BARRIER_BIT /;"	d
GL_FRAMEBUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_BINDING /;"	d
GL_FRAMEBUFFER_BLEND	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_BLEND /;"	d
GL_FRAMEBUFFER_COMPLETE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_COMPLETE /;"	d
GL_FRAMEBUFFER_DEFAULT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT /;"	d
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS /;"	d
GL_FRAMEBUFFER_DEFAULT_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_HEIGHT /;"	d
GL_FRAMEBUFFER_DEFAULT_LAYERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_LAYERS /;"	d
GL_FRAMEBUFFER_DEFAULT_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_SAMPLES /;"	d
GL_FRAMEBUFFER_DEFAULT_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_WIDTH /;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT /;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER /;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS /;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT /;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE /;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER /;"	d
GL_FRAMEBUFFER_RENDERABLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_RENDERABLE /;"	d
GL_FRAMEBUFFER_RENDERABLE_LAYERED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_RENDERABLE_LAYERED /;"	d
GL_FRAMEBUFFER_SRGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_SRGB /;"	d
GL_FRAMEBUFFER_UNDEFINED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_UNDEFINED /;"	d
GL_FRAMEBUFFER_UNSUPPORTED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_UNSUPPORTED /;"	d
GL_FRONT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT /;"	d
GL_FRONT_AND_BACK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_AND_BACK /;"	d
GL_FRONT_FACE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_FACE /;"	d
GL_FRONT_LEFT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_LEFT /;"	d
GL_FRONT_RIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_RIGHT /;"	d
GL_FULL_SUPPORT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FULL_SUPPORT /;"	d
GL_FUNC_ADD	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FUNC_ADD /;"	d
GL_FUNC_REVERSE_SUBTRACT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FUNC_REVERSE_SUBTRACT /;"	d
GL_FUNC_SUBTRACT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FUNC_SUBTRACT /;"	d
GL_GEOMETRY_INPUT_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_INPUT_TYPE /;"	d
GL_GEOMETRY_OUTPUT_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_OUTPUT_TYPE /;"	d
GL_GEOMETRY_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SHADER /;"	d
GL_GEOMETRY_SHADER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SHADER_BIT /;"	d
GL_GEOMETRY_SHADER_INVOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SHADER_INVOCATIONS /;"	d
GL_GEOMETRY_SUBROUTINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SUBROUTINE /;"	d
GL_GEOMETRY_SUBROUTINE_UNIFORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SUBROUTINE_UNIFORM /;"	d
GL_GEOMETRY_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_TEXTURE /;"	d
GL_GEOMETRY_VERTICES_OUT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_VERTICES_OUT /;"	d
GL_GEQUAL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEQUAL /;"	d
GL_GET_TEXTURE_IMAGE_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GET_TEXTURE_IMAGE_FORMAT /;"	d
GL_GET_TEXTURE_IMAGE_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GET_TEXTURE_IMAGE_TYPE /;"	d
GL_GLEXT_LEGACY	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^   #define GL_GLEXT_LEGACY$/;"	d
GL_GREATER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GREATER /;"	d
GL_GREEN	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GREEN /;"	d
GL_GREEN_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GREEN_INTEGER /;"	d
GL_GUILTY_CONTEXT_RESET_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GUILTY_CONTEXT_RESET_ARB /;"	d
GL_HALF_FLOAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_HALF_FLOAT /;"	d
GL_HIGH_FLOAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_HIGH_FLOAT /;"	d
GL_HIGH_INT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_HIGH_INT /;"	d
GL_IMAGE_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_1D /;"	d
GL_IMAGE_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_1D_ARRAY /;"	d
GL_IMAGE_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D /;"	d
GL_IMAGE_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_ARRAY /;"	d
GL_IMAGE_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_MULTISAMPLE /;"	d
GL_IMAGE_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_MULTISAMPLE_ARRAY /;"	d
GL_IMAGE_2D_RECT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_RECT /;"	d
GL_IMAGE_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_3D /;"	d
GL_IMAGE_BINDING_ACCESS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_ACCESS /;"	d
GL_IMAGE_BINDING_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_FORMAT /;"	d
GL_IMAGE_BINDING_LAYER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_LAYER /;"	d
GL_IMAGE_BINDING_LAYERED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_LAYERED /;"	d
GL_IMAGE_BINDING_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_LEVEL /;"	d
GL_IMAGE_BINDING_NAME	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_NAME /;"	d
GL_IMAGE_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BUFFER /;"	d
GL_IMAGE_CLASS_10_10_10_2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_10_10_10_2 /;"	d
GL_IMAGE_CLASS_11_11_10	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_11_11_10 /;"	d
GL_IMAGE_CLASS_1_X_16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_1_X_16 /;"	d
GL_IMAGE_CLASS_1_X_32	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_1_X_32 /;"	d
GL_IMAGE_CLASS_1_X_8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_1_X_8 /;"	d
GL_IMAGE_CLASS_2_X_16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_2_X_16 /;"	d
GL_IMAGE_CLASS_2_X_32	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_2_X_32 /;"	d
GL_IMAGE_CLASS_2_X_8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_2_X_8 /;"	d
GL_IMAGE_CLASS_4_X_16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_4_X_16 /;"	d
GL_IMAGE_CLASS_4_X_32	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_4_X_32 /;"	d
GL_IMAGE_CLASS_4_X_8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_4_X_8 /;"	d
GL_IMAGE_COMPATIBILITY_CLASS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_COMPATIBILITY_CLASS /;"	d
GL_IMAGE_CUBE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CUBE /;"	d
GL_IMAGE_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CUBE_MAP_ARRAY /;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS /;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE /;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE /;"	d
GL_IMAGE_PIXEL_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_PIXEL_FORMAT /;"	d
GL_IMAGE_PIXEL_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_PIXEL_TYPE /;"	d
GL_IMAGE_TEXEL_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_TEXEL_SIZE /;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMPLEMENTATION_COLOR_READ_FORMAT /;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMPLEMENTATION_COLOR_READ_TYPE /;"	d
GL_INCR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INCR /;"	d
GL_INCR_WRAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INCR_WRAP /;"	d
GL_INFO_LOG_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INFO_LOG_LENGTH /;"	d
GL_INNOCENT_CONTEXT_RESET_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INNOCENT_CONTEXT_RESET_ARB /;"	d
GL_INT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT /;"	d
GL_INTERLEAVED_ATTRIBS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERLEAVED_ATTRIBS /;"	d
GL_INTERNALFORMAT_ALPHA_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_ALPHA_SIZE /;"	d
GL_INTERNALFORMAT_ALPHA_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_ALPHA_TYPE /;"	d
GL_INTERNALFORMAT_BLUE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_BLUE_SIZE /;"	d
GL_INTERNALFORMAT_BLUE_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_BLUE_TYPE /;"	d
GL_INTERNALFORMAT_DEPTH_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_DEPTH_SIZE /;"	d
GL_INTERNALFORMAT_DEPTH_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_DEPTH_TYPE /;"	d
GL_INTERNALFORMAT_GREEN_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_GREEN_SIZE /;"	d
GL_INTERNALFORMAT_GREEN_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_GREEN_TYPE /;"	d
GL_INTERNALFORMAT_PREFERRED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_PREFERRED /;"	d
GL_INTERNALFORMAT_RED_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_RED_SIZE /;"	d
GL_INTERNALFORMAT_RED_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_RED_TYPE /;"	d
GL_INTERNALFORMAT_SHARED_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_SHARED_SIZE /;"	d
GL_INTERNALFORMAT_STENCIL_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_STENCIL_SIZE /;"	d
GL_INTERNALFORMAT_STENCIL_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_STENCIL_TYPE /;"	d
GL_INTERNALFORMAT_SUPPORTED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_SUPPORTED /;"	d
GL_INT_2_10_10_10_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_2_10_10_10_REV /;"	d
GL_INT_IMAGE_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_1D /;"	d
GL_INT_IMAGE_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_1D_ARRAY /;"	d
GL_INT_IMAGE_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D /;"	d
GL_INT_IMAGE_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_ARRAY /;"	d
GL_INT_IMAGE_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_MULTISAMPLE /;"	d
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY /;"	d
GL_INT_IMAGE_2D_RECT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_RECT /;"	d
GL_INT_IMAGE_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_3D /;"	d
GL_INT_IMAGE_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_BUFFER /;"	d
GL_INT_IMAGE_CUBE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_CUBE /;"	d
GL_INT_IMAGE_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_CUBE_MAP_ARRAY /;"	d
GL_INT_SAMPLER_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_1D /;"	d
GL_INT_SAMPLER_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_1D_ARRAY /;"	d
GL_INT_SAMPLER_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D /;"	d
GL_INT_SAMPLER_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_ARRAY /;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_MULTISAMPLE /;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_INT_SAMPLER_2D_RECT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_RECT /;"	d
GL_INT_SAMPLER_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_3D /;"	d
GL_INT_SAMPLER_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_BUFFER /;"	d
GL_INT_SAMPLER_CUBE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_CUBE /;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_CUBE_MAP_ARRAY /;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB /;"	d
GL_INT_VEC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_VEC2 /;"	d
GL_INT_VEC3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_VEC3 /;"	d
GL_INT_VEC4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_VEC4 /;"	d
GL_INVALID_ENUM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_ENUM /;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_FRAMEBUFFER_OPERATION /;"	d
GL_INVALID_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_INDEX /;"	d
GL_INVALID_OPERATION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_OPERATION /;"	d
GL_INVALID_VALUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_VALUE /;"	d
GL_INVERT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVERT /;"	d
GL_ISOLINES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ISOLINES /;"	d
GL_IS_PER_PATCH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IS_PER_PATCH /;"	d
GL_IS_ROW_MAJOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IS_ROW_MAJOR /;"	d
GL_KEEP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_KEEP /;"	d
GL_KHR_debug	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_KHR_debug /;"	d
GL_KHR_texture_compression_astc_ldr	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_KHR_texture_compression_astc_ldr /;"	d
GL_LAST_VERTEX_CONVENTION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LAST_VERTEX_CONVENTION /;"	d
GL_LAYER_PROVOKING_VERTEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LAYER_PROVOKING_VERTEX /;"	d
GL_LEFT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LEFT /;"	d
GL_LEQUAL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LEQUAL /;"	d
GL_LESS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LESS /;"	d
GL_LINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE /;"	d
GL_LINEAR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINEAR /;"	d
GL_LINEAR_MIPMAP_LINEAR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINEAR_MIPMAP_LINEAR /;"	d
GL_LINEAR_MIPMAP_NEAREST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINEAR_MIPMAP_NEAREST /;"	d
GL_LINES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINES /;"	d
GL_LINES_ADJACENCY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINES_ADJACENCY /;"	d
GL_LINE_LOOP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_LOOP /;"	d
GL_LINE_SMOOTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_SMOOTH /;"	d
GL_LINE_SMOOTH_HINT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_SMOOTH_HINT /;"	d
GL_LINE_STRIP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_STRIP /;"	d
GL_LINE_STRIP_ADJACENCY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_STRIP_ADJACENCY /;"	d
GL_LINE_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_WIDTH /;"	d
GL_LINE_WIDTH_GRANULARITY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_WIDTH_GRANULARITY /;"	d
GL_LINE_WIDTH_RANGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_WIDTH_RANGE /;"	d
GL_LINK_STATUS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINK_STATUS /;"	d
GL_LOCATION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOCATION /;"	d
GL_LOCATION_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOCATION_INDEX /;"	d
GL_LOGIC_OP_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOGIC_OP_MODE /;"	d
GL_LOSE_CONTEXT_ON_RESET_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOSE_CONTEXT_ON_RESET_ARB /;"	d
GL_LOWER_LEFT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOWER_LEFT /;"	d
GL_LOW_FLOAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOW_FLOAT /;"	d
GL_LOW_INT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOW_INT /;"	d
GL_MAJOR_VERSION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAJOR_VERSION /;"	d
GL_MANUAL_GENERATE_MIPMAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MANUAL_GENERATE_MIPMAP /;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_FLUSH_EXPLICIT_BIT /;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_INVALIDATE_BUFFER_BIT /;"	d
GL_MAP_INVALIDATE_RANGE_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_INVALIDATE_RANGE_BIT /;"	d
GL_MAP_READ_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_READ_BIT /;"	d
GL_MAP_UNSYNCHRONIZED_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_UNSYNCHRONIZED_BIT /;"	d
GL_MAP_WRITE_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_WRITE_BIT /;"	d
GL_MATRIX_STRIDE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MATRIX_STRIDE /;"	d
GL_MAX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX /;"	d
GL_MAX_3D_TEXTURE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_3D_TEXTURE_SIZE /;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ARRAY_TEXTURE_LAYERS /;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS /;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE /;"	d
GL_MAX_CLIP_DISTANCES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_CLIP_DISTANCES /;"	d
GL_MAX_COLOR_ATTACHMENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COLOR_ATTACHMENTS /;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COLOR_TEXTURE_SAMPLES /;"	d
GL_MAX_COMBINED_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_ATOMIC_COUNTERS /;"	d
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_DIMENSIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_DIMENSIONS /;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_IMAGE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_IMAGE_UNIFORMS /;"	d
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS /;"	d
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES /;"	d
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_UNIFORM_BLOCKS /;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_ATOMIC_COUNTERS /;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_COMPUTE_IMAGE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_IMAGE_UNIFORMS /;"	d
GL_MAX_COMPUTE_LOCAL_INVOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_LOCAL_INVOCATIONS /;"	d
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE /;"	d
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_COMPUTE_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_UNIFORM_BLOCKS /;"	d
GL_MAX_COMPUTE_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMPUTE_WORK_GROUP_COUNT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_WORK_GROUP_COUNT /;"	d
GL_MAX_COMPUTE_WORK_GROUP_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_WORK_GROUP_SIZE /;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_CUBE_MAP_TEXTURE_SIZE /;"	d
GL_MAX_DEBUG_GROUP_STACK_DEPTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_GROUP_STACK_DEPTH /;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_LOGGED_MESSAGES /;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB /;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_MESSAGE_LENGTH /;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB /;"	d
GL_MAX_DEPTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEPTH /;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEPTH_TEXTURE_SAMPLES /;"	d
GL_MAX_DRAW_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DRAW_BUFFERS /;"	d
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS /;"	d
GL_MAX_ELEMENTS_INDICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ELEMENTS_INDICES /;"	d
GL_MAX_ELEMENTS_VERTICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ELEMENTS_VERTICES /;"	d
GL_MAX_ELEMENT_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ELEMENT_INDEX /;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS /;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_FRAGMENT_IMAGE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS /;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_INPUT_COMPONENTS /;"	d
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET /;"	d
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS /;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS /;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_UNIFORM_VECTORS /;"	d
GL_MAX_FRAMEBUFFER_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_HEIGHT /;"	d
GL_MAX_FRAMEBUFFER_LAYERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_LAYERS /;"	d
GL_MAX_FRAMEBUFFER_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_SAMPLES /;"	d
GL_MAX_FRAMEBUFFER_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_WIDTH /;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS /;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_GEOMETRY_IMAGE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS /;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_INPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_OUTPUT_VERTICES /;"	d
GL_MAX_GEOMETRY_SHADER_INVOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS /;"	d
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS /;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS /;"	d
GL_MAX_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_HEIGHT /;"	d
GL_MAX_IMAGE_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_IMAGE_SAMPLES /;"	d
GL_MAX_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_IMAGE_UNITS /;"	d
GL_MAX_INTEGER_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_INTEGER_SAMPLES /;"	d
GL_MAX_LABEL_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_LABEL_LENGTH /;"	d
GL_MAX_LAYERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_LAYERS /;"	d
GL_MAX_NAME_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_NAME_LENGTH /;"	d
GL_MAX_NUM_ACTIVE_VARIABLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_NUM_ACTIVE_VARIABLES /;"	d
GL_MAX_NUM_COMPATIBLE_SUBROUTINES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES /;"	d
GL_MAX_PATCH_VERTICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PATCH_VERTICES /;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXEL_OFFSET /;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB /;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET /;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB /;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_RECTANGLE_TEXTURE_SIZE /;"	d
GL_MAX_RENDERBUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_RENDERBUFFER_SIZE /;"	d
GL_MAX_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SAMPLES /;"	d
GL_MAX_SAMPLE_MASK_WORDS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SAMPLE_MASK_WORDS /;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SERVER_WAIT_TIMEOUT /;"	d
GL_MAX_SHADER_STORAGE_BLOCK_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE /;"	d
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS /;"	d
GL_MAX_SUBROUTINES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SUBROUTINES /;"	d
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS /;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS /;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS /;"	d
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS /;"	d
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS /;"	d
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS /;"	d
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS /;"	d
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS /;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS /;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS /;"	d
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS /;"	d
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS /;"	d
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS /;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS /;"	d
GL_MAX_TESS_GEN_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_GEN_LEVEL /;"	d
GL_MAX_TESS_PATCH_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_PATCH_COMPONENTS /;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_BUFFER_SIZE /;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_TEXTURE_LOD_BIAS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_LOD_BIAS /;"	d
GL_MAX_TEXTURE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_SIZE /;"	d
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS /;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_UNIFORM_BLOCK_SIZE /;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_UNIFORM_BUFFER_BINDINGS /;"	d
GL_MAX_UNIFORM_LOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_UNIFORM_LOCATIONS /;"	d
GL_MAX_VARYING_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VARYING_COMPONENTS /;"	d
GL_MAX_VARYING_FLOATS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VARYING_FLOATS /;"	d
GL_MAX_VARYING_VECTORS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VARYING_VECTORS /;"	d
GL_MAX_VERTEX_ATOMIC_COUNTERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATOMIC_COUNTERS /;"	d
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_VERTEX_ATTRIBS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATTRIBS /;"	d
GL_MAX_VERTEX_ATTRIB_BINDINGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATTRIB_BINDINGS /;"	d
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET /;"	d
GL_MAX_VERTEX_IMAGE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_IMAGE_UNIFORMS /;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_OUTPUT_COMPONENTS /;"	d
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_VERTEX_STREAMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_STREAMS /;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_UNIFORM_BLOCKS /;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_UNIFORM_COMPONENTS /;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_UNIFORM_VECTORS /;"	d
GL_MAX_VIEWPORTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VIEWPORTS /;"	d
GL_MAX_VIEWPORT_DIMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VIEWPORT_DIMS /;"	d
GL_MAX_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_WIDTH /;"	d
GL_MEDIUM_FLOAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MEDIUM_FLOAT /;"	d
GL_MEDIUM_INT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MEDIUM_INT /;"	d
GL_MIN	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN /;"	d
GL_MINOR_VERSION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MINOR_VERSION /;"	d
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET /;"	d
GL_MIN_MAP_BUFFER_ALIGNMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_MAP_BUFFER_ALIGNMENT /;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_PROGRAM_TEXEL_OFFSET /;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET /;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB /;"	d
GL_MIN_SAMPLE_SHADING_VALUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_SAMPLE_SHADING_VALUE /;"	d
GL_MIN_SAMPLE_SHADING_VALUE_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_SAMPLE_SHADING_VALUE_ARB /;"	d
GL_MIPMAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIPMAP /;"	d
GL_MIRRORED_REPEAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIRRORED_REPEAT /;"	d
GL_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MULTISAMPLE /;"	d
GL_NAMED_STRING_LENGTH_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAMED_STRING_LENGTH_ARB /;"	d
GL_NAMED_STRING_TYPE_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAMED_STRING_TYPE_ARB /;"	d
GL_NAME_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAME_LENGTH /;"	d
GL_NAND	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAND /;"	d
GL_NEAREST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEAREST /;"	d
GL_NEAREST_MIPMAP_LINEAR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEAREST_MIPMAP_LINEAR /;"	d
GL_NEAREST_MIPMAP_NEAREST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEAREST_MIPMAP_NEAREST /;"	d
GL_NEVER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEVER /;"	d
GL_NICEST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NICEST /;"	d
GL_NONE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NONE /;"	d
GL_NOOP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NOOP /;"	d
GL_NOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NOR /;"	d
GL_NOTEQUAL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NOTEQUAL /;"	d
GL_NO_ERROR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NO_ERROR /;"	d
GL_NO_RESET_NOTIFICATION_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NO_RESET_NOTIFICATION_ARB /;"	d
GL_NUM_ACTIVE_VARIABLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_ACTIVE_VARIABLES /;"	d
GL_NUM_COMPATIBLE_SUBROUTINES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_COMPATIBLE_SUBROUTINES /;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_COMPRESSED_TEXTURE_FORMATS /;"	d
GL_NUM_EXTENSIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_EXTENSIONS /;"	d
GL_NUM_PROGRAM_BINARY_FORMATS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_PROGRAM_BINARY_FORMATS /;"	d
GL_NUM_SAMPLE_COUNTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_SAMPLE_COUNTS /;"	d
GL_NUM_SHADER_BINARY_FORMATS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_SHADER_BINARY_FORMATS /;"	d
GL_NUM_SHADING_LANGUAGE_VERSIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_SHADING_LANGUAGE_VERSIONS /;"	d
GL_OBJECT_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OBJECT_TYPE /;"	d
GL_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OFFSET /;"	d
GL_ONE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE /;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_CONSTANT_ALPHA /;"	d
GL_ONE_MINUS_CONSTANT_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_CONSTANT_COLOR /;"	d
GL_ONE_MINUS_DST_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_DST_ALPHA /;"	d
GL_ONE_MINUS_DST_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_DST_COLOR /;"	d
GL_ONE_MINUS_SRC1_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC1_ALPHA /;"	d
GL_ONE_MINUS_SRC1_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC1_COLOR /;"	d
GL_ONE_MINUS_SRC_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d
GL_ONE_MINUS_SRC_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC_COLOR /;"	d
GL_OR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OR /;"	d
GL_OR_INVERTED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OR_INVERTED /;"	d
GL_OR_REVERSE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OR_REVERSE /;"	d
GL_OUT_OF_MEMORY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OUT_OF_MEMORY /;"	d
GL_PACK_ALIGNMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_ALIGNMENT /;"	d
GL_PACK_COMPRESSED_BLOCK_DEPTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_DEPTH /;"	d
GL_PACK_COMPRESSED_BLOCK_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_HEIGHT /;"	d
GL_PACK_COMPRESSED_BLOCK_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_SIZE /;"	d
GL_PACK_COMPRESSED_BLOCK_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_WIDTH /;"	d
GL_PACK_IMAGE_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_IMAGE_HEIGHT /;"	d
GL_PACK_LSB_FIRST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_LSB_FIRST /;"	d
GL_PACK_ROW_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_ROW_LENGTH /;"	d
GL_PACK_SKIP_IMAGES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SKIP_IMAGES /;"	d
GL_PACK_SKIP_PIXELS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SKIP_PIXELS /;"	d
GL_PACK_SKIP_ROWS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SKIP_ROWS /;"	d
GL_PACK_SWAP_BYTES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SWAP_BYTES /;"	d
GL_PATCHES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCHES /;"	d
GL_PATCH_DEFAULT_INNER_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCH_DEFAULT_INNER_LEVEL /;"	d
GL_PATCH_DEFAULT_OUTER_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCH_DEFAULT_OUTER_LEVEL /;"	d
GL_PATCH_VERTICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCH_VERTICES /;"	d
GL_PIXEL_BUFFER_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_BUFFER_BARRIER_BIT /;"	d
GL_PIXEL_PACK_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_PACK_BUFFER /;"	d
GL_PIXEL_PACK_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_PACK_BUFFER_BINDING /;"	d
GL_PIXEL_UNPACK_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_UNPACK_BUFFER /;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_UNPACK_BUFFER_BINDING /;"	d
GL_POINT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT /;"	d
GL_POINTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINTS /;"	d
GL_POINT_FADE_THRESHOLD_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_FADE_THRESHOLD_SIZE /;"	d
GL_POINT_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SIZE /;"	d
GL_POINT_SIZE_GRANULARITY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SIZE_GRANULARITY /;"	d
GL_POINT_SIZE_RANGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SIZE_RANGE /;"	d
GL_POINT_SPRITE_COORD_ORIGIN	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SPRITE_COORD_ORIGIN /;"	d
GL_POLYGON_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_MODE /;"	d
GL_POLYGON_OFFSET_FACTOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_FACTOR /;"	d
GL_POLYGON_OFFSET_FILL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_FILL /;"	d
GL_POLYGON_OFFSET_LINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_LINE /;"	d
GL_POLYGON_OFFSET_POINT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_POINT /;"	d
GL_POLYGON_OFFSET_UNITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_UNITS /;"	d
GL_POLYGON_SMOOTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_SMOOTH /;"	d
GL_POLYGON_SMOOTH_HINT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_SMOOTH_HINT /;"	d
GL_PRIMITIVES_GENERATED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVES_GENERATED /;"	d
GL_PRIMITIVE_RESTART	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVE_RESTART /;"	d
GL_PRIMITIVE_RESTART_FIXED_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVE_RESTART_FIXED_INDEX /;"	d
GL_PRIMITIVE_RESTART_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVE_RESTART_INDEX /;"	d
GL_PROGRAM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM /;"	d
GL_PROGRAM_BINARY_FORMATS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_BINARY_FORMATS /;"	d
GL_PROGRAM_BINARY_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_BINARY_LENGTH /;"	d
GL_PROGRAM_BINARY_RETRIEVABLE_HINT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT /;"	d
GL_PROGRAM_INPUT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_INPUT /;"	d
GL_PROGRAM_OUTPUT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_OUTPUT /;"	d
GL_PROGRAM_PIPELINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_PIPELINE /;"	d
GL_PROGRAM_PIPELINE_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_PIPELINE_BINDING /;"	d
GL_PROGRAM_POINT_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_POINT_SIZE /;"	d
GL_PROGRAM_SEPARABLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_SEPARABLE /;"	d
GL_PROVOKING_VERTEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROVOKING_VERTEX /;"	d
GL_PROXY_TEXTURE_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_1D /;"	d
GL_PROXY_TEXTURE_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_1D_ARRAY /;"	d
GL_PROXY_TEXTURE_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D /;"	d
GL_PROXY_TEXTURE_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D_ARRAY /;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D_MULTISAMPLE /;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY /;"	d
GL_PROXY_TEXTURE_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_3D /;"	d
GL_PROXY_TEXTURE_CUBE_MAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_CUBE_MAP /;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY /;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB /;"	d
GL_PROXY_TEXTURE_RECTANGLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_RECTANGLE /;"	d
GL_QUADS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUADS /;"	d
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION /;"	d
GL_QUERY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY /;"	d
GL_QUERY_BY_REGION_NO_WAIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_BY_REGION_NO_WAIT /;"	d
GL_QUERY_BY_REGION_WAIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_BY_REGION_WAIT /;"	d
GL_QUERY_COUNTER_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_COUNTER_BITS /;"	d
GL_QUERY_NO_WAIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_NO_WAIT /;"	d
GL_QUERY_RESULT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_RESULT /;"	d
GL_QUERY_RESULT_AVAILABLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_RESULT_AVAILABLE /;"	d
GL_QUERY_WAIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_WAIT /;"	d
GL_R11F_G11F_B10F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R11F_G11F_B10F /;"	d
GL_R16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16 /;"	d
GL_R16F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16F /;"	d
GL_R16I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16I /;"	d
GL_R16UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16UI /;"	d
GL_R16_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16_SNORM /;"	d
GL_R32F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R32F /;"	d
GL_R32I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R32I /;"	d
GL_R32UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R32UI /;"	d
GL_R3_G3_B2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R3_G3_B2 /;"	d
GL_R8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8 /;"	d
GL_R8I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8I /;"	d
GL_R8UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8UI /;"	d
GL_R8_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8_SNORM /;"	d
GL_RASTERIZER_DISCARD	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RASTERIZER_DISCARD /;"	d
GL_READ_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_BUFFER /;"	d
GL_READ_FRAMEBUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_FRAMEBUFFER /;"	d
GL_READ_FRAMEBUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_FRAMEBUFFER_BINDING /;"	d
GL_READ_ONLY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_ONLY /;"	d
GL_READ_PIXELS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_PIXELS /;"	d
GL_READ_PIXELS_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_PIXELS_FORMAT /;"	d
GL_READ_PIXELS_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_PIXELS_TYPE /;"	d
GL_READ_WRITE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_WRITE /;"	d
GL_RED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RED /;"	d
GL_RED_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RED_INTEGER /;"	d
GL_RED_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RED_SNORM /;"	d
GL_REFERENCED_BY_COMPUTE_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_COMPUTE_SHADER /;"	d
GL_REFERENCED_BY_FRAGMENT_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_FRAGMENT_SHADER /;"	d
GL_REFERENCED_BY_GEOMETRY_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_GEOMETRY_SHADER /;"	d
GL_REFERENCED_BY_TESS_CONTROL_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_TESS_CONTROL_SHADER /;"	d
GL_REFERENCED_BY_TESS_EVALUATION_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER /;"	d
GL_REFERENCED_BY_VERTEX_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_VERTEX_SHADER /;"	d
GL_RENDERBUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER /;"	d
GL_RENDERBUFFER_ALPHA_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_ALPHA_SIZE /;"	d
GL_RENDERBUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_BINDING /;"	d
GL_RENDERBUFFER_BLUE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_BLUE_SIZE /;"	d
GL_RENDERBUFFER_DEPTH_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_DEPTH_SIZE /;"	d
GL_RENDERBUFFER_GREEN_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_GREEN_SIZE /;"	d
GL_RENDERBUFFER_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_HEIGHT /;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_INTERNAL_FORMAT /;"	d
GL_RENDERBUFFER_RED_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_RED_SIZE /;"	d
GL_RENDERBUFFER_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_SAMPLES /;"	d
GL_RENDERBUFFER_STENCIL_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_STENCIL_SIZE /;"	d
GL_RENDERBUFFER_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_WIDTH /;"	d
GL_RENDERER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERER /;"	d
GL_REPEAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REPEAT /;"	d
GL_REPLACE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REPLACE /;"	d
GL_RESET_NOTIFICATION_STRATEGY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RESET_NOTIFICATION_STRATEGY_ARB /;"	d
GL_RG	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG /;"	d
GL_RG16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16 /;"	d
GL_RG16F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16F /;"	d
GL_RG16I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16I /;"	d
GL_RG16UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16UI /;"	d
GL_RG16_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16_SNORM /;"	d
GL_RG32F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG32F /;"	d
GL_RG32I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG32I /;"	d
GL_RG32UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG32UI /;"	d
GL_RG8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8 /;"	d
GL_RG8I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8I /;"	d
GL_RG8UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8UI /;"	d
GL_RG8_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8_SNORM /;"	d
GL_RGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB /;"	d
GL_RGB10	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB10 /;"	d
GL_RGB10_A2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB10_A2 /;"	d
GL_RGB10_A2UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB10_A2UI /;"	d
GL_RGB12	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB12 /;"	d
GL_RGB16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16 /;"	d
GL_RGB16F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16F /;"	d
GL_RGB16I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16I /;"	d
GL_RGB16UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16UI /;"	d
GL_RGB16_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16_SNORM /;"	d
GL_RGB32F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB32F /;"	d
GL_RGB32I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB32I /;"	d
GL_RGB32UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB32UI /;"	d
GL_RGB4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB4 /;"	d
GL_RGB5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB5 /;"	d
GL_RGB565	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB565 /;"	d
GL_RGB5_A1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB5_A1 /;"	d
GL_RGB8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8 /;"	d
GL_RGB8I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8I /;"	d
GL_RGB8UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8UI /;"	d
GL_RGB8_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8_SNORM /;"	d
GL_RGB9_E5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB9_E5 /;"	d
GL_RGBA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA /;"	d
GL_RGBA12	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA12 /;"	d
GL_RGBA16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16 /;"	d
GL_RGBA16F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16F /;"	d
GL_RGBA16I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16I /;"	d
GL_RGBA16UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16UI /;"	d
GL_RGBA16_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16_SNORM /;"	d
GL_RGBA2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA2 /;"	d
GL_RGBA32F	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA32F /;"	d
GL_RGBA32I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA32I /;"	d
GL_RGBA32UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA32UI /;"	d
GL_RGBA4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA4 /;"	d
GL_RGBA8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8 /;"	d
GL_RGBA8I	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8I /;"	d
GL_RGBA8UI	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8UI /;"	d
GL_RGBA8_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8_SNORM /;"	d
GL_RGBA_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA_INTEGER /;"	d
GL_RGBA_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA_SNORM /;"	d
GL_RGB_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB_INTEGER /;"	d
GL_RGB_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB_SNORM /;"	d
GL_RG_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG_INTEGER /;"	d
GL_RG_SNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG_SNORM /;"	d
GL_RIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RIGHT /;"	d
GL_SAMPLER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER /;"	d
GL_SAMPLER_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D /;"	d
GL_SAMPLER_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D_ARRAY /;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D_ARRAY_SHADOW /;"	d
GL_SAMPLER_1D_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D_SHADOW /;"	d
GL_SAMPLER_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D /;"	d
GL_SAMPLER_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_ARRAY /;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_ARRAY_SHADOW /;"	d
GL_SAMPLER_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_MULTISAMPLE /;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_SAMPLER_2D_RECT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_RECT /;"	d
GL_SAMPLER_2D_RECT_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_RECT_SHADOW /;"	d
GL_SAMPLER_2D_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_SHADOW /;"	d
GL_SAMPLER_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_3D /;"	d
GL_SAMPLER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_BINDING /;"	d
GL_SAMPLER_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_BUFFER /;"	d
GL_SAMPLER_CUBE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB /;"	d
GL_SAMPLER_CUBE_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_SHADOW /;"	d
GL_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLES /;"	d
GL_SAMPLES_PASSED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLES_PASSED /;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_ALPHA_TO_COVERAGE /;"	d
GL_SAMPLE_ALPHA_TO_ONE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_ALPHA_TO_ONE /;"	d
GL_SAMPLE_BUFFERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_BUFFERS /;"	d
GL_SAMPLE_COVERAGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_COVERAGE /;"	d
GL_SAMPLE_COVERAGE_INVERT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_COVERAGE_INVERT /;"	d
GL_SAMPLE_COVERAGE_VALUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_COVERAGE_VALUE /;"	d
GL_SAMPLE_MASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_MASK /;"	d
GL_SAMPLE_MASK_VALUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_MASK_VALUE /;"	d
GL_SAMPLE_POSITION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_POSITION /;"	d
GL_SAMPLE_SHADING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_SHADING /;"	d
GL_SAMPLE_SHADING_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_SHADING_ARB /;"	d
GL_SCISSOR_BOX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SCISSOR_BOX /;"	d
GL_SCISSOR_TEST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SCISSOR_TEST /;"	d
GL_SEPARATE_ATTRIBS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SEPARATE_ATTRIBS /;"	d
GL_SET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SET /;"	d
GL_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER /;"	d
GL_SHADER_BINARY_FORMATS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_BINARY_FORMATS /;"	d
GL_SHADER_COMPILER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_COMPILER /;"	d
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT /;"	d
GL_SHADER_IMAGE_ATOMIC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_ATOMIC /;"	d
GL_SHADER_IMAGE_LOAD	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_LOAD /;"	d
GL_SHADER_IMAGE_STORE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_STORE /;"	d
GL_SHADER_INCLUDE_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_INCLUDE_ARB /;"	d
GL_SHADER_SOURCE_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_SOURCE_LENGTH /;"	d
GL_SHADER_STORAGE_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BARRIER_BIT /;"	d
GL_SHADER_STORAGE_BLOCK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BLOCK /;"	d
GL_SHADER_STORAGE_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER /;"	d
GL_SHADER_STORAGE_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_BINDING /;"	d
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT /;"	d
GL_SHADER_STORAGE_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_SIZE /;"	d
GL_SHADER_STORAGE_BUFFER_START	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_START /;"	d
GL_SHADER_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_TYPE /;"	d
GL_SHADING_LANGUAGE_VERSION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADING_LANGUAGE_VERSION /;"	d
GL_SHORT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHORT /;"	d
GL_SIGNALED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIGNALED /;"	d
GL_SIGNED_NORMALIZED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIGNED_NORMALIZED /;"	d
GL_SILENCE_DEPRECATION	imgui-master/examples/example_glfw_opengl2/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST /;"	d
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE /;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST /;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE /;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_LINE_WIDTH_GRANULARITY /;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_LINE_WIDTH_RANGE /;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_POINT_SIZE_GRANULARITY /;"	d
GL_SMOOTH_POINT_SIZE_RANGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_POINT_SIZE_RANGE /;"	d
GL_SRC1_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC1_ALPHA /;"	d
GL_SRC1_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC1_COLOR /;"	d
GL_SRC_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC_ALPHA /;"	d
GL_SRC_ALPHA_SATURATE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC_ALPHA_SATURATE /;"	d
GL_SRC_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC_COLOR /;"	d
GL_SRGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB /;"	d
GL_SRGB8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB8 /;"	d
GL_SRGB8_ALPHA8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB8_ALPHA8 /;"	d
GL_SRGB_ALPHA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_ALPHA /;"	d
GL_SRGB_DECODE_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_DECODE_ARB /;"	d
GL_SRGB_READ	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_READ /;"	d
GL_SRGB_WRITE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_WRITE /;"	d
GL_STACK_OVERFLOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STACK_OVERFLOW /;"	d
GL_STACK_UNDERFLOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STACK_UNDERFLOW /;"	d
GL_STATIC_COPY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STATIC_COPY /;"	d
GL_STATIC_DRAW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STATIC_DRAW /;"	d
GL_STATIC_READ	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STATIC_READ /;"	d
GL_STENCIL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL /;"	d
GL_STENCIL_ATTACHMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_ATTACHMENT /;"	d
GL_STENCIL_BACK_FAIL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_FAIL /;"	d
GL_STENCIL_BACK_FUNC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_FUNC /;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_PASS_DEPTH_FAIL /;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_PASS_DEPTH_PASS /;"	d
GL_STENCIL_BACK_REF	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_REF /;"	d
GL_STENCIL_BACK_VALUE_MASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_VALUE_MASK /;"	d
GL_STENCIL_BACK_WRITEMASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_WRITEMASK /;"	d
GL_STENCIL_BUFFER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BUFFER_BIT /;"	d
GL_STENCIL_CLEAR_VALUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_CLEAR_VALUE /;"	d
GL_STENCIL_COMPONENTS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_COMPONENTS /;"	d
GL_STENCIL_FAIL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_FAIL /;"	d
GL_STENCIL_FUNC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_FUNC /;"	d
GL_STENCIL_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX /;"	d
GL_STENCIL_INDEX1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX1 /;"	d
GL_STENCIL_INDEX16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX16 /;"	d
GL_STENCIL_INDEX4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX4 /;"	d
GL_STENCIL_INDEX8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX8 /;"	d
GL_STENCIL_PASS_DEPTH_FAIL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_PASS_DEPTH_FAIL /;"	d
GL_STENCIL_PASS_DEPTH_PASS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_PASS_DEPTH_PASS /;"	d
GL_STENCIL_REF	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_REF /;"	d
GL_STENCIL_RENDERABLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_RENDERABLE /;"	d
GL_STENCIL_TEST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_TEST /;"	d
GL_STENCIL_VALUE_MASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_VALUE_MASK /;"	d
GL_STENCIL_WRITEMASK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_WRITEMASK /;"	d
GL_STEREO	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STEREO /;"	d
GL_STREAM_COPY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STREAM_COPY /;"	d
GL_STREAM_DRAW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STREAM_DRAW /;"	d
GL_STREAM_READ	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STREAM_READ /;"	d
GL_SUBPIXEL_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SUBPIXEL_BITS /;"	d
GL_SYNC_CL_EVENT_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_CL_EVENT_ARB /;"	d
GL_SYNC_CL_EVENT_COMPLETE_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_CL_EVENT_COMPLETE_ARB /;"	d
GL_SYNC_CONDITION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_CONDITION /;"	d
GL_SYNC_FENCE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_FENCE /;"	d
GL_SYNC_FLAGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_FLAGS /;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_FLUSH_COMMANDS_BIT /;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_GPU_COMMANDS_COMPLETE /;"	d
GL_SYNC_STATUS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_STATUS /;"	d
GL_TESS_CONTROL_OUTPUT_VERTICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_OUTPUT_VERTICES /;"	d
GL_TESS_CONTROL_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SHADER /;"	d
GL_TESS_CONTROL_SHADER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SHADER_BIT /;"	d
GL_TESS_CONTROL_SUBROUTINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SUBROUTINE /;"	d
GL_TESS_CONTROL_SUBROUTINE_UNIFORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM /;"	d
GL_TESS_CONTROL_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_TEXTURE /;"	d
GL_TESS_EVALUATION_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SHADER /;"	d
GL_TESS_EVALUATION_SHADER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SHADER_BIT /;"	d
GL_TESS_EVALUATION_SUBROUTINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SUBROUTINE /;"	d
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM /;"	d
GL_TESS_EVALUATION_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_TEXTURE /;"	d
GL_TESS_GEN_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_MODE /;"	d
GL_TESS_GEN_POINT_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_POINT_MODE /;"	d
GL_TESS_GEN_SPACING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_SPACING /;"	d
GL_TESS_GEN_VERTEX_ORDER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_VERTEX_ORDER /;"	d
GL_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE /;"	d
GL_TEXTURE0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE0 /;"	d
GL_TEXTURE1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE1 /;"	d
GL_TEXTURE10	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE10 /;"	d
GL_TEXTURE11	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE11 /;"	d
GL_TEXTURE12	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE12 /;"	d
GL_TEXTURE13	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE13 /;"	d
GL_TEXTURE14	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE14 /;"	d
GL_TEXTURE15	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE15 /;"	d
GL_TEXTURE16	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE16 /;"	d
GL_TEXTURE17	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE17 /;"	d
GL_TEXTURE18	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE18 /;"	d
GL_TEXTURE19	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE19 /;"	d
GL_TEXTURE2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE2 /;"	d
GL_TEXTURE20	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE20 /;"	d
GL_TEXTURE21	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE21 /;"	d
GL_TEXTURE22	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE22 /;"	d
GL_TEXTURE23	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE23 /;"	d
GL_TEXTURE24	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE24 /;"	d
GL_TEXTURE25	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE25 /;"	d
GL_TEXTURE26	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE26 /;"	d
GL_TEXTURE27	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE27 /;"	d
GL_TEXTURE28	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE28 /;"	d
GL_TEXTURE29	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE29 /;"	d
GL_TEXTURE3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE3 /;"	d
GL_TEXTURE30	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE30 /;"	d
GL_TEXTURE31	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE31 /;"	d
GL_TEXTURE4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE4 /;"	d
GL_TEXTURE5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE5 /;"	d
GL_TEXTURE6	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE6 /;"	d
GL_TEXTURE7	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE7 /;"	d
GL_TEXTURE8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE8 /;"	d
GL_TEXTURE9	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE9 /;"	d
GL_TEXTURE_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_1D /;"	d
GL_TEXTURE_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_1D_ARRAY /;"	d
GL_TEXTURE_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D /;"	d
GL_TEXTURE_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D_ARRAY /;"	d
GL_TEXTURE_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D_MULTISAMPLE /;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY /;"	d
GL_TEXTURE_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_3D /;"	d
GL_TEXTURE_ALPHA_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_ALPHA_SIZE /;"	d
GL_TEXTURE_ALPHA_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_ALPHA_TYPE /;"	d
GL_TEXTURE_BASE_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BASE_LEVEL /;"	d
GL_TEXTURE_BINDING_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_1D /;"	d
GL_TEXTURE_BINDING_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_1D_ARRAY /;"	d
GL_TEXTURE_BINDING_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D /;"	d
GL_TEXTURE_BINDING_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D_ARRAY /;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D_MULTISAMPLE /;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY /;"	d
GL_TEXTURE_BINDING_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_3D /;"	d
GL_TEXTURE_BINDING_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_BUFFER /;"	d
GL_TEXTURE_BINDING_CUBE_MAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_CUBE_MAP /;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY /;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB /;"	d
GL_TEXTURE_BINDING_RECTANGLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_RECTANGLE /;"	d
GL_TEXTURE_BLUE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BLUE_SIZE /;"	d
GL_TEXTURE_BLUE_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BLUE_TYPE /;"	d
GL_TEXTURE_BORDER_COLOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BORDER_COLOR /;"	d
GL_TEXTURE_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER /;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING /;"	d
GL_TEXTURE_BUFFER_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_OFFSET /;"	d
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT /;"	d
GL_TEXTURE_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_SIZE /;"	d
GL_TEXTURE_COMPARE_FUNC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPARE_FUNC /;"	d
GL_TEXTURE_COMPARE_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPARE_MODE /;"	d
GL_TEXTURE_COMPRESSED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED /;"	d
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT /;"	d
GL_TEXTURE_COMPRESSED_BLOCK_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE /;"	d
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH /;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE /;"	d
GL_TEXTURE_COMPRESSION_HINT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSION_HINT /;"	d
GL_TEXTURE_CUBE_MAP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP /;"	d
GL_TEXTURE_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_ARRAY /;"	d
GL_TEXTURE_CUBE_MAP_ARRAY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_X /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z /;"	d
GL_TEXTURE_CUBE_MAP_SEAMLESS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_SEAMLESS /;"	d
GL_TEXTURE_DEPTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_DEPTH /;"	d
GL_TEXTURE_DEPTH_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_DEPTH_SIZE /;"	d
GL_TEXTURE_DEPTH_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_DEPTH_TYPE /;"	d
GL_TEXTURE_FETCH_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_FETCH_BARRIER_BIT /;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS /;"	d
GL_TEXTURE_GATHER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GATHER /;"	d
GL_TEXTURE_GATHER_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GATHER_SHADOW /;"	d
GL_TEXTURE_GREEN_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GREEN_SIZE /;"	d
GL_TEXTURE_GREEN_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GREEN_TYPE /;"	d
GL_TEXTURE_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_HEIGHT /;"	d
GL_TEXTURE_IMAGE_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMAGE_FORMAT /;"	d
GL_TEXTURE_IMAGE_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMAGE_TYPE /;"	d
GL_TEXTURE_IMMUTABLE_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMMUTABLE_FORMAT /;"	d
GL_TEXTURE_IMMUTABLE_LEVELS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMMUTABLE_LEVELS /;"	d
GL_TEXTURE_INTERNAL_FORMAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_INTERNAL_FORMAT /;"	d
GL_TEXTURE_LOD_BIAS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_LOD_BIAS /;"	d
GL_TEXTURE_MAG_FILTER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d
GL_TEXTURE_MAX_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MAX_LEVEL /;"	d
GL_TEXTURE_MAX_LOD	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MAX_LOD /;"	d
GL_TEXTURE_MIN_FILTER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d
GL_TEXTURE_MIN_LOD	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MIN_LOD /;"	d
GL_TEXTURE_RECTANGLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_RECTANGLE /;"	d
GL_TEXTURE_RED_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_RED_SIZE /;"	d
GL_TEXTURE_RED_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_RED_TYPE /;"	d
GL_TEXTURE_SAMPLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SAMPLES /;"	d
GL_TEXTURE_SHADOW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SHADOW /;"	d
GL_TEXTURE_SHARED_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SHARED_SIZE /;"	d
GL_TEXTURE_STENCIL_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_STENCIL_SIZE /;"	d
GL_TEXTURE_SWIZZLE_A	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_A /;"	d
GL_TEXTURE_SWIZZLE_B	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_B /;"	d
GL_TEXTURE_SWIZZLE_G	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_G /;"	d
GL_TEXTURE_SWIZZLE_R	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_R /;"	d
GL_TEXTURE_SWIZZLE_RGBA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_RGBA /;"	d
GL_TEXTURE_UPDATE_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_UPDATE_BARRIER_BIT /;"	d
GL_TEXTURE_VIEW	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW /;"	d
GL_TEXTURE_VIEW_MIN_LAYER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_MIN_LAYER /;"	d
GL_TEXTURE_VIEW_MIN_LEVEL	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_MIN_LEVEL /;"	d
GL_TEXTURE_VIEW_NUM_LAYERS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_NUM_LAYERS /;"	d
GL_TEXTURE_VIEW_NUM_LEVELS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_NUM_LEVELS /;"	d
GL_TEXTURE_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WIDTH /;"	d
GL_TEXTURE_WRAP_R	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WRAP_R /;"	d
GL_TEXTURE_WRAP_S	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WRAP_S /;"	d
GL_TEXTURE_WRAP_T	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WRAP_T /;"	d
GL_TIMEOUT_EXPIRED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIMEOUT_EXPIRED /;"	d
GL_TIMEOUT_IGNORED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIMEOUT_IGNORED /;"	d
GL_TIMESTAMP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIMESTAMP /;"	d
GL_TIME_ELAPSED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIME_ELAPSED /;"	d
GL_TOP_LEVEL_ARRAY_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TOP_LEVEL_ARRAY_SIZE /;"	d
GL_TOP_LEVEL_ARRAY_STRIDE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TOP_LEVEL_ARRAY_STRIDE /;"	d
GL_TRANSFORM_FEEDBACK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK /;"	d
GL_TRANSFORM_FEEDBACK_ACTIVE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_ACTIVE /;"	d
GL_TRANSFORM_FEEDBACK_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT /;"	d
GL_TRANSFORM_FEEDBACK_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BINDING /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_START /;"	d
GL_TRANSFORM_FEEDBACK_PAUSED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_PAUSED /;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN /;"	d
GL_TRANSFORM_FEEDBACK_VARYING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_VARYING /;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_VARYINGS /;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH /;"	d
GL_TRIANGLES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLES /;"	d
GL_TRIANGLES_ADJACENCY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLES_ADJACENCY /;"	d
GL_TRIANGLE_FAN	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLE_FAN /;"	d
GL_TRIANGLE_STRIP	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLE_STRIP /;"	d
GL_TRIANGLE_STRIP_ADJACENCY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLE_STRIP_ADJACENCY /;"	d
GL_TRUE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRUE /;"	d
GL_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TYPE /;"	d
GL_UNDEFINED_VERTEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNDEFINED_VERTEX /;"	d
GL_UNIFORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM /;"	d
GL_UNIFORM_ARRAY_STRIDE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_ARRAY_STRIDE /;"	d
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX /;"	d
GL_UNIFORM_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BARRIER_BIT /;"	d
GL_UNIFORM_BLOCK	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK /;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS /;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES /;"	d
GL_UNIFORM_BLOCK_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_BINDING /;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_DATA_SIZE /;"	d
GL_UNIFORM_BLOCK_INDEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_INDEX /;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_NAME_LENGTH /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER /;"	d
GL_UNIFORM_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER /;"	d
GL_UNIFORM_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_BINDING /;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT /;"	d
GL_UNIFORM_BUFFER_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_SIZE /;"	d
GL_UNIFORM_BUFFER_START	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_START /;"	d
GL_UNIFORM_IS_ROW_MAJOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_IS_ROW_MAJOR /;"	d
GL_UNIFORM_MATRIX_STRIDE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_MATRIX_STRIDE /;"	d
GL_UNIFORM_NAME_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_NAME_LENGTH /;"	d
GL_UNIFORM_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_OFFSET /;"	d
GL_UNIFORM_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_SIZE /;"	d
GL_UNIFORM_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_TYPE /;"	d
GL_UNKNOWN_CONTEXT_RESET_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNKNOWN_CONTEXT_RESET_ARB /;"	d
GL_UNPACK_ALIGNMENT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_ALIGNMENT /;"	d
GL_UNPACK_COMPRESSED_BLOCK_DEPTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH /;"	d
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT /;"	d
GL_UNPACK_COMPRESSED_BLOCK_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_SIZE /;"	d
GL_UNPACK_COMPRESSED_BLOCK_WIDTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH /;"	d
GL_UNPACK_IMAGE_HEIGHT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_IMAGE_HEIGHT /;"	d
GL_UNPACK_LSB_FIRST	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_LSB_FIRST /;"	d
GL_UNPACK_ROW_LENGTH	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_ROW_LENGTH /;"	d
GL_UNPACK_SKIP_IMAGES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SKIP_IMAGES /;"	d
GL_UNPACK_SKIP_PIXELS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SKIP_PIXELS /;"	d
GL_UNPACK_SKIP_ROWS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SKIP_ROWS /;"	d
GL_UNPACK_SWAP_BYTES	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SWAP_BYTES /;"	d
GL_UNSIGNALED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNALED /;"	d
GL_UNSIGNED_BYTE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_BYTE /;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_BYTE_2_3_3_REV /;"	d
GL_UNSIGNED_BYTE_3_3_2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_BYTE_3_3_2 /;"	d
GL_UNSIGNED_INT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT /;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_10F_11F_11F_REV /;"	d
GL_UNSIGNED_INT_10_10_10_2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_10_10_10_2 /;"	d
GL_UNSIGNED_INT_24_8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_24_8 /;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_2_10_10_10_REV /;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_5_9_9_9_REV /;"	d
GL_UNSIGNED_INT_8_8_8_8	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_8_8_8_8 /;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_8_8_8_8_REV /;"	d
GL_UNSIGNED_INT_ATOMIC_COUNTER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_ATOMIC_COUNTER /;"	d
GL_UNSIGNED_INT_IMAGE_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_1D /;"	d
GL_UNSIGNED_INT_IMAGE_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY /;"	d
GL_UNSIGNED_INT_IMAGE_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D /;"	d
GL_UNSIGNED_INT_IMAGE_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY /;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE /;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY /;"	d
GL_UNSIGNED_INT_IMAGE_2D_RECT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_RECT /;"	d
GL_UNSIGNED_INT_IMAGE_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_3D /;"	d
GL_UNSIGNED_INT_IMAGE_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_BUFFER /;"	d
GL_UNSIGNED_INT_IMAGE_CUBE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_CUBE /;"	d
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_1D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_1D /;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_RECT /;"	d
GL_UNSIGNED_INT_SAMPLER_3D	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_3D /;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_BUFFER /;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_CUBE /;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB /;"	d
GL_UNSIGNED_INT_VEC2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_VEC2 /;"	d
GL_UNSIGNED_INT_VEC3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_VEC3 /;"	d
GL_UNSIGNED_INT_VEC4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_VEC4 /;"	d
GL_UNSIGNED_NORMALIZED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_NORMALIZED /;"	d
GL_UNSIGNED_SHORT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT /;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_1_5_5_5_REV /;"	d
GL_UNSIGNED_SHORT_4_4_4_4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_4_4_4_4 /;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_4_4_4_4_REV /;"	d
GL_UNSIGNED_SHORT_5_5_5_1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_5_5_5_1 /;"	d
GL_UNSIGNED_SHORT_5_6_5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_5_6_5 /;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_5_6_5_REV /;"	d
GL_UPPER_LEFT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UPPER_LEFT /;"	d
GL_VALIDATE_STATUS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VALIDATE_STATUS /;"	d
GL_VENDOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VENDOR /;"	d
GL_VERSION	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION /;"	d
GL_VERSION_1_0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_0 /;"	d
GL_VERSION_1_1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_1 /;"	d
GL_VERSION_1_2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_2 /;"	d
GL_VERSION_1_3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_3 /;"	d
GL_VERSION_1_4	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_4 /;"	d
GL_VERSION_1_5	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_5 /;"	d
GL_VERSION_2_0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_2_0 /;"	d
GL_VERSION_2_1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_2_1 /;"	d
GL_VERSION_3_0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_0 /;"	d
GL_VERSION_3_1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_1 /;"	d
GL_VERSION_3_2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_2 /;"	d
GL_VERSION_3_3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_3 /;"	d
GL_VERSION_4_0	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_0 /;"	d
GL_VERSION_4_1	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_1 /;"	d
GL_VERSION_4_2	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_2 /;"	d
GL_VERSION_4_3	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_3 /;"	d
GL_VERTEX_ARRAY_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ARRAY_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT /;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR /;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_INTEGER /;"	d
GL_VERTEX_ATTRIB_ARRAY_LONG	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_LONG /;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GL_VERTEX_ATTRIB_BINDING	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_BINDING /;"	d
GL_VERTEX_ATTRIB_RELATIVE_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET /;"	d
GL_VERTEX_BINDING_DIVISOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_BINDING_DIVISOR /;"	d
GL_VERTEX_BINDING_OFFSET	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_BINDING_OFFSET /;"	d
GL_VERTEX_BINDING_STRIDE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_BINDING_STRIDE /;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_PROGRAM_POINT_SIZE /;"	d
GL_VERTEX_SHADER	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SHADER /;"	d
GL_VERTEX_SHADER_BIT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SHADER_BIT /;"	d
GL_VERTEX_SUBROUTINE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SUBROUTINE /;"	d
GL_VERTEX_SUBROUTINE_UNIFORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SUBROUTINE_UNIFORM /;"	d
GL_VERTEX_TEXTURE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_TEXTURE /;"	d
GL_VIEWPORT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT /;"	d
GL_VIEWPORT_BOUNDS_RANGE	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT_BOUNDS_RANGE /;"	d
GL_VIEWPORT_INDEX_PROVOKING_VERTEX	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX /;"	d
GL_VIEWPORT_SUBPIXEL_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT_SUBPIXEL_BITS /;"	d
GL_VIEW_CLASS_128_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_128_BITS /;"	d
GL_VIEW_CLASS_16_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_16_BITS /;"	d
GL_VIEW_CLASS_24_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_24_BITS /;"	d
GL_VIEW_CLASS_32_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_32_BITS /;"	d
GL_VIEW_CLASS_48_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_48_BITS /;"	d
GL_VIEW_CLASS_64_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_64_BITS /;"	d
GL_VIEW_CLASS_8_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_8_BITS /;"	d
GL_VIEW_CLASS_96_BITS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_96_BITS /;"	d
GL_VIEW_CLASS_BPTC_FLOAT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_BPTC_FLOAT /;"	d
GL_VIEW_CLASS_BPTC_UNORM	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_BPTC_UNORM /;"	d
GL_VIEW_CLASS_RGTC1_RED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_RGTC1_RED /;"	d
GL_VIEW_CLASS_RGTC2_RG	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_RGTC2_RG /;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT1_RGB /;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGBA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT1_RGBA /;"	d
GL_VIEW_CLASS_S3TC_DXT3_RGBA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT3_RGBA /;"	d
GL_VIEW_CLASS_S3TC_DXT5_RGBA	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT5_RGBA /;"	d
GL_VIEW_COMPATIBILITY_CLASS	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_COMPATIBILITY_CLASS /;"	d
GL_WAIT_FAILED	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_WAIT_FAILED /;"	d
GL_WRITE_ONLY	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_WRITE_ONLY /;"	d
GL_XOR	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_XOR /;"	d
GL_ZERO	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ZERO /;"	d
GLbitfield	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef signed char GLbyte;$/;"	t
GLchar	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef char GLchar;$/;"	t
GLcharARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef char GLcharARB;$/;"	t
GLclampd	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef double GLclampd;$/;"	t
GLclampf	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef float GLclampf;$/;"	t
GLdouble	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef double GLdouble;$/;"	t
GLenum	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLenum;$/;"	t
GLfloat	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef float GLfloat;$/;"	t
GLhalf	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLhalf;$/;"	t
GLhalfARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLhalfARB;$/;"	t
GLhalfNV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLhalfNV;$/;"	t
GLhandleARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLhandleARB;$/;"	t
GLint	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef int GLint;$/;"	t
GLint64	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef int64_t GLint64;$/;"	t
GLint64EXT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef int64_t GLint64EXT;$/;"	t
GLintptr	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLintptr;$/;"	t
GLintptrARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLintptrARB;$/;"	t
GLshort	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef short GLshort;$/;"	t
GLsizei	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef int GLsizei;$/;"	t
GLsizeiptr	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLsizeiptr;$/;"	t
GLsizeiptrARB	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLsizeiptrARB;$/;"	t
GLsync	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLubyte	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned char GLubyte;$/;"	t
GLuint	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLuint;$/;"	t
GLuint64	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef uint64_t GLuint64;$/;"	t
GLuint64EXT	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef uint64_t GLuint64EXT;$/;"	t
GLushort	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLushort;$/;"	t
GLvdpauSurfaceNV	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLintptr GLvdpauSurfaceNV;$/;"	t
GLvoid	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void GLvoid;$/;"	t
GStyleVarInfo	imgui-master/imgui.cpp	/^static const ImGuiStyleVarInfo GStyleVarInfo[] =$/;"	v	file:
GetActiveID	imgui-master/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui
GetBL	imgui-master/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Bottom-left$/;"	f	struct:ImRect
GetBR	imgui-master/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Bottom-right$/;"	f	struct:ImRect
GetBit	imgui-master/imgui.h	/^        bool           GetBit(int n) const  { return (UsedChars[n >> 3] & (1 << (n & 7))) != 0; }$/;"	f	struct:ImFontAtlas::GlyphRangesBuilder
GetBool	imgui-master/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage
GetBoolRef	imgui-master/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage
GetByIndex	imgui-master/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Data[n]; }$/;"	f	struct:ImPool
GetByKey	imgui-master/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx != -1) ? &Data[idx] : NULL; }$/;"	f	struct:ImPool
GetCenter	imgui-master/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min.y + Max.y) * 0.5f); }$/;"	f	struct:ImRect
GetCharAdvance	imgui-master/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }$/;"	f	struct:ImFont
GetClipRectMax	imgui-master/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }$/;"	f	struct:ImDrawList
GetClipRectMin	imgui-master/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }$/;"	f	struct:ImDrawList
GetClipboardText	imgui-master/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui
GetClipboardTextFn	imgui-master/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO
GetClipboardTextFn_DefaultImpl	imgui-master/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void*)$/;"	f	file:
GetColorU32	imgui-master/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui
GetColorU32	imgui-master/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui
GetColorU32	imgui-master/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui
GetColumnIndex	imgui-master/imgui.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui
GetColumnOffset	imgui-master/imgui.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui
GetColumnWidth	imgui-master/imgui.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui
GetColumnWidthEx	imgui-master/imgui.cpp	/^static float GetColumnWidthEx(ImGuiColumnsSet* columns, int column_index, bool before_resize = false)$/;"	f	file:
GetColumnsCount	imgui-master/imgui.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui
GetColumnsRectHalfWidth	imgui-master/imgui.cpp	/^static inline float GetColumnsRectHalfWidth() { return 4.0f; }$/;"	f	file:
GetContentRegionAvail	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui
GetContentRegionAvailWidth	imgui-master/imgui.cpp	/^float ImGui::GetContentRegionAvailWidth()$/;"	f	class:ImGui
GetContentRegionMax	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui
GetCurrentClipRect	imgui-master/imgui_draw.cpp	/^#define GetCurrentClipRect(/;"	d	file:
GetCurrentClipRect	imgui-master/imgui_draw.cpp	/^#undef GetCurrentClipRect$/;"	d	file:
GetCurrentContext	imgui-master/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui
GetCurrentTextureId	imgui-master/imgui_draw.cpp	/^#define GetCurrentTextureId(/;"	d	file:
GetCurrentTextureId	imgui-master/imgui_draw.cpp	/^#undef GetCurrentTextureId$/;"	d	file:
GetCurrentWindow	imgui-master/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWindow->WriteAccessed = true; return g.CurrentWindow; }$/;"	f	namespace:ImGui
GetCurrentWindowRead	imgui-master/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.CurrentWindow; }$/;"	f	namespace:ImGui
GetCursorPos	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui
GetCursorPosX	imgui-master/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui
GetCursorPosY	imgui-master/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui
GetCursorScreenPos	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui
GetCursorStartPos	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui
GetCustomRectByIndex	imgui-master/imgui.h	/^    const CustomRect*   GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }$/;"	f	struct:ImFontAtlas
GetDebugName	imgui-master/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }$/;"	f	struct:ImFont
GetDefaultCompressedFontDataTTFBase85	imgui-master/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	file:
GetDefaultFont	imgui-master/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0]; }$/;"	f	namespace:ImGui
GetDragDropPayload	imgui-master/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui
GetDraggedColumnOffset	imgui-master/imgui.cpp	/^static float GetDraggedColumnOffset(ImGuiColumnsSet* columns, int column_index)$/;"	f	file:
GetDrawData	imgui-master/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui
GetDrawListSharedData	imgui-master/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui
GetFallbackWindowNameForWindowingList	imgui-master/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	file:
GetFloat	imgui-master/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage
GetFloatRef	imgui-master/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage
GetFocusID	imgui-master/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui
GetFont	imgui-master/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui
GetFontSize	imgui-master/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui
GetFontTexUvWhitePixel	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui
GetFrameCount	imgui-master/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui
GetFrameHeight	imgui-master/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui
GetFrameHeightWithSpacing	imgui-master/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui
GetFrontMostPopupModal	imgui-master/imgui.cpp	/^ImGuiWindow* ImGui::GetFrontMostPopupModal()$/;"	f	class:ImGui
GetGlyphRangesChineseFull	imgui-master/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas
GetGlyphRangesChineseSimplifiedCommon	imgui-master/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas
GetGlyphRangesCyrillic	imgui-master/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas
GetGlyphRangesDefault	imgui-master/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas
GetGlyphRangesJapanese	imgui-master/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas
GetGlyphRangesKorean	imgui-master/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas
GetGlyphRangesThai	imgui-master/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas
GetHeight	imgui-master/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect
GetHoveredID	imgui-master/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui
GetID	imgui-master/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui
GetID	imgui-master/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui
GetID	imgui-master/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui
GetID	imgui-master/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow
GetID	imgui-master/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow
GetIDFromRectangle	imgui-master/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow
GetIDNoKeepAlive	imgui-master/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow
GetIDNoKeepAlive	imgui-master/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const void* ptr)$/;"	f	class:ImGuiWindow
GetIO	imgui-master/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui
GetIndex	imgui-master/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Data.Data && p < Data.Data + Data.Size); return (ImPoolIdx)(p - Data.Data); }$/;"	f	struct:ImPool
GetInt	imgui-master/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage
GetIntRef	imgui-master/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage
GetItemID	imgui-master/imgui_internal.h	/^    inline ImGuiID          GetItemID()     { ImGuiContext& g = *GImGui; return g.CurrentWindow->DC.LastItemId; }$/;"	f	namespace:ImGui
GetItemRectMax	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui
GetItemRectMin	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui
GetItemRectSize	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui
GetItemsLineHeightWithSpacing	imgui-master/imgui.h	/^    static inline float GetItemsLineHeightWithSpacing()       { return GetFrameHeightWithSpacing(); }$/;"	f	namespace:ImGui
GetKeyIndex	imgui-master/imgui.cpp	/^int ImGui::GetKeyIndex(ImGuiKey imgui_key)$/;"	f	class:ImGui
GetKeyPressedAmount	imgui-master/imgui.cpp	/^int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui
GetMinimumStepAtDecimalPrecision	imgui-master/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	file:
GetMouseCursor	imgui-master/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui
GetMouseCursorTexData	imgui-master/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])$/;"	f	class:ImFontAtlas
GetMouseDragDelta	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(int button, float lock_threshold)$/;"	f	class:ImGui
GetMousePos	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui
GetMousePosOnOpeningCurrentPopup	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui
GetNavInputAmount	imgui-master/imgui.cpp	/^float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode)$/;"	f	class:ImGui
GetNavInputAmount2d	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, float slow_factor, float fast_factor)$/;"	f	class:ImGui
GetOrAddByKey	imgui-master/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*p_idx != -1) return &Data[*p_idx]; *p_idx = FreeIdx; return Add(); }$/;"	f	struct:ImPool
GetOverlayDrawList	imgui-master/imgui.cpp	/^ImDrawList* ImGui::GetOverlayDrawList()$/;"	f	class:ImGui
GetOverlayDrawList	imgui-master/imgui.cpp	/^static ImDrawList* GetOverlayDrawList(ImGuiWindow*)$/;"	f	file:
GetResizeBorderRect	imgui-master/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float thickness)$/;"	f	file:
GetScrollMaxX	imgui-master/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui
GetScrollMaxY	imgui-master/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui
GetScrollX	imgui-master/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui
GetScrollY	imgui-master/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui
GetSize	imgui-master/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y); }$/;"	f	struct:ImRect
GetSize	imgui-master/imgui_internal.h	/^    int         GetSize() const                     { return Data.Size; }$/;"	f	struct:ImPool
GetStateStorage	imgui-master/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui
GetStyle	imgui-master/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui
GetStyleColorName	imgui-master/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui
GetStyleColorVec4	imgui-master/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui
GetStyleVarInfo	imgui-master/imgui.cpp	/^static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	file:
GetTL	imgui-master/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-left$/;"	f	struct:ImRect
GetTR	imgui-master/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-right$/;"	f	struct:ImRect
GetTabOrder	imgui-master/imgui_internal.h	/^    int                 GetTabOrder(const ImGuiTabItem* tab) const { return Tabs.index_from_pointer(tab); }$/;"	f	struct:ImGuiTabBar
GetTexDataAsAlpha8	imgui-master/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel)$/;"	f	class:ImFontAtlas
GetTexDataAsRGBA32	imgui-master/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel)$/;"	f	class:ImFontAtlas
GetTextLineHeight	imgui-master/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui
GetTextLineHeightWithSpacing	imgui-master/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui
GetTime	imgui-master/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui
GetTreeNodeToLabelSpacing	imgui-master/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui
GetVarPtr	imgui-master/imgui.cpp	/^    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + Offset); }$/;"	f	struct:ImGuiStyleVarInfo
GetVersion	imgui-master/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui
GetViewportRect	imgui-master/imgui.cpp	/^static ImRect GetViewportRect()$/;"	f	file:
GetVoidPtr	imgui-master/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage
GetVoidPtrRef	imgui-master/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage
GetWidth	imgui-master/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect
GetWindowAllowedExtentRect	imgui-master/imgui.cpp	/^ImRect ImGui::GetWindowAllowedExtentRect(ImGuiWindow*)$/;"	f	class:ImGui
GetWindowBgColorIdxFromFlags	imgui-master/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdxFromFlags(ImGuiWindowFlags flags)$/;"	f	file:
GetWindowContentRegionMax	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui
GetWindowContentRegionMin	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui
GetWindowContentRegionWidth	imgui-master/imgui.cpp	/^float ImGui::GetWindowContentRegionWidth()$/;"	f	class:ImGui
GetWindowDrawList	imgui-master/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui
GetWindowHeight	imgui-master/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui
GetWindowPos	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui
GetWindowScrollMaxX	imgui-master/imgui.cpp	/^float ImGui::GetWindowScrollMaxX(ImGuiWindow* window)$/;"	f	class:ImGui
GetWindowScrollMaxY	imgui-master/imgui.cpp	/^float ImGui::GetWindowScrollMaxY(ImGuiWindow* window)$/;"	f	class:ImGui
GetWindowSize	imgui-master/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui
GetWindowWidth	imgui-master/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui
GlfwClientApi	imgui-master/examples/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	imgui-master/examples/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	imgui-master/examples/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	imgui-master/examples/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan$/;"	e	enum:GlfwClientApi	file:
Glyph	imgui-master/imgui.h	/^    typedef ImFontGlyph Glyph; \/\/ OBSOLETE 1.52+$/;"	t	struct:ImFont
GlyphAdvanceX	imgui-master/imgui.h	/^        float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000): glyph xadvance$/;"	m	struct:ImFontAtlas::CustomRect
GlyphExtraSpacing	imgui-master/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between glyphs. Only X axis is supported for now.$/;"	m	struct:ImFontConfig
GlyphInfo	imgui-master/misc/freetype/imgui_freetype.cpp	/^    struct GlyphInfo $/;"	s	namespace:__anon1	file:
GlyphMaxAdvanceX	imgui-master/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig
GlyphMinAdvanceX	imgui-master/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set Min to align font icons, set both Min\/Max to enforce mono-space font$/;"	m	struct:ImFontConfig
GlyphOffset	imgui-master/imgui.h	/^        ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only (ID<0x10000): glyph display offset$/;"	m	struct:ImFontAtlas::CustomRect
GlyphOffset	imgui-master/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font input.$/;"	m	struct:ImFontConfig
GlyphRanges	imgui-master/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.$/;"	m	struct:ImFontConfig
GlyphRangesBuilder	imgui-master/imgui.h	/^        GlyphRangesBuilder()                { UsedChars.resize(0x10000 \/ 8); memset(UsedChars.Data, 0, 0x10000 \/ 8); }$/;"	f	struct:ImFontAtlas::GlyphRangesBuilder
GlyphRangesBuilder	imgui-master/imgui.h	/^    struct GlyphRangesBuilder$/;"	s	struct:ImFontAtlas
Glyphs	imgui-master/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/              \/\/ All glyphs.$/;"	m	struct:ImFont
GrabMinSize	imgui-master/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\/scrollbar.$/;"	m	struct:ImGuiStyle
GrabRounding	imgui-master/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.$/;"	m	struct:ImGuiStyle
GroupOffset	imgui-master/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData
GroupStack	imgui-master/imgui_internal.h	/^    ImVector<ImGuiGroupData>GroupStack;$/;"	m	struct:ImGuiWindowTempData
GrowIndex	imgui-master/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont
HSV	imgui-master/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }$/;"	f	struct:ImColor
HasCloseButton	imgui-master/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a close button (p_open != NULL)$/;"	m	struct:ImGuiWindow
HasSelection	imgui-master/imgui.h	/^    bool                HasSelection() const { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData
HasSelection	imgui-master/imgui_internal.h	/^    bool                HasSelection() const        { return StbState.select_start != StbState.select_end; }$/;"	f	struct:ImGuiInputTextState
Height	imgui-master/examples/imgui_impl_vulkan.h	/^    int                 Height;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
Height	imgui-master/imgui.h	/^        unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlas::CustomRect
Height	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float Height;		\/\/ Glyph's height in pixels.$/;"	m	struct:__anon1::GlyphInfo	file:
Hidden	imgui-master/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== (HiddenFramesForResize > 0) ||$/;"	m	struct:ImGuiWindow
HiddenFramesForResize	imgui-master/imgui_internal.h	/^    int                     HiddenFramesForResize;              \/\/ Hide the window for N frames while allowing items to be submitted so we can measure their size$/;"	m	struct:ImGuiWindow
HiddenFramesRegular	imgui-master/imgui_internal.h	/^    int                     HiddenFramesRegular;                \/\/ Hide the window for N frames$/;"	m	struct:ImGuiWindow
History	imgui-master/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	file:
HistoryPos	imgui-master/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	file:
HoveredId	imgui-master/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget$/;"	m	struct:ImGuiContext
HoveredIdAllowOverlap	imgui-master/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext
HoveredIdNotActiveTimer	imgui-master/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering time where the item has not been active$/;"	m	struct:ImGuiContext
HoveredIdPreviousFrame	imgui-master/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext
HoveredIdTimer	imgui-master/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering time$/;"	m	struct:ImGuiContext
HoveredRootWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            HoveredRootWindow;                  \/\/ Will catch mouse inputs (for focus\/move only)$/;"	m	struct:ImGuiContext
HoveredWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Will catch mouse inputs$/;"	m	struct:ImGuiContext
IB	imgui-master/examples/imgui_impl_dx12.cpp	/^    ID3D12Resource* IB;$/;"	m	struct:FrameResources	file:
ID	imgui-master/imgui.h	/^        unsigned int    ID;             \/\/ Input    \/\/ User ID. Use <0x10000 to map into a font glyph, >=0x10000 for other\/internal\/custom texture data.$/;"	m	struct:ImFontAtlas::CustomRect
ID	imgui-master/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHash(Name)$/;"	m	struct:ImGuiWindow
ID	imgui-master/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState
ID	imgui-master/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar
ID	imgui-master/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiColumnsSet
ID	imgui-master/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem
ID	imgui-master/imgui_internal.h	/^    ImGuiID       ID;           \/\/ Best candidate$/;"	m	struct:ImGuiNavMoveResult
ID	imgui-master/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings
IDStack	imgui-master/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes seeded with the value at the top of the stack$/;"	m	struct:ImGuiWindow
IMGUI_API	imgui-master/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	imgui-master/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	imgui-master/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	imgui-master/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_DEBUG_NAV_RECTS	imgui-master/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	imgui-master/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui-master/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui-master/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui-master/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DISABLE_DEMO_WINDOWS	imgui-master/imgui_demo.cpp	/^#define IMGUI_DISABLE_DEMO_WINDOWS$/;"	d	file:
IMGUI_IMPL_API	imgui-master/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_IMPL_OPENGL_LOADER_GL3W	imgui-master/examples/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_LOADER_GL3W$/;"	d
IMGUI_ONCE_UPON_A_FRAME	imgui-master/imgui.h	/^#define IMGUI_ONCE_UPON_A_FRAME /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_3F	imgui-master/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	imgui-master/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	imgui-master/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TEST_ENGINE_ITEM_INFO	imgui-master/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_VERSION	imgui-master/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	imgui-master/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IMGUI_VK_QUEUED_FRAMES	imgui-master/examples/imgui_impl_vulkan.h	/^#define IMGUI_VK_QUEUED_FRAMES /;"	d
IMGUI_VULKAN_DEBUG_REPORT	imgui-master/examples/example_glfw_vulkan/main.cpp	/^#define IMGUI_VULKAN_DEBUG_REPORT$/;"	d	file:
IMGUI_VULKAN_DEBUG_REPORT	imgui-master/examples/example_sdl_vulkan/main.cpp	/^#define IMGUI_VULKAN_DEBUG_REPORT$/;"	d	file:
IM_ARRAYSIZE	imgui-master/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	imgui-master/imgui.h	/^#define IM_ASSERT(/;"	d
IM_COL32	imgui-master/imgui.h	/^#define IM_COL32(/;"	d
IM_COL32_A_MASK	imgui-master/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	imgui-master/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	imgui-master/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	imgui-master/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	imgui-master/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_G_SHIFT	imgui-master/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	imgui-master/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	imgui-master/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DELETE	imgui-master/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f
IM_F32_TO_INT8_SAT	imgui-master/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	imgui-master/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FMTARGS	imgui-master/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	imgui-master/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_MAX	imgui-master/imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_NEW	imgui-master/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	imgui-master/imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	imgui-master/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_OFFSETOF	imgui-master/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	imgui-master/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	imgui-master/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_S32_MAX	imgui-master/imgui_widgets.cpp	/^static const ImS32  IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	file:
IM_S32_MIN	imgui-master/imgui_widgets.cpp	/^static const ImS32  IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	file:
IM_S64_MAX	imgui-master/imgui_widgets.cpp	/^static const ImS64  IM_S64_MAX = 9223372036854775807LL;$/;"	v	file:
IM_S64_MAX	imgui-master/imgui_widgets.cpp	/^static const ImS64  IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	file:
IM_S64_MIN	imgui-master/imgui_widgets.cpp	/^static const ImS64  IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	file:
IM_S64_MIN	imgui-master/imgui_widgets.cpp	/^static const ImS64  IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	file:
IM_STATIC_ASSERT	imgui-master/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_U32_MAX	imgui-master/imgui_widgets.cpp	/^static const ImU32  IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	file:
IM_U32_MIN	imgui-master/imgui_widgets.cpp	/^static const ImU32  IM_U32_MIN = 0;$/;"	v	file:
IM_U64_MAX	imgui-master/imgui_widgets.cpp	/^static const ImU64  IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	file:
IM_U64_MAX	imgui-master/imgui_widgets.cpp	/^static const ImU64  IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	file:
IM_U64_MIN	imgui-master/imgui_widgets.cpp	/^static const ImU64  IM_U64_MIN = 0;$/;"	v	file:
INCLUDES	imgui-master/examples/example_sdl_opengl2/build_win32.bat	/^set INCLUDES=\/I.. \/I..\\.. \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	imgui-master/examples/example_sdl_opengl3/build_win32.bat	/^set INCLUDES=\/I.. \/I..\\.. \/I%SDL2_DIR%\\include \/I..\\libs\\gl3w$/;"	v
INCLUDE_STB_TEXTEDIT_H	imgui-master/imstb_textedit.h	/^#define INCLUDE_STB_TEXTEDIT_H$/;"	d
IO	imgui-master/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext
IdxBuffer	imgui-master/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCmd::ElemCount of those$/;"	m	struct:ImDrawList
IdxBuffer	imgui-master/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;$/;"	m	struct:ImDrawChannel
ImAcos	imgui-master/imgui_internal.h	/^static inline float  ImAcos(float x)                                            { return acosf(x); }$/;"	f
ImAcos01	imgui-master/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	file:
ImAlphaBlendColor	imgui-master/imgui_widgets.cpp	/^static inline ImU32 ImAlphaBlendColor(ImU32 col_a, ImU32 col_b)$/;"	f	file:
ImAtan2	imgui-master/imgui_internal.h	/^static inline float  ImAtan2(float y, float x)                                  { return atan2f(y, x); }$/;"	f
ImAtof	imgui-master/imgui_internal.h	/^static inline double ImAtof(const char* s)                                      { return atof(s); }$/;"	f
ImAtoi	imgui-master/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	file:
ImCeil	imgui-master/imgui_internal.h	/^static inline float  ImCeil(float x)                                            { return ceilf(x); }$/;"	f
ImCharIsBlankA	imgui-master/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f
ImCharIsBlankW	imgui-master/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == 0x3000; }$/;"	f
ImClamp	imgui-master/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2((v.x < mn.x) ? mn.x : (v.x > mx.x) ? mx.x : v.x, (v.y < mn.y) ? mn.y : (v.y > mx.y) ? mx.y : v.y); }$/;"	f
ImClamp	imgui-master/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn) ? mn : (v > mx) ? mx : v; }$/;"	f
ImColor	imgui-master/imgui.h	/^    ImColor()                                                       { Value.x = Value.y = Value.z = Value.w = 0.0f; }$/;"	f	struct:ImColor
ImColor	imgui-master/imgui.h	/^    ImColor(ImU32 rgba)                                             { float sc = 1.0f\/255.0f; Value.x = (float)((rgba>>IM_COL32_R_SHIFT)&0xFF) * sc; Value.y = (float)((rgba>>IM_COL32_G_SHIFT)&0xFF) * sc; Value.z = (float)((rgba>>IM_COL32_B_SHIFT)&0xFF) * sc; Value.w = (float)((rgba>>IM_COL32_A_SHIFT)&0xFF) * sc; }$/;"	f	struct:ImColor
ImColor	imgui-master/imgui.h	/^    ImColor(const ImVec4& col)                                      { Value = col; }$/;"	f	struct:ImColor
ImColor	imgui-master/imgui.h	/^    ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; Value.z = b; Value.w = a; }$/;"	f	struct:ImColor
ImColor	imgui-master/imgui.h	/^    ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f\/255.0f; Value.x = (float)r * sc; Value.y = (float)g * sc; Value.z = (float)b * sc; Value.w = (float)a * sc; }$/;"	f	struct:ImColor
ImColor	imgui-master/imgui.h	/^struct ImColor$/;"	s
ImCos	imgui-master/imgui_internal.h	/^static inline float  ImCos(float x)                                             { return cosf(x); }$/;"	f
ImDot	imgui-master/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b.x + a.y * b.y; }$/;"	f
ImDrawCallback	imgui-master/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t
ImDrawChannel	imgui-master/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	imgui-master/imgui.h	/^    ImDrawCmd() { ElemCount = 0; ClipRect.x = ClipRect.y = ClipRect.z = ClipRect.w = 0.0f; TextureId = (ImTextureID)NULL; UserCallback = NULL; UserCallbackData = NULL; }$/;"	f	struct:ImDrawCmd
ImDrawCmd	imgui-master/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCornerFlags	imgui-master/imgui.h	/^typedef int ImDrawCornerFlags;      \/\/ -> enum ImDrawCornerFlags_    \/\/ Flags: for ImDrawList::AddRect*() etc.$/;"	t
ImDrawCornerFlags_	imgui-master/imgui.h	/^enum ImDrawCornerFlags_$/;"	g
ImDrawCornerFlags_All	imgui-master/imgui.h	/^    ImDrawCornerFlags_All       = 0xF     \/\/ In your function calls you may use ~0 (= all bits sets) instead of ImDrawCornerFlags_All, as a convenience$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Bot	imgui-master/imgui.h	/^    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,   \/\/ 0xC$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotLeft	imgui-master/imgui.h	/^    ImDrawCornerFlags_BotLeft   = 1 << 2, \/\/ 0x4$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotRight	imgui-master/imgui.h	/^    ImDrawCornerFlags_BotRight  = 1 << 3, \/\/ 0x8$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Left	imgui-master/imgui.h	/^    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,    \/\/ 0x5$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Right	imgui-master/imgui.h	/^    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,  \/\/ 0xA$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Top	imgui-master/imgui.h	/^    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,   \/\/ 0x3$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopLeft	imgui-master/imgui.h	/^    ImDrawCornerFlags_TopLeft   = 1 << 0, \/\/ 0x1$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopRight	imgui-master/imgui.h	/^    ImDrawCornerFlags_TopRight  = 1 << 1, \/\/ 0x2$/;"	e	enum:ImDrawCornerFlags_
ImDrawData	imgui-master/imgui.h	/^    ImDrawData()    { Valid = false; Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	imgui-master/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	imgui-master/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawIdx	imgui-master/examples/example_allegro5/imconfig_allegro5.h	/^#define ImDrawIdx /;"	d
ImDrawIdx	imgui-master/imgui.h	/^typedef unsigned short ImDrawIdx;$/;"	t
ImDrawList	imgui-master/imgui.h	/^    ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL; Clear(); }$/;"	f	struct:ImDrawList
ImDrawList	imgui-master/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	imgui-master/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawList$/;"	t
ImDrawListFlags_	imgui-master/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AntiAliasedFill	imgui-master/imgui.h	/^    ImDrawListFlags_AntiAliasedFill  = 1 << 1   \/\/ Filled shapes have anti-aliased edges (*2 the number of vertices)$/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	imgui-master/imgui.h	/^    ImDrawListFlags_AntiAliasedLines = 1 << 0,  \/\/ Lines are anti-aliased (*2 the number of triangles for 1.0f wide line, otherwise *3 the number of triangles)$/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	imgui-master/imgui.h	/^    ImDrawListFlags_None             = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	imgui-master/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	imgui-master/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawVert	imgui-master/imgui.h	/^struct ImDrawVert$/;"	s
ImDrawVertAllegro	imgui-master/examples/imgui_impl_allegro5.cpp	/^struct ImDrawVertAllegro$/;"	s	file:
ImFabs	imgui-master/imgui_internal.h	/^static inline float  ImFabs(float x)                                            { return fabsf(x); }$/;"	f
ImFileLoadToMemory	imgui-master/imgui.cpp	/^void* ImFileLoadToMemory(const char* filename, const char* file_open_mode, size_t* out_file_size, int padding_bytes)$/;"	f
ImFileOpen	imgui-master/imgui.cpp	/^FILE* ImFileOpen(const char* filename, const char* mode)$/;"	f
ImFloor	imgui-master/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2((float)(int)v.x, (float)(int)v.y); }$/;"	f
ImFloor	imgui-master/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)(int)f; }$/;"	f
ImFloorStd	imgui-master/imgui_internal.h	/^static inline float  ImFloorStd(float x)                                        { return floorf(x); }   \/\/ we already uses our own ImFloor() { return (float)(int)v } internally so the standard one wrapper is named differently (it's used by stb_truetype)$/;"	f
ImFmod	imgui-master/imgui_internal.h	/^static inline double ImFmod(double x, double y)                                 { return fmod(x, y); }$/;"	f
ImFmod	imgui-master/imgui_internal.h	/^static inline float  ImFmod(float x, float y)                                   { return fmodf(x, y); }$/;"	f
ImFont	imgui-master/imgui.h	/^struct ImFont$/;"	s
ImFont	imgui-master/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	imgui-master/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	imgui-master/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	imgui-master/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f
ImFontAtlasBuildMultiplyCalcLookupTable	imgui-master/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_factor)$/;"	f
ImFontAtlasBuildMultiplyRectAlpha8	imgui-master/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels, int x, int y, int w, int h, int stride)$/;"	f
ImFontAtlasBuildPackCustomRects	imgui-master/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* pack_context_opaque)$/;"	f
ImFontAtlasBuildRegisterDefaultCustomRects	imgui-master/imgui_draw.cpp	/^void ImFontAtlasBuildRegisterDefaultCustomRects(ImFontAtlas* atlas)$/;"	f
ImFontAtlasBuildRenderDefaultTexData	imgui-master/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	file:
ImFontAtlasBuildSetupFont	imgui-master/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, float ascent, float descent)$/;"	f
ImFontAtlasBuildWithStbTruetype	imgui-master/imgui_draw.cpp	/^bool    ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f
ImFontAtlasFlags	imgui-master/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtlas$/;"	t
ImFontAtlasFlags_	imgui-master/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoMouseCursors	imgui-master/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1    \/\/ Don't build software mouse cursors into the atlas$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	imgui-master/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of two$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	imgui-master/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontConfig	imgui-master/imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	imgui-master/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	imgui-master/imgui.h	/^struct ImFontGlyph$/;"	s
ImFormatString	imgui-master/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f
ImFormatStringV	imgui-master/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f
ImGetDirQuadrantFromDelta	imgui-master/imgui.cpp	/^ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f
ImGui	imgui-master/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	imgui-master/imgui.h	/^namespace ImGui$/;"	n
ImGui	imgui-master/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	imgui-master/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGui	imgui-master/misc/cpp/imgui_stdlib.h	/^namespace ImGui$/;"	n
ImGuiAxis	imgui-master/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	imgui-master/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	imgui-master/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	imgui-master/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	imgui-master/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.BackendFlags$/;"	t
ImGuiBackendFlags_	imgui-master/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	imgui-master/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Back-end supports gamepad and currently has one connected.$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	imgui-master/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Back-end supports honoring GetMouseCursor() value to change the OS cursor shape.$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	imgui-master/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2    \/\/ Back-end supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	imgui-master/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_       \/\/ Flags: for ButtonEx(), ButtonBehavior()$/;"	t
ImGuiButtonFlags_	imgui-master/imgui_internal.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 9,   \/\/ vertically align button to match text baseline - ButtonEx() only \/\/ FIXME: Should be removed and handled by SmallButton(), not possible currently because of DC.CursorPosPrevLine$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_AllowItemOverlap	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_AllowItemOverlap       = 1 << 6,   \/\/ require previous frame HoveredId to either match id or be null before being usable, use along with SetItemAllowOverlap()$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Disabled	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_Disabled               = 1 << 8,   \/\/ disable interactions$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_DontClosePopups	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 7,   \/\/ disable automatically closing parent popup on press \/\/ [UNUSED]$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_FlattenChildren	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 5,   \/\/ allow interactions even if a child window is overlapping$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveID	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveID      = 1 << 11,  \/\/ don't set ActiveId while holding the mouse (ImGuiButtonFlags_PressedOnClick only)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoKeyModifiers	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 10,  \/\/ disable interaction if a key modifier is held$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoNavFocus	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 13   \/\/ don't override navigation focus when activated$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_None	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 2,   \/\/ return true on click (default requires click+release)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClickRelease	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 1,   \/\/ return true on click + release on same item [DEFAULT if no PressedOn* flag is set]$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDoubleClick	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 4,   \/\/ return true on double-click (default requires click+release)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDragDropHold	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 12,  \/\/ press when held into while we are drag and dropping another item (used by e.g. tree nodes, collapsing headers)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnRelease	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 3,   \/\/ return true on release (default requires click+release)$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Repeat	imgui-master/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 0,   \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlags_
ImGuiCol	imgui-master/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identifier for styling$/;"	t
ImGuiCol_	imgui-master/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	imgui-master/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	imgui-master/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	imgui-master/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	imgui-master/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	imgui-master/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	imgui-master/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	imgui-master/imgui.h	/^    ImGuiCol_CheckMark,$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	imgui-master/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildWindowBg	imgui-master/imgui.h	/^    , ImGuiCol_ChildWindowBg = ImGuiCol_ChildBg, ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive$/;"	e	enum:ImGuiCol_
ImGuiCol_Column	imgui-master/imgui.h	/^    , ImGuiCol_ChildWindowBg = ImGuiCol_ChildBg, ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive$/;"	e	enum:ImGuiCol_
ImGuiCol_ColumnActive	imgui-master/imgui.h	/^    , ImGuiCol_ChildWindowBg = ImGuiCol_ChildBg, ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive$/;"	e	enum:ImGuiCol_
ImGuiCol_ColumnHovered	imgui-master/imgui.h	/^    , ImGuiCol_ChildWindowBg = ImGuiCol_ChildBg, ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	imgui-master/imgui.h	/^    ImGuiCol_DragDropTarget,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	imgui-master/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, text input$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	imgui-master/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	imgui-master/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	imgui-master/imgui.h	/^    ImGuiCol_Header,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	imgui-master/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	imgui-master/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	imgui-master/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDarkening	imgui-master/imgui.h	/^    , ImGuiCol_ModalWindowDarkening = ImGuiCol_ModalWindowDimBg$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	imgui-master/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, when one is active$/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	imgui-master/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	imgui-master/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB window list, when active$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	imgui-master/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	imgui-master/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	imgui-master/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	imgui-master/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	imgui-master/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	imgui-master/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	imgui-master/imgui.h	/^    ImGuiCol_ResizeGrip,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	imgui-master/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	imgui-master/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	imgui-master/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	imgui-master/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	imgui-master/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	imgui-master/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	imgui-master/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	imgui-master/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	imgui-master/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	imgui-master/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	imgui-master/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	imgui-master/imgui.h	/^    ImGuiCol_Tab,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	imgui-master/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	imgui-master/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	imgui-master/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	imgui-master/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	imgui-master/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	imgui-master/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	imgui-master/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	imgui-master/imgui.h	/^    ImGuiCol_TitleBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	imgui-master/imgui.h	/^    ImGuiCol_TitleBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	imgui-master/imgui.h	/^    ImGuiCol_TitleBgCollapsed,$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	imgui-master/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	imgui-master/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit*(), ColorPicker*()$/;"	t
ImGuiColorEditFlags_	imgui-master/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	imgui-master/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicker: show vertical alpha bar\/gradient in picker.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	imgui-master/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	imgui-master/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: display half opaque \/ half checkerboard, instead of opaque.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	imgui-master/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	imgui-master/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HEX	imgui-master/imgui.h	/^    ImGuiColorEditFlags_HEX             = 1 << 22,  \/\/ [Inputs]     \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HSV	imgui-master/imgui.h	/^    ImGuiColorEditFlags_HSV             = 1 << 21,  \/\/ [Inputs]     \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: ignore Alpha component (read 3 components from the input pointer).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicker: disable inputs sliders\/text widgets (e.g. to show only the small preview colored square).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable toggling options menu when right-clicking on inputs\/small preview.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable picker when clicking on colored square.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable bigger color preview on right side of the picker, use small colored square preview instead.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicker: disable colored square preview next to the inputs. (e.g. to show only the inputs)$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	imgui-master/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	imgui-master/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	imgui-master/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [PickerMode] \/\/ ColorPicker: bar for Hue, rectangle for Sat\/Value.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	imgui-master/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [PickerMode] \/\/ ColorPicker: wheel for Hue, triangle for Sat\/Value.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_RGB	imgui-master/imgui.h	/^    ImGuiColorEditFlags_RGB             = 1 << 20,  \/\/ [Inputs]     \/\/ ColorEdit: choose one among RGB\/HSV\/HEX. ColorPicker: choose any combination using RGB\/HSV\/HEX.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	imgui-master/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DataTypeMask	imgui-master/imgui.h	/^    ImGuiColorEditFlags__DataTypeMask   = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__InputsMask	imgui-master/imgui.h	/^    ImGuiColorEditFlags__InputsMask     = ImGuiColorEditFlags_RGB|ImGuiColorEditFlags_HSV|ImGuiColorEditFlags_HEX,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__OptionsDefault	imgui-master/imgui.h	/^    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_RGB|ImGuiColorEditFlags_PickerHueBar    \/\/ Change application default using SetColorEditOptions()$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__PickerMask	imgui-master/imgui.h	/^    ImGuiColorEditFlags__PickerMask     = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags_PickerHueBar,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	imgui-master/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiColumnData	imgui-master/imgui_internal.h	/^    ImGuiColumnData()   { OffsetNorm = OffsetNormBeforeResize = 0.0f; Flags = 0; }$/;"	f	struct:ImGuiColumnData
ImGuiColumnData	imgui-master/imgui_internal.h	/^struct ImGuiColumnData$/;"	s
ImGuiColumnsFlags	imgui-master/imgui.h	/^typedef int ImGuiColumnsFlags;      \/\/ -> enum ImGuiColumnsFlags_    \/\/ Flags: for Columns(), BeginColumns()$/;"	t
ImGuiColumnsFlags_	imgui-master/imgui_internal.h	/^enum ImGuiColumnsFlags_$/;"	g
ImGuiColumnsFlags_GrowParentContentsSize	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags_GrowParentContentsSize= 1 << 4    \/\/ (WIP) Restore pre-1.51 behavior of extending the parent window contents size but _without affecting the columns width at all_. Will eventually remove.$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoBorder	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags_NoBorder              = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoForceWithinWindow	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags_NoForceWithinWindow   = 1 << 3,   \/\/ Disable forcing columns to fit within window$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoPreserveWidths	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags_NoPreserveWidths      = 1 << 2,   \/\/ Disable column width preservation when adjusting columns$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoResize	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags_NoResize              = 1 << 1,   \/\/ Disable resizing columns when clicking on the dividers$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_None	imgui-master/imgui_internal.h	/^    ImGuiColumnsFlags_None                  = 0,$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsSet	imgui-master/imgui_internal.h	/^    ImGuiColumnsSet()   { Clear(); }$/;"	f	struct:ImGuiColumnsSet
ImGuiColumnsSet	imgui-master/imgui_internal.h	/^struct ImGuiColumnsSet$/;"	s
ImGuiComboFlags	imgui-master/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginCombo()$/;"	t
ImGuiComboFlags_	imgui-master/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_HeightLarge	imgui-master/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	imgui-master/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	imgui-master/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	imgui-master/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	imgui-master/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	imgui-master/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without the square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	imgui-master/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	imgui-master/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	imgui-master/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by default$/;"	e	enum:ImGuiComboFlags_
ImGuiCond	imgui-master/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition for Set*()$/;"	t
ImGuiCond_	imgui-master/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	imgui-master/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ Set the variable$/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	imgui-master/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3    \/\/ Set the variable if the object\/window is appearing after being hidden\/inactive (or the first time)$/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	imgui-master/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persistently saved data (no entry in .ini file)$/;"	e	enum:ImGuiCond_
ImGuiCond_Once	imgui-master/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the first call with succeed)$/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	imgui-master/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.ConfigFlags$/;"	t
ImGuiConfigFlags_	imgui-master/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	imgui-master/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	imgui-master/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21   \/\/ Application is using a touch screen instead of a mouse.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	imgui-master/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable flag. This is mostly to instruct your imgui back-end to fill io.NavInputs[]. Back-end also needs to set ImGuiBackendFlags_HasGamepad.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	imgui-master/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.KeysDown[].$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	imgui-master/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mouse cursor. May be useful on TV\/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your binding, otherwise ImGui will react as if the mouse is jumping around back and forth.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	imgui-master/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	imgui-master/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse position\/buttons in NewFrame(). This allows ignoring the mouse information set by the back-end.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	imgui-master/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct back-end to not alter mouse cursor shape and visibility. Use if the back-end cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	imgui-master/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	imgui-master/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas) : OverlayDrawList(NULL)$/;"	f	struct:ImGuiContext
ImGuiContext	imgui-master/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiDataType	imgui-master/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data type$/;"	t
ImGuiDataTypeInfo	imgui-master/imgui_widgets.cpp	/^struct ImGuiDataTypeInfo$/;"	s	file:
ImGuiDataType_	imgui-master/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	imgui-master/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_COUNT	imgui-master/imgui_widgets.cpp	/^IM_STATIC_ASSERT(IM_ARRAYSIZE(GDataTypeInfo) == ImGuiDataType_COUNT);$/;"	v
ImGuiDataType_Double	imgui-master/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	imgui-master/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	imgui-master/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	imgui-master/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long, __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	imgui-master/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	imgui-master/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long, unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDir	imgui-master/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal direction$/;"	t
ImGuiDir_	imgui-master/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	imgui-master/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	imgui-master/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	imgui-master/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	imgui-master/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	imgui-master/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	imgui-master/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	imgui-master/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for *DragDrop*()$/;"	t
ImGuiDragDropFlags_	imgui-master/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	imgui-master/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	imgui-master/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default highlight rectangle when hovering over target.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	imgui-master/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	imgui-master/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect  \/\/ For peeking ahead and inspecting the payload before delivery.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	imgui-master/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	imgui-master/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	imgui-master/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	imgui-master/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outside of imgui), won't attempt to read current item\/window info. Will always return true. Only one Extern source can be active simultaneously.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	imgui-master/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	imgui-master/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	imgui-master/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiDragFlags;         \/\/ -> enum ImGuiDragFlags_         \/\/ Flags: for DragBehavior()$/;"	t
ImGuiDragFlags_	imgui-master/imgui_internal.h	/^enum ImGuiDragFlags_$/;"	g
ImGuiDragFlags_None	imgui-master/imgui_internal.h	/^    ImGuiDragFlags_None                     = 0,$/;"	e	enum:ImGuiDragFlags_
ImGuiDragFlags_Vertical	imgui-master/imgui_internal.h	/^    ImGuiDragFlags_Vertical                 = 1 << 0$/;"	e	enum:ImGuiDragFlags_
ImGuiFocusedFlags	imgui-master/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowFocused()$/;"	t
ImGuiFocusedFlags_	imgui-master/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	imgui-master/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowFocused(): Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use ImGui::GetIO().WantCaptureMouse instead.$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	imgui-master/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowFocused(): Return true if any children of the window is focused$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	imgui-master/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	imgui-master/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	imgui-master/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowFocused(): Test from root window (top most parent of the current hierarchy)$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFreeType	imgui-master/misc/freetype/imgui_freetype.h	/^namespace ImGuiFreeType$/;"	n
ImGuiGroupData	imgui-master/imgui_internal.h	/^struct ImGuiGroupData$/;"	s
ImGuiHoveredFlags	imgui-master/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHovered(), IsWindowHovered() etc.$/;"	t
ImGuiHoveredFlags_	imgui-master/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	imgui-master/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,   \/\/ Return true even if an active item is blocking access to this item\/window. Useful for Drag and Drop patterns.$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	imgui-master/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,   \/\/ Return true even if a popup window is normally blocking access to this item\/window$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	imgui-master/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 7,   \/\/ Return true even if the item is disabled$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	imgui-master/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,   \/\/ Return true even if the position is overlapped by another window$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AnyWindow	imgui-master/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Return true if any window is hovered$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	imgui-master/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Return true if any children of the window is hovered$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	imgui-master/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly over the item\/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	imgui-master/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	imgui-master/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows$/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	imgui-master/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)$/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	imgui-master/imgui.h	/^typedef unsigned int ImGuiID;       \/\/ Unique ID used by widgets (typically hashed from a stack of string)$/;"	t
ImGuiIO	imgui-master/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	imgui-master/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputReadMode	imgui-master/imgui_internal.h	/^enum ImGuiInputReadMode$/;"	g
ImGuiInputReadMode_Down	imgui-master/imgui_internal.h	/^    ImGuiInputReadMode_Down,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Pressed	imgui-master/imgui_internal.h	/^    ImGuiInputReadMode_Pressed,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Released	imgui-master/imgui_internal.h	/^    ImGuiInputReadMode_Released,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Repeat	imgui-master/imgui_internal.h	/^    ImGuiInputReadMode_Repeat,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatFast	imgui-master/imgui_internal.h	/^    ImGuiInputReadMode_RepeatFast$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatSlow	imgui-master/imgui_internal.h	/^    ImGuiInputReadMode_RepeatSlow,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputSource	imgui-master/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	imgui-master/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	imgui-master/imgui_internal.h	/^    ImGuiInputSource_Mouse,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Nav	imgui-master/imgui_internal.h	/^    ImGuiInputSource_Nav,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavGamepad	imgui-master/imgui_internal.h	/^    ImGuiInputSource_NavGamepad,    \/\/ "$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavKeyboard	imgui-master/imgui_internal.h	/^    ImGuiInputSource_NavKeyboard,   \/\/ Only used occasionally for storage, not tested\/handled by most code$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	imgui-master/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	imgui-master/imgui.h	/^typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData *data);$/;"	t
ImGuiInputTextCallbackData	imgui-master/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	imgui-master/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextFlags	imgui-master/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText*()$/;"	t
ImGuiInputTextFlags_	imgui-master/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	imgui-master/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' character into the text field$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysInsertMode	imgui-master/imgui.h	/^    ImGuiInputTextFlags_AlwaysInsertMode    = 1 << 13,  \/\/ Insert mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	imgui-master/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first taking mouse focus$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User code may query cursor position, modify text buffer.$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for completion handling)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrows (for history handling)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc\/cpp\/imgui_stdlib.h for an example of using this)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientific notation input)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	imgui-master/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	imgui-master/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed (as opposed to when the value was modified)$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Multiline	imgui-master/imgui.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 20   \/\/ For internal use by InputTextMultiline()$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoHorizontalScroll	imgui-master/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizontally$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoUndoRedo	imgui-master/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input text owns the text data while active, if you want to provide your own undo\/redo stack you need e.g. to call ClearActiveID().$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	imgui-master/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	imgui-master/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characters as '*'$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	imgui-master/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	imgui-master/imgui_internal.h	/^    ImGuiInputTextState()                           { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	imgui-master/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiItemFlags;         \/\/ -> enum ImGuiItemFlags_         \/\/ Flags: for PushItemFlag()$/;"	t
ImGuiItemFlags_	imgui-master/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_ButtonRepeat	imgui-master/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat                 = 1 << 1,  \/\/ false    \/\/ Button() will return true multiple times based on io.KeyRepeatDelay and io.KeyRepeatRate settings.$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Default_	imgui-master/imgui_internal.h	/^    ImGuiItemFlags_Default_                     = 0$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	imgui-master/imgui_internal.h	/^    ImGuiItemFlags_Disabled                     = 1 << 2,  \/\/ false    \/\/ [BETA] Disable interactions but doesn't affect visuals yet. See github.com\/ocornut\/imgui\/issues\/211$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	imgui-master/imgui_internal.h	/^    ImGuiItemFlags_NoNav                        = 1 << 3,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	imgui-master/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus            = 1 << 4,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	imgui-master/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                    = 1 << 0,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	imgui-master/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup     = 1 << 5,  \/\/ false    \/\/ MenuItem\/Selectable() automatically closes current Popup window$/;"	e	enum:ImGuiItemFlags_
ImGuiItemHoveredDataBackup	imgui-master/imgui_internal.h	/^    ImGuiItemHoveredDataBackup() { Backup(); }$/;"	f	struct:ImGuiItemHoveredDataBackup
ImGuiItemHoveredDataBackup	imgui-master/imgui_internal.h	/^struct ImGuiItemHoveredDataBackup$/;"	s
ImGuiItemStatusFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;   \/\/ -> enum ImGuiItemStatusFlags_   \/\/ Flags: for DC.LastItemStatusFlags$/;"	t
ImGuiItemStatusFlags_	imgui-master/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 12,  \/\/ $/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 13   \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2    \/\/ Value exposed by item was edited in the current frame (should match the bool return value of most widgets)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 10,  \/\/ $/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 11,  \/\/ $/;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	imgui-master/imgui.h	/^typedef int ImGuiKey;               \/\/ -> enum ImGuiKey_             \/\/ Enum: A key identifier (ImGui-side enum)$/;"	t
ImGuiKey_	imgui-master/imgui.h	/^enum ImGuiKey_$/;"	g
ImGuiKey_A	imgui-master/imgui.h	/^    ImGuiKey_A,         \/\/ for text edit CTRL+A: select all$/;"	e	enum:ImGuiKey_
ImGuiKey_Backspace	imgui-master/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey_
ImGuiKey_C	imgui-master/imgui.h	/^    ImGuiKey_C,         \/\/ for text edit CTRL+C: copy$/;"	e	enum:ImGuiKey_
ImGuiKey_COUNT	imgui-master/imgui.h	/^    ImGuiKey_COUNT$/;"	e	enum:ImGuiKey_
ImGuiKey_Delete	imgui-master/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey_
ImGuiKey_DownArrow	imgui-master/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_End	imgui-master/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey_
ImGuiKey_Enter	imgui-master/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey_
ImGuiKey_Escape	imgui-master/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey_
ImGuiKey_Home	imgui-master/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey_
ImGuiKey_Insert	imgui-master/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftArrow	imgui-master/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageDown	imgui-master/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageUp	imgui-master/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightArrow	imgui-master/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_Space	imgui-master/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey_
ImGuiKey_Tab	imgui-master/imgui.h	/^    ImGuiKey_Tab,$/;"	e	enum:ImGuiKey_
ImGuiKey_UpArrow	imgui-master/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_V	imgui-master/imgui.h	/^    ImGuiKey_V,         \/\/ for text edit CTRL+V: paste$/;"	e	enum:ImGuiKey_
ImGuiKey_X	imgui-master/imgui.h	/^    ImGuiKey_X,         \/\/ for text edit CTRL+X: cut$/;"	e	enum:ImGuiKey_
ImGuiKey_Y	imgui-master/imgui.h	/^    ImGuiKey_Y,         \/\/ for text edit CTRL+Y: redo$/;"	e	enum:ImGuiKey_
ImGuiKey_Z	imgui-master/imgui.h	/^    ImGuiKey_Z,         \/\/ for text edit CTRL+Z: undo$/;"	e	enum:ImGuiKey_
ImGuiLayoutType	imgui-master/imgui_internal.h	/^typedef int ImGuiLayoutType;        \/\/ -> enum ImGuiLayoutType_        \/\/ Enum: Horizontal or vertical$/;"	t
ImGuiLayoutType_	imgui-master/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	imgui-master/imgui_internal.h	/^    ImGuiLayoutType_Horizontal$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	imgui-master/imgui_internal.h	/^    ImGuiLayoutType_Vertical,$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	imgui-master/imgui.h	/^    ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } \/\/ NB: Begin() initialize every fields (as we allow user to call Begin\/End multiple times on a same instance if they want).$/;"	f	struct:ImGuiListClipper
ImGuiListClipper	imgui-master/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiMenuColumns	imgui-master/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMenuColumns	imgui-master/imgui_widgets.cpp	/^ImGuiMenuColumns::ImGuiMenuColumns()$/;"	f	class:ImGuiMenuColumns
ImGuiMouseCursor	imgui-master/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor identifier$/;"	t
ImGuiMouseCursor_	imgui-master/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	imgui-master/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	imgui-master/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Count_	imgui-master/imgui.h	/^    , ImGuiMouseCursor_Count_ = ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	imgui-master/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by imgui functions. Use for e.g. hyperlinks)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	imgui-master/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	imgui-master/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by imgui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	imgui-master/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	imgui-master/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a window$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	imgui-master/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over an horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	imgui-master/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a window$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	imgui-master/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiNavDirSourceFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiNavDirSourceFlags; \/\/ -> enum ImGuiNavDirSourceFlags_ \/\/ Flags: for GetNavInputAmount2d()$/;"	t
ImGuiNavDirSourceFlags_	imgui-master/imgui_internal.h	/^enum ImGuiNavDirSourceFlags_$/;"	g
ImGuiNavDirSourceFlags_Keyboard	imgui-master/imgui_internal.h	/^    ImGuiNavDirSourceFlags_Keyboard     = 1 << 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_None	imgui-master/imgui_internal.h	/^    ImGuiNavDirSourceFlags_None         = 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadDPad	imgui-master/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadDPad      = 1 << 1,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadLStick	imgui-master/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadLStick    = 1 << 2$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavForward	imgui-master/imgui_internal.h	/^enum ImGuiNavForward$/;"	g
ImGuiNavForward_ForwardActive	imgui-master/imgui_internal.h	/^    ImGuiNavForward_ForwardActive$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_ForwardQueued	imgui-master/imgui_internal.h	/^    ImGuiNavForward_ForwardQueued,$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_None	imgui-master/imgui_internal.h	/^    ImGuiNavForward_None,$/;"	e	enum:ImGuiNavForward
ImGuiNavHighlightFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags; \/\/ -> enum ImGuiNavHighlightFlags_ \/\/ Flags: for RenderNavHighlight()$/;"	t
ImGuiNavHighlightFlags_	imgui-master/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	imgui-master/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw   = 1 << 2,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	imgui-master/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding   = 1 << 3$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	imgui-master/imgui_internal.h	/^    ImGuiNavHighlightFlags_None         = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeDefault	imgui-master/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeDefault  = 1 << 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeThin	imgui-master/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeThin     = 1 << 1,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	imgui-master/imgui.h	/^typedef int ImGuiNavInput;          \/\/ -> enum ImGuiNavInput_        \/\/ Enum: An input identifier for navigation$/;"	t
ImGuiNavInput_	imgui-master/imgui.h	/^enum ImGuiNavInput_$/;"	g
ImGuiNavInput_Activate	imgui-master/imgui.h	/^    ImGuiNavInput_Activate,      \/\/ activate \/ open \/ toggle \/ tweak value       \/\/ e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_COUNT	imgui-master/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Cancel	imgui-master/imgui.h	/^    ImGuiNavInput_Cancel,        \/\/ cancel \/ close \/ exit                        \/\/ e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadDown	imgui-master/imgui.h	/^    ImGuiNavInput_DpadDown,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadLeft	imgui-master/imgui.h	/^    ImGuiNavInput_DpadLeft,      \/\/ move \/ tweak \/ resize window (w\/ PadMenu)    \/\/ e.g. D-pad Left\/Right\/Up\/Down (Gamepads), Arrow keys (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadRight	imgui-master/imgui.h	/^    ImGuiNavInput_DpadRight,     \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadUp	imgui-master/imgui.h	/^    ImGuiNavInput_DpadUp,        \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusNext	imgui-master/imgui.h	/^    ImGuiNavInput_FocusNext,     \/\/ prev window (w\/ PadMenu)                     \/\/ e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusPrev	imgui-master/imgui.h	/^    ImGuiNavInput_FocusPrev,     \/\/ next window (w\/ PadMenu)                     \/\/ e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Input	imgui-master/imgui.h	/^    ImGuiNavInput_Input,         \/\/ text input \/ on-screen keyboard              \/\/ e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_InternalStart_	imgui-master/imgui.h	/^    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyDown_	imgui-master/imgui.h	/^    ImGuiNavInput_KeyDown_,      \/\/ move down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyLeft_	imgui-master/imgui.h	/^    ImGuiNavInput_KeyLeft_,      \/\/ move left                                    \/\/ = Arrow keys$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyMenu_	imgui-master/imgui.h	/^    ImGuiNavInput_KeyMenu_,      \/\/ toggle menu                                  \/\/ = io.KeyAlt$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyRight_	imgui-master/imgui.h	/^    ImGuiNavInput_KeyRight_,     \/\/ move right$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyUp_	imgui-master/imgui.h	/^    ImGuiNavInput_KeyUp_,        \/\/ move up$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickDown	imgui-master/imgui.h	/^    ImGuiNavInput_LStickDown,    \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickLeft	imgui-master/imgui.h	/^    ImGuiNavInput_LStickLeft,    \/\/ scroll \/ move window (w\/ PadMenu)            \/\/ e.g. Left Analog Stick Left\/Right\/Up\/Down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickRight	imgui-master/imgui.h	/^    ImGuiNavInput_LStickRight,   \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickUp	imgui-master/imgui.h	/^    ImGuiNavInput_LStickUp,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Menu	imgui-master/imgui.h	/^    ImGuiNavInput_Menu,          \/\/ tap: toggle menu \/ hold: focus, move, resize \/\/ e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakFast	imgui-master/imgui.h	/^    ImGuiNavInput_TweakFast,     \/\/ faster tweaks                                \/\/ e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakSlow	imgui-master/imgui.h	/^    ImGuiNavInput_TweakSlow,     \/\/ slower tweaks                                \/\/ e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)$/;"	e	enum:ImGuiNavInput_
ImGuiNavLayer	imgui-master/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	imgui-master/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	imgui-master/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	imgui-master/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt\/ImGuiNavInput_Menu)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;      \/\/ -> enum ImGuiNavMoveFlags_      \/\/ Flags: for navigation requests$/;"	t
ImGuiNavMoveFlags_	imgui-master/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_AllowCurrentNavId	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the current NavId as a move target candidate. This is used when the move source is offset (e.g. pressing PageDown actually needs to send a Up move request, if we are pressing PageDown from the bottom-most item we need to stay in place)$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5    \/\/ Store alternate result in NavMoveResultLocalVisibleSet that only comprise elements that are already fully visible.$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opposite side$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opposite side one line down (when NavDir==right) or one line up (when NavDir==left)$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful for provided for completeness$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveResult	imgui-master/imgui_internal.h	/^    ImGuiNavMoveResult() { Clear(); }$/;"	f	struct:ImGuiNavMoveResult
ImGuiNavMoveResult	imgui-master/imgui_internal.h	/^struct ImGuiNavMoveResult$/;"	s
ImGuiNextWindowData	imgui-master/imgui_internal.h	/^    ImGuiNextWindowData()$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	imgui-master/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiOnceUponAFrame	imgui-master/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	imgui-master/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	imgui-master/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	imgui-master/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlotArrayGetterData	imgui-master/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }$/;"	f	struct:ImGuiPlotArrayGetterData
ImGuiPlotArrayGetterData	imgui-master/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	imgui-master/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	imgui-master/imgui_internal.h	/^    ImGuiPlotType_Histogram$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	imgui-master/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupPositionPolicy	imgui-master/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	imgui-master/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	imgui-master/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupRef	imgui-master/imgui_internal.h	/^struct ImGuiPopupRef$/;"	s
ImGuiResizeGripDef	imgui-master/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiSelectableFlags	imgui-master/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectable()$/;"	t
ImGuiSelectableFlagsPrivate_	imgui-master/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	imgui-master/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	imgui-master/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double clicks too$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	imgui-master/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3    \/\/ Cannot be selected, display greyed out text$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	imgui-master/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this don't close parent popup window$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DrawFillAvailWidth	imgui-master/imgui_internal.h	/^    ImGuiSelectableFlags_DrawFillAvailWidth = 1 << 13$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoHoldingActiveID	imgui-master/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID  = 1 << 10,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	imgui-master/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_PressedOnClick	imgui-master/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnClick     = 1 << 11,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_PressedOnRelease	imgui-master/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnRelease   = 1 << 12,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	imgui-master/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Selectable frame can span all columns (text will still fit in current column)$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSeparatorFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;    \/\/ -> enum ImGuiSeparatorFlags_    \/\/ Flags: for Separator() - internal$/;"	t
ImGuiSeparatorFlags_	imgui-master/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	imgui-master/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal          = 1 << 0,   \/\/ Axis default to current layout type, so generally Horizontal unless e.g. in a menu bar$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	imgui-master/imgui_internal.h	/^    ImGuiSeparatorFlags_None                = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	imgui-master/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical            = 1 << 1$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSetCond_Always	imgui-master/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSetCond_Appearing	imgui-master/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSetCond_FirstUseEver	imgui-master/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSetCond_Once	imgui-master/imgui.h	/^    , ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing$/;"	e	enum:ImGuiCond_
ImGuiSettingsHandler	imgui-master/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	imgui-master/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiSizeCallback	imgui-master/imgui.h	/^typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);$/;"	t
ImGuiSizeCallbackData	imgui-master/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	imgui-master/imgui_internal.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_       \/\/ Flags: for SliderBehavior()$/;"	t
ImGuiSliderFlags_	imgui-master/imgui_internal.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_None	imgui-master/imgui_internal.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Vertical	imgui-master/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 0$/;"	e	enum:ImGuiSliderFlags_
ImGuiStb	imgui-master/imgui_internal.h	/^namespace ImGuiStb$/;"	n
ImGuiStb	imgui-master/imgui_widgets.cpp	/^namespace ImGuiStb$/;"	n	file:
ImGuiStorage	imgui-master/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStyle	imgui-master/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	imgui-master/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	imgui-master/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloat[1] = v.y; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	imgui-master/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	imgui-master/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	imgui-master/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	imgui-master/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable identifier for styling$/;"	t
ImGuiStyleVarInfo	imgui-master/imgui.cpp	/^struct ImGuiStyleVarInfo$/;"	s	file:
ImGuiStyleVar_	imgui-master/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	imgui-master/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	imgui-master/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	imgui-master/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	imgui-master/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	imgui-master/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildWindowRounding	imgui-master/imgui.h	/^    , ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT, ImGuiStyleVar_ChildWindowRounding = ImGuiStyleVar_ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_Count_	imgui-master/imgui.h	/^    , ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT, ImGuiStyleVar_ChildWindowRounding = ImGuiStyleVar_ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	imgui-master/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	imgui-master/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	imgui-master/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	imgui-master/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	imgui-master/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	imgui-master/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	imgui-master/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	imgui-master/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	imgui-master/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	imgui-master/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	imgui-master/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	imgui-master/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	imgui-master/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	imgui-master/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	imgui-master/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	imgui-master/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	imgui-master/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	imgui-master/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	imgui-master/imgui_internal.h	/^struct ImGuiTabBar$/;"	s
ImGuiTabBar	imgui-master/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	imgui-master/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabBar()$/;"	t
ImGuiTabBarFlagsPrivate_	imgui-master/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	imgui-master/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	imgui-master/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new tabs when they appear$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	imgui-master/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ [Docking: Unused in Master Branch] Part of a dock node$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_DockNodeIsDockSpace	imgui-master/imgui_internal.h	/^    ImGuiTabBarFlags_DockNodeIsDockSpace        = 1 << 21,  \/\/ [Docking: Unused in Master Branch] Part of an explicit dockspace node node$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	imgui-master/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	imgui-master/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	imgui-master/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 5,   \/\/ Resize tabs when they don't fit$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	imgui-master/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 6,   \/\/ Add scroll buttons when tabs don't fit$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	imgui-master/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 22,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	imgui-master/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 2,   \/\/ Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListPopupButton	imgui-master/imgui.h	/^    ImGuiTabBarFlags_NoTabListPopupButton           = 1 << 3,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	imgui-master/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	imgui-master/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	imgui-master/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tabs to re-order them + New tabs are appended at the end of list$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	imgui-master/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 23   \/\/ FIXME: Settings are handled by the docking system, this only request the tab bar to mark settings dirty when reordering tabs$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarSortItem	imgui-master/imgui_internal.h	/^struct ImGuiTabBarSortItem$/;"	s
ImGuiTabItem	imgui-master/imgui_internal.h	/^    ImGuiTabItem()      { ID = Flags = 0; LastFrameVisible = LastFrameSelected = -1; Offset = Width = WidthContents = 0.0f; }$/;"	f	struct:ImGuiTabItem
ImGuiTabItem	imgui-master/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	imgui-master/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabItem()$/;"	t
ImGuiTabItemFlags_	imgui-master/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	imgui-master/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	imgui-master/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3    \/\/ Don't call PushID(tab->ID)\/PopID() on BeginTabItem()\/EndTabItem()$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	imgui-master/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SetSelected	imgui-master/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programatically make the tab selected when calling BeginTabItem()$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	imgui-master/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. Also: tab is selected on closure and closure is deferred by one frame to allow code to undo it without flicker.$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTextBuffer	imgui-master/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	imgui-master/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextEditCallback	imgui-master/imgui.h	/^typedef ImGuiInputTextCallback      ImGuiTextEditCallback;      \/\/ OBSOLETE in 1.63 (from Aug 2018): made the names consistent$/;"	t
ImGuiTextEditCallbackData	imgui-master/imgui.h	/^typedef ImGuiInputTextCallbackData  ImGuiTextEditCallbackData;$/;"	t
ImGuiTextFilter	imgui-master/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	imgui-master/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTreeNodeFlags	imgui-master/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode*(),CollapsingHeader()$/;"	t
ImGuiTreeNodeFlags_	imgui-master/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,   \/\/ Hit testing to allow subsequent widgets to overlap this one$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_AllowOverlapMode	imgui-master/imgui.h	/^    , ImGuiTreeNodeFlags_AllowOverlapMode = ImGuiTreeNodeFlags_AllowItemOverlap$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_CollapsingHeader	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Full colored frame (e.g. for CollapsingHeader)$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a convenience for leaf nodes).$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  \/\/ (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	imgui-master/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiWindow	imgui-master/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name)$/;"	f	class:ImGuiWindow
ImGuiWindow	imgui-master/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	imgui-master/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin*()$/;"	t
ImGuiWindowFlags_	imgui-master/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	imgui-master/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content every frame$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	imgui-master/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (even if ContentSize.x < Size.x)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	imgui-master/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  \/\/ Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	imgui-master/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (even if ContentSize.y < Size.y)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	imgui-master/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28   \/\/ Don't use! For internal use by BeginMenu()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	imgui-master/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by BeginChild()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	imgui-master/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	imgui-master/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	imgui-master/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by BeginPopupModal()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	imgui-master/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] Allow gamepad\/keyboard navigation to cross over parent border to this child (only use on child that have no scrolling!)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front when taking focus (e.g. clicking on it or programatically giving it focus)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by double-clicking on it$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitioning from hidden to visible state$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering test with pass through.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 19,  \/\/ No focusing toward this window with gamepad\/keyboard navigation (e.g. skipped by CTRL+TAB)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 18,  \/\/ No gamepad\/keyboard navigation within the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lower-right grip$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini file$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can still scroll with mouse or programatically)$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	imgui-master/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	imgui-master/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	imgui-master/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by BeginPopup()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	imgui-master/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by BeginTooltip()$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	imgui-master/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  \/\/ Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. When used in a tab\/docking context, tab is selected on closure and closure is deferred by one frame to allow code to cancel the closure (with a confirmation popup, etc.) without flicker.$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	imgui-master/imgui_internal.h	/^    ImGuiWindowSettings() { Name = NULL; ID = 0; Pos = Size = ImVec2(0,0); Collapsed = false; }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	imgui-master/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowTempData	imgui-master/imgui_internal.h	/^    ImGuiWindowTempData()$/;"	f	struct:ImGuiWindowTempData
ImGuiWindowTempData	imgui-master/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplAllegro5_CreateDeviceObjects	imgui-master/examples/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_CreateDeviceObjects()$/;"	f
ImGui_ImplAllegro5_GetClipboardText	imgui-master/examples/imgui_impl_allegro5.cpp	/^static const char* ImGui_ImplAllegro5_GetClipboardText(void*)$/;"	f	file:
ImGui_ImplAllegro5_Init	imgui-master/examples/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_Init(ALLEGRO_DISPLAY* display)$/;"	f
ImGui_ImplAllegro5_InvalidateDeviceObjects	imgui-master/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_InvalidateDeviceObjects()$/;"	f
ImGui_ImplAllegro5_NewFrame	imgui-master/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_NewFrame()$/;"	f
ImGui_ImplAllegro5_ProcessEvent	imgui-master/examples/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_ProcessEvent(ALLEGRO_EVENT *ev)$/;"	f
ImGui_ImplAllegro5_RenderDrawData	imgui-master/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_ImplAllegro5_SetClipboardText	imgui-master/examples/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_SetClipboardText(void*, const char* text)$/;"	f	file:
ImGui_ImplAllegro5_Shutdown	imgui-master/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_Shutdown()$/;"	f
ImGui_ImplAllegro5_UpdateMouseCursor	imgui-master/examples/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_UpdateMouseCursor()$/;"	f	file:
ImGui_ImplDX10_CreateDeviceObjects	imgui-master/examples/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_CreateDeviceObjects()$/;"	f
ImGui_ImplDX10_CreateFontsTexture	imgui-master/examples/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_CreateFontsTexture()$/;"	f	file:
ImGui_ImplDX10_Init	imgui-master/examples/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_Init(ID3D10Device* device)$/;"	f
ImGui_ImplDX10_InvalidateDeviceObjects	imgui-master/examples/imgui_impl_dx10.cpp	/^void    ImGui_ImplDX10_InvalidateDeviceObjects()$/;"	f
ImGui_ImplDX10_NewFrame	imgui-master/examples/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_NewFrame()$/;"	f
ImGui_ImplDX10_RenderDrawData	imgui-master/examples/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_ImplDX10_Shutdown	imgui-master/examples/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_Shutdown()$/;"	f
ImGui_ImplDX11_CreateDeviceObjects	imgui-master/examples/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_CreateDeviceObjects()$/;"	f
ImGui_ImplDX11_CreateFontsTexture	imgui-master/examples/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_CreateFontsTexture()$/;"	f	file:
ImGui_ImplDX11_Init	imgui-master/examples/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_Init(ID3D11Device* device, ID3D11DeviceContext* device_context)$/;"	f
ImGui_ImplDX11_InvalidateDeviceObjects	imgui-master/examples/imgui_impl_dx11.cpp	/^void    ImGui_ImplDX11_InvalidateDeviceObjects()$/;"	f
ImGui_ImplDX11_NewFrame	imgui-master/examples/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_NewFrame()$/;"	f
ImGui_ImplDX11_RenderDrawData	imgui-master/examples/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_ImplDX11_Shutdown	imgui-master/examples/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_Shutdown()$/;"	f
ImGui_ImplDX12_CreateDeviceObjects	imgui-master/examples/imgui_impl_dx12.cpp	/^bool    ImGui_ImplDX12_CreateDeviceObjects()$/;"	f
ImGui_ImplDX12_CreateFontsTexture	imgui-master/examples/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_CreateFontsTexture()$/;"	f	file:
ImGui_ImplDX12_Init	imgui-master/examples/imgui_impl_dx12.cpp	/^bool ImGui_ImplDX12_Init(ID3D12Device* device, int num_frames_in_flight, DXGI_FORMAT rtv_format,$/;"	f
ImGui_ImplDX12_InvalidateDeviceObjects	imgui-master/examples/imgui_impl_dx12.cpp	/^void    ImGui_ImplDX12_InvalidateDeviceObjects()$/;"	f
ImGui_ImplDX12_NewFrame	imgui-master/examples/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_NewFrame()$/;"	f
ImGui_ImplDX12_RenderDrawData	imgui-master/examples/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_RenderDrawData(ImDrawData* draw_data, ID3D12GraphicsCommandList* ctx)$/;"	f
ImGui_ImplDX12_Shutdown	imgui-master/examples/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_Shutdown()$/;"	f
ImGui_ImplDX9_CreateDeviceObjects	imgui-master/examples/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_CreateDeviceObjects()$/;"	f
ImGui_ImplDX9_CreateFontsTexture	imgui-master/examples/imgui_impl_dx9.cpp	/^static bool ImGui_ImplDX9_CreateFontsTexture()$/;"	f	file:
ImGui_ImplDX9_Init	imgui-master/examples/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_Init(IDirect3DDevice9* device)$/;"	f
ImGui_ImplDX9_InvalidateDeviceObjects	imgui-master/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_InvalidateDeviceObjects()$/;"	f
ImGui_ImplDX9_NewFrame	imgui-master/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_NewFrame()$/;"	f
ImGui_ImplDX9_RenderDrawData	imgui-master/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_ImplDX9_Shutdown	imgui-master/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_Shutdown()$/;"	f
ImGui_ImplFreeGLUT_Init	imgui-master/examples/imgui_impl_freeglut.cpp	/^bool ImGui_ImplFreeGLUT_Init()$/;"	f
ImGui_ImplFreeGLUT_InstallFuncs	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_InstallFuncs()$/;"	f
ImGui_ImplFreeGLUT_KeyboardFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_KeyboardFunc(unsigned char c, int x, int y)$/;"	f
ImGui_ImplFreeGLUT_KeyboardUpFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_KeyboardUpFunc(unsigned char c, int x, int y)$/;"	f
ImGui_ImplFreeGLUT_MotionFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_MotionFunc(int x, int y)$/;"	f
ImGui_ImplFreeGLUT_MouseFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_MouseFunc(int glut_button, int state, int x, int y)$/;"	f
ImGui_ImplFreeGLUT_MouseWheelFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_MouseWheelFunc(int button, int dir, int x, int y)$/;"	f
ImGui_ImplFreeGLUT_NewFrame	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_NewFrame()$/;"	f
ImGui_ImplFreeGLUT_ReshapeFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_ReshapeFunc(int w, int h)$/;"	f
ImGui_ImplFreeGLUT_Shutdown	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_Shutdown()$/;"	f
ImGui_ImplFreeGLUT_SpecialFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_SpecialFunc(int key, int x, int y)$/;"	f
ImGui_ImplFreeGLUT_SpecialUpFunc	imgui-master/examples/imgui_impl_freeglut.cpp	/^void ImGui_ImplFreeGLUT_SpecialUpFunc(int key, int x, int y)$/;"	f
ImGui_ImplFreeGLUT_UpdateKeyboardMods	imgui-master/examples/imgui_impl_freeglut.cpp	/^static void ImGui_ImplFreeGLUT_UpdateKeyboardMods()$/;"	f	file:
ImGui_ImplGlfw_CharCallback	imgui-master/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f
ImGui_ImplGlfw_GetClipboardText	imgui-master/examples/imgui_impl_glfw.cpp	/^static const char* ImGui_ImplGlfw_GetClipboardText(void* user_data)$/;"	f	file:
ImGui_ImplGlfw_Init	imgui-master/examples/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client_api)$/;"	f	file:
ImGui_ImplGlfw_InitForOpenGL	imgui-master/examples/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f
ImGui_ImplGlfw_InitForVulkan	imgui-master/examples/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f
ImGui_ImplGlfw_KeyCallback	imgui-master/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f
ImGui_ImplGlfw_MouseButtonCallback	imgui-master/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f
ImGui_ImplGlfw_NewFrame	imgui-master/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f
ImGui_ImplGlfw_ScrollCallback	imgui-master/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f
ImGui_ImplGlfw_SetClipboardText	imgui-master/examples/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetClipboardText(void* user_data, const char* text)$/;"	f	file:
ImGui_ImplGlfw_Shutdown	imgui-master/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f
ImGui_ImplGlfw_UpdateMouseCursor	imgui-master/examples/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	file:
ImGui_ImplGlfw_UpdateMousePosAndButtons	imgui-master/examples/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMousePosAndButtons()$/;"	f	file:
ImGui_ImplOpenGL2_CreateDeviceObjects	imgui-master/examples/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_CreateDeviceObjects()$/;"	f
ImGui_ImplOpenGL2_CreateFontsTexture	imgui-master/examples/imgui_impl_opengl2.cpp	/^bool ImGui_ImplOpenGL2_CreateFontsTexture()$/;"	f
ImGui_ImplOpenGL2_DestroyDeviceObjects	imgui-master/examples/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_DestroyDeviceObjects()$/;"	f
ImGui_ImplOpenGL2_DestroyFontsTexture	imgui-master/examples/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_DestroyFontsTexture()$/;"	f
ImGui_ImplOpenGL2_Init	imgui-master/examples/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_Init()$/;"	f
ImGui_ImplOpenGL2_NewFrame	imgui-master/examples/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_NewFrame()$/;"	f
ImGui_ImplOpenGL2_RenderDrawData	imgui-master/examples/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_ImplOpenGL2_Shutdown	imgui-master/examples/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_Shutdown()$/;"	f
ImGui_ImplOpenGL3_CreateDeviceObjects	imgui-master/examples/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f
ImGui_ImplOpenGL3_CreateFontsTexture	imgui-master/examples/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f
ImGui_ImplOpenGL3_DestroyDeviceObjects	imgui-master/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f
ImGui_ImplOpenGL3_DestroyFontsTexture	imgui-master/examples/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f
ImGui_ImplOpenGL3_Init	imgui-master/examples/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f
ImGui_ImplOpenGL3_NewFrame	imgui-master/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f
ImGui_ImplOpenGL3_RenderDrawData	imgui-master/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_ImplOpenGL3_Shutdown	imgui-master/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f
ImGui_ImplSDL2_GetClipboardText	imgui-master/examples/imgui_impl_sdl.cpp	/^static const char* ImGui_ImplSDL2_GetClipboardText(void*)$/;"	f	file:
ImGui_ImplSDL2_Init	imgui-master/examples/imgui_impl_sdl.cpp	/^static bool ImGui_ImplSDL2_Init(SDL_Window* window)$/;"	f	file:
ImGui_ImplSDL2_InitForOpenGL	imgui-master/examples/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f
ImGui_ImplSDL2_InitForVulkan	imgui-master/examples/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window)$/;"	f
ImGui_ImplSDL2_NewFrame	imgui-master/examples/imgui_impl_sdl.cpp	/^void ImGui_ImplSDL2_NewFrame(SDL_Window* window)$/;"	f
ImGui_ImplSDL2_ProcessEvent	imgui-master/examples/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_ProcessEvent(const SDL_Event* event)$/;"	f
ImGui_ImplSDL2_SetClipboardText	imgui-master/examples/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_SetClipboardText(void*, const char* text)$/;"	f	file:
ImGui_ImplSDL2_Shutdown	imgui-master/examples/imgui_impl_sdl.cpp	/^void ImGui_ImplSDL2_Shutdown()$/;"	f
ImGui_ImplSDL2_UpdateMouseCursor	imgui-master/examples/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateMouseCursor()$/;"	f	file:
ImGui_ImplSDL2_UpdateMousePosAndButtons	imgui-master/examples/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateMousePosAndButtons()$/;"	f	file:
ImGui_ImplVulkanH_CreateWindowDataCommandBuffers	imgui-master/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowDataCommandBuffers(VkPhysicalDevice physical_device, VkDevice device, uint32_t queue_family, ImGui_ImplVulkanH_WindowData* wd, const VkAllocationCallbacks* allocator)$/;"	f
ImGui_ImplVulkanH_CreateWindowDataSwapChainAndFramebuffer	imgui-master/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowDataSwapChainAndFramebuffer(VkPhysicalDevice physical_device, VkDevice device, ImGui_ImplVulkanH_WindowData* wd, const VkAllocationCallbacks* allocator, int w, int h)$/;"	f
ImGui_ImplVulkanH_DestroyWindowData	imgui-master/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyWindowData(VkInstance instance, VkDevice device, ImGui_ImplVulkanH_WindowData* wd, const VkAllocationCallbacks* allocator)$/;"	f
ImGui_ImplVulkanH_FrameData	imgui-master/examples/imgui_impl_vulkan.cpp	/^ImGui_ImplVulkanH_FrameData::ImGui_ImplVulkanH_FrameData()$/;"	f	class:ImGui_ImplVulkanH_FrameData
ImGui_ImplVulkanH_FrameData	imgui-master/examples/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_FrameData$/;"	s
ImGui_ImplVulkanH_GetMinImageCountFromPresentMode	imgui-master/examples/imgui_impl_vulkan.cpp	/^int ImGui_ImplVulkanH_GetMinImageCountFromPresentMode(VkPresentModeKHR present_mode)$/;"	f
ImGui_ImplVulkanH_SelectPresentMode	imgui-master/examples/imgui_impl_vulkan.cpp	/^VkPresentModeKHR ImGui_ImplVulkanH_SelectPresentMode(VkPhysicalDevice physical_device, VkSurfaceKHR surface, const VkPresentModeKHR* request_modes, int request_modes_count)$/;"	f
ImGui_ImplVulkanH_SelectSurfaceFormat	imgui-master/examples/imgui_impl_vulkan.cpp	/^VkSurfaceFormatKHR ImGui_ImplVulkanH_SelectSurfaceFormat(VkPhysicalDevice physical_device, VkSurfaceKHR surface, const VkFormat* request_formats, int request_formats_count, VkColorSpaceKHR request_color_space)$/;"	f
ImGui_ImplVulkanH_WindowData	imgui-master/examples/imgui_impl_vulkan.cpp	/^ImGui_ImplVulkanH_WindowData::ImGui_ImplVulkanH_WindowData()$/;"	f	class:ImGui_ImplVulkanH_WindowData
ImGui_ImplVulkanH_WindowData	imgui-master/examples/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_WindowData$/;"	s
ImGui_ImplVulkan_CreateDeviceObjects	imgui-master/examples/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateDeviceObjects()$/;"	f
ImGui_ImplVulkan_CreateFontsTexture	imgui-master/examples/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateFontsTexture(VkCommandBuffer command_buffer)$/;"	f
ImGui_ImplVulkan_Init	imgui-master/examples/imgui_impl_vulkan.cpp	/^bool    ImGui_ImplVulkan_Init(ImGui_ImplVulkan_InitInfo* info, VkRenderPass render_pass)$/;"	f
ImGui_ImplVulkan_InitInfo	imgui-master/examples/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkan_InitInfo$/;"	s
ImGui_ImplVulkan_InvalidateDeviceObjects	imgui-master/examples/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_InvalidateDeviceObjects()$/;"	f
ImGui_ImplVulkan_InvalidateFontUploadObjects	imgui-master/examples/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_InvalidateFontUploadObjects()$/;"	f
ImGui_ImplVulkan_MemoryType	imgui-master/examples/imgui_impl_vulkan.cpp	/^static uint32_t ImGui_ImplVulkan_MemoryType(VkMemoryPropertyFlags properties, uint32_t type_bits)$/;"	f	file:
ImGui_ImplVulkan_NewFrame	imgui-master/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_NewFrame()$/;"	f
ImGui_ImplVulkan_RenderDrawData	imgui-master/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_RenderDrawData(ImDrawData* draw_data, VkCommandBuffer command_buffer)$/;"	f
ImGui_ImplVulkan_Shutdown	imgui-master/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_Shutdown()$/;"	f
ImGui_ImplWin32_Init	imgui-master/examples/imgui_impl_win32.cpp	/^bool    ImGui_ImplWin32_Init(void* hwnd)$/;"	f
ImGui_ImplWin32_NewFrame	imgui-master/examples/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_NewFrame()$/;"	f
ImGui_ImplWin32_Shutdown	imgui-master/examples/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_Shutdown()$/;"	f
ImGui_ImplWin32_UpdateMouseCursor	imgui-master/examples/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_UpdateMouseCursor()$/;"	f	file:
ImGui_ImplWin32_UpdateMousePos	imgui-master/examples/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateMousePos()$/;"	f	file:
ImGui_ImplWin32_WndProcHandler	imgui-master/examples/imgui_impl_win32.cpp	/^IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f
ImGui_Marmalade_CharCallback	imgui-master/examples/imgui_impl_marmalade.cpp	/^int32 ImGui_Marmalade_CharCallback(void* system_data, void* user_data)$/;"	f
ImGui_Marmalade_CreateDeviceObjects	imgui-master/examples/imgui_impl_marmalade.cpp	/^bool ImGui_Marmalade_CreateDeviceObjects()$/;"	f
ImGui_Marmalade_GetClipboardText	imgui-master/examples/imgui_impl_marmalade.cpp	/^static const char* ImGui_Marmalade_GetClipboardText(void* \/*user_data*\/)$/;"	f	file:
ImGui_Marmalade_Init	imgui-master/examples/imgui_impl_marmalade.cpp	/^bool    ImGui_Marmalade_Init(bool install_callbacks)$/;"	f
ImGui_Marmalade_InvalidateDeviceObjects	imgui-master/examples/imgui_impl_marmalade.cpp	/^void    ImGui_Marmalade_InvalidateDeviceObjects()$/;"	f
ImGui_Marmalade_KeyCallback	imgui-master/examples/imgui_impl_marmalade.cpp	/^int32 ImGui_Marmalade_KeyCallback(void* system_data, void* user_data)$/;"	f
ImGui_Marmalade_NewFrame	imgui-master/examples/imgui_impl_marmalade.cpp	/^void ImGui_Marmalade_NewFrame()$/;"	f
ImGui_Marmalade_PointerButtonEventCallback	imgui-master/examples/imgui_impl_marmalade.cpp	/^int32 ImGui_Marmalade_PointerButtonEventCallback(void* system_data, void* user_data)$/;"	f
ImGui_Marmalade_RenderDrawData	imgui-master/examples/imgui_impl_marmalade.cpp	/^void ImGui_Marmalade_RenderDrawData(ImDrawData* draw_data)$/;"	f
ImGui_Marmalade_SetClipboardText	imgui-master/examples/imgui_impl_marmalade.cpp	/^static void ImGui_Marmalade_SetClipboardText(void* \/*user_data*\/, const char* text)$/;"	f	file:
ImGui_Marmalade_Shutdown	imgui-master/examples/imgui_impl_marmalade.cpp	/^void ImGui_Marmalade_Shutdown()$/;"	f
ImHash	imgui-master/imgui.cpp	/^ImU32 ImHash(const void* data, int data_size, ImU32 seed)$/;"	f
ImInvLength	imgui-master/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = lhs.x*lhs.x + lhs.y*lhs.y; if (d > 0.0f) return 1.0f \/ ImSqrt(d); return fail_value; }$/;"	f
ImIsPowerOfTwo	imgui-master/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f
ImLengthSqr	imgui-master/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return lhs.x*lhs.x + lhs.y*lhs.y; }$/;"	f
ImLengthSqr	imgui-master/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return lhs.x*lhs.x + lhs.y*lhs.y + lhs.z*lhs.z + lhs.w*lhs.w; }$/;"	f
ImLerp	imgui-master/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(a.x + (b.x - a.x) * t.x, a.y + (b.y - a.y) * t.y); }$/;"	f
ImLerp	imgui-master/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t); }$/;"	f
ImLerp	imgui-master/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t, a.w + (b.w - a.w) * t); }$/;"	f
ImLerp	imgui-master/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a + (b - a) * t); }$/;"	f
ImLineClosestPoint	imgui-master/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f
ImLinearSweep	imgui-master/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < target) return ImMin(current + speed, target); if (current > target) return ImMax(current - speed, target); return current; }$/;"	f
ImMax	imgui-master/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x >= rhs.x ? lhs.x : rhs.x, lhs.y >= rhs.y ? lhs.y : rhs.y); }$/;"	f
ImMax	imgui-master/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= rhs ? lhs : rhs; }$/;"	f
ImMin	imgui-master/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x < rhs.x ? lhs.x : rhs.x, lhs.y < rhs.y ? lhs.y : rhs.y); }$/;"	f
ImMin	imgui-master/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < rhs ? lhs : rhs; }$/;"	f
ImMul	imgui-master/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x * rhs.x, lhs.y * rhs.y); }$/;"	f
ImNewDummy	imgui-master/imgui.h	/^struct ImNewDummy {};$/;"	s
ImParseFormatFindEnd	imgui-master/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f
ImParseFormatFindStart	imgui-master/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f
ImParseFormatPrecision	imgui-master/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f
ImParseFormatTrimDecorations	imgui-master/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, int buf_size)$/;"	f
ImPool	imgui-master/imgui_internal.h	/^    ImPool()    { FreeIdx = 0; }$/;"	f	struct:ImPool
ImPool	imgui-master/imgui_internal.h	/^struct IMGUI_API ImPool$/;"	s
ImPoolIdx	imgui-master/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t
ImPow	imgui-master/imgui_internal.h	/^static inline double ImPow(double x, double y)                                  { return pow(x, y); }$/;"	f
ImPow	imgui-master/imgui_internal.h	/^static inline float  ImPow(float x, float y)                                    { return powf(x, y); }$/;"	f
ImQsort	imgui-master/imgui_internal.h	/^#define ImQsort /;"	d
ImRect	imgui-master/imgui_internal.h	/^    ImRect()                                        : Min(FLT_MAX,FLT_MAX), Max(-FLT_MAX,-FLT_MAX)  {}$/;"	f	struct:ImRect
ImRect	imgui-master/imgui_internal.h	/^    ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)                            {}$/;"	f	struct:ImRect
ImRect	imgui-master/imgui_internal.h	/^    ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)                  {}$/;"	f	struct:ImRect
ImRect	imgui-master/imgui_internal.h	/^    ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)                      {}$/;"	f	struct:ImRect
ImRect	imgui-master/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	imgui-master/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(v.x * cos_a - v.y * sin_a, v.x * sin_a + v.y * cos_a); }$/;"	f
ImS32	imgui-master/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t
ImS64	imgui-master/imgui.h	/^typedef int64_t             ImS64;  \/\/ 64-bit signed integer (pre C++11)$/;"	t
ImS64	imgui-master/imgui.h	/^typedef signed   __int64    ImS64;  \/\/ 64-bit signed integer (pre and post C++11 with Visual Studio)$/;"	t
ImS64	imgui-master/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer (post C++11)$/;"	t
ImSaturate	imgui-master/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0.0f) ? 0.0f : (f > 1.0f) ? 1.0f : f; }$/;"	f
ImSin	imgui-master/imgui_internal.h	/^static inline float  ImSin(float x)                                             { return sinf(x); }$/;"	f
ImSqrt	imgui-master/imgui_internal.h	/^static inline float  ImSqrt(float x)                                            { return sqrtf(x); }$/;"	f
ImStrTrimBlanks	imgui-master/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f
ImStrbolW	imgui-master/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginning-of-line$/;"	f
ImStrchrRange	imgui-master/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f
ImStrdup	imgui-master/imgui.cpp	/^char* ImStrdup(const char *str)$/;"	f
ImStreolRange	imgui-master/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f
ImStricmp	imgui-master/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f
ImStristr	imgui-master/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end)$/;"	f
ImStrlenW	imgui-master/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f
ImStrncpy	imgui-master/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f
ImStrnicmp	imgui-master/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f
ImSwap	imgui-master/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a = b; b = tmp; }$/;"	f
ImTextCharFromUtf8	imgui-master/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f
ImTextCharToUtf8	imgui-master/imgui.cpp	/^static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)$/;"	f	file:
ImTextCountCharsFromUtf8	imgui-master/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f
ImTextCountUtf8BytesFromChar	imgui-master/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f
ImTextCountUtf8BytesFromChar	imgui-master/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	file:
ImTextCountUtf8BytesFromStr	imgui-master/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f
ImTextStrFromUtf8	imgui-master/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)$/;"	f
ImTextStrToUtf8	imgui-master/imgui.cpp	/^int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f
ImTextureID	imgui-master/imgui.h	/^typedef void* ImTextureID;          \/\/ User data to identify a texture (this is whatever to you want it to be! read the FAQ about ImTextureID in imgui.cpp)$/;"	t
ImTriangleBarycentricCoords	imgui-master/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p, float& out_u, float& out_v, float& out_w)$/;"	f
ImTriangleClosestPoint	imgui-master/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f
ImTriangleContainsPoint	imgui-master/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f
ImU32	imgui-master/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed colors)$/;"	t
ImU64	imgui-master/imgui.h	/^typedef uint64_t            ImU64;  \/\/ 64-bit unsigned integer (pre C++11)$/;"	t
ImU64	imgui-master/imgui.h	/^typedef unsigned __int64    ImU64;  \/\/ 64-bit unsigned integer (pre and post C++11 with Visual Studio)$/;"	t
ImU64	imgui-master/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer (post C++11)$/;"	t
ImUpperPowerOfTwo	imgui-master/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v >> 4; v |= v >> 8; v |= v >> 16; v++; return v; }$/;"	f
ImVec1	imgui-master/imgui_internal.h	/^    ImVec1()            { x = 0.0f; }$/;"	f	struct:ImVec1
ImVec1	imgui-master/imgui_internal.h	/^    ImVec1(float _x)    { x = _x; }$/;"	f	struct:ImVec1
ImVec1	imgui-master/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	imgui-master/imgui.h	/^    ImVec2()  { x = y = 0.0f; }$/;"	f	struct:ImVec2
ImVec2	imgui-master/imgui.h	/^    ImVec2(float _x, float _y) { x = _x; y = _y; }$/;"	f	struct:ImVec2
ImVec2	imgui-master/imgui.h	/^struct ImVec2$/;"	s
ImVec4	imgui-master/imgui.h	/^    ImVec4()  { x = y = z = w = 0.0f; }$/;"	f	struct:ImVec4
ImVec4	imgui-master/imgui.h	/^    ImVec4(float _x, float _y, float _z, float _w) { x = _x; y = _y; z = _z; w = _w; }$/;"	f	struct:ImVec4
ImVec4	imgui-master/imgui.h	/^struct ImVec4$/;"	s
ImVector	imgui-master/imgui.h	/^    inline ImVector()           { Size = Capacity = 0; Data = NULL; }$/;"	f	class:ImVector
ImVector	imgui-master/imgui.h	/^    inline ImVector(const ImVector<T>& src)                     { Size = Capacity = 0; Data = NULL; operator=(src); }$/;"	f	class:ImVector
ImVector	imgui-master/imgui.h	/^class ImVector$/;"	c
ImWchar	imgui-master/imgui.h	/^typedef unsigned short ImWchar;     \/\/ Character for keyboard input\/display$/;"	t
Image	imgui-master/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)$/;"	f	class:ImGui
ImageAcquiredSemaphore	imgui-master/examples/imgui_impl_vulkan.h	/^    VkSemaphore         ImageAcquiredSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameData
ImageButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)$/;"	f	class:ImGui
ImeSetInputScreenPosFn	imgui-master/imgui.h	/^    void        (*ImeSetInputScreenPosFn)(int x, int y);$/;"	m	struct:ImGuiIO
ImeSetInputScreenPosFn_DefaultImpl	imgui-master/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)$/;"	f	file:
ImeSetInputScreenPosFn_DefaultImpl	imgui-master/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}$/;"	f	file:
ImeWindowHandle	imgui-master/imgui.h	/^    void*       ImeWindowHandle;                \/\/ = NULL           \/\/ (Windows) Set this to your HWND to get automatic IME cursor positioning.$/;"	m	struct:ImGuiIO
Indent	imgui-master/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui
Indent	imgui-master/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left of window (increased by TreePush\/TreePop, etc.)$/;"	m	struct:ImGuiWindowTempData
IndentSpacing	imgui-master/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).$/;"	m	struct:ImGuiStyle
Index	imgui-master/imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiTabBarSortItem
IndexAdvanceX	imgui-master/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/              \/\/ Sparse. Glyphs->AdvanceX in a directly indexable way (more cache-friendly, for CalcTextSize functions which are often bottleneck in large UI).$/;"	m	struct:ImFont
IndexBuffer	imgui-master/examples/imgui_impl_vulkan.cpp	/^    VkBuffer        IndexBuffer;$/;"	m	struct:FrameDataForRender	file:
IndexBufferMemory	imgui-master/examples/imgui_impl_vulkan.cpp	/^    VkDeviceMemory  IndexBufferMemory;$/;"	m	struct:FrameDataForRender	file:
IndexBufferSize	imgui-master/examples/imgui_impl_dx12.cpp	/^    int IndexBufferSize;$/;"	m	struct:FrameResources	file:
IndexBufferSize	imgui-master/examples/imgui_impl_vulkan.cpp	/^    VkDeviceSize    IndexBufferSize;$/;"	m	struct:FrameDataForRender	file:
IndexLookup	imgui-master/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/              \/\/ Sparse. Index glyphs by Unicode code-point.$/;"	m	struct:ImFont
Info	imgui-master/misc/freetype/imgui_freetype.cpp	/^        FontInfo        Info;               \/\/ Font descriptor of the current font.$/;"	m	struct:__anon1::FreeTypeFont	file:
IniFilename	imgui-master/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file. Set NULL to disable automatic .ini loading\/saving, if e.g. you want to manually load\/save from memory.$/;"	m	struct:ImGuiIO
IniSavingRate	imgui-master/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between saving positions\/sizes to .ini file, in seconds.$/;"	m	struct:ImGuiIO
Init	imgui-master/misc/freetype/imgui_freetype.cpp	/^    bool FreeTypeFont::Init(const ImFontConfig& cfg, unsigned int extra_user_flags)$/;"	f	class:__anon1::FreeTypeFont
InitialText	imgui-master/imgui_internal.h	/^    ImVector<char>          InitialText;            \/\/ backup of end-user buffer at the time of focus (in UTF-8, unaltered)$/;"	m	struct:ImGuiInputTextState
Initialize	imgui-master/imgui.cpp	/^void ImGui::Initialize(ImGuiContext* context)$/;"	f	class:ImGui
Initialized	imgui-master/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext
InnerClipRect	imgui-master/imgui_internal.h	/^    ImRect                  InnerMainRect, InnerClipRect;$/;"	m	struct:ImGuiWindow
InnerDir	imgui-master/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	file:
InnerMainRect	imgui-master/imgui_internal.h	/^    ImRect                  InnerMainRect, InnerClipRect;$/;"	m	struct:ImGuiWindow
InputBuf	imgui-master/imgui.h	/^    char                InputBuf[256];$/;"	m	struct:ImGuiTextFilter
InputBuf	imgui-master/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	file:
InputCharacters	imgui-master/imgui.h	/^    ImWchar     InputCharacters[16+1];          \/\/ List of characters input (translated by user from keypress+keyboard state). Fill using AddInputCharacter() helper.$/;"	m	struct:ImGuiIO
InputDouble	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat2	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat2	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat3	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat3	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat4	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputFloat4	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputInt	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputInt2	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputInt3	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputInt4	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputScalar	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* data_ptr, const void* step, const void* step_fast, const char* format, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputScalarAsWidgetReplacement	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputScalarAsWidgetReplacement(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_type, void* data_ptr, const char* format)$/;"	f	class:ImGui
InputScalarN	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* step, const void* step_fast, const char* format, ImGuiInputTextFlags extra_flags)$/;"	f	class:ImGui
InputText	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	class:ImGui
InputText	imgui-master/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputText(const char* label, std::string* str, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	class:ImGui
InputTextCalcTextLenAndLineCount	imgui-master/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	file:
InputTextCalcTextSizeW	imgui-master/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)$/;"	f	file:
InputTextCallback	imgui-master/misc/cpp/imgui_stdlib.cpp	/^static int InputTextCallback(ImGuiInputTextCallbackData* data)$/;"	f	file:
InputTextCallback_UserData	imgui-master/misc/cpp/imgui_stdlib.cpp	/^struct InputTextCallback_UserData$/;"	s	file:
InputTextEx	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* callback_user_data)$/;"	f	class:ImGui
InputTextFilterCharacter	imgui-master/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	file:
InputTextMultiline	imgui-master/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	class:ImGui
InputTextMultiline	imgui-master/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputTextMultiline(const char* label, std::string* str, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)$/;"	f	class:ImGui
InputTextPasswordFont	imgui-master/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext
InputTextState	imgui-master/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext
InsertChars	imgui-master/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)$/;"	f	class:ImGuiInputTextCallbackData
Instance	imgui-master/examples/imgui_impl_vulkan.h	/^    VkInstance                      Instance;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
InvisibleButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)$/;"	f	class:ImGui
IsActive	imgui-master/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter
IsAnyItemActive	imgui-master/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui
IsAnyItemFocused	imgui-master/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui
IsAnyItemHovered	imgui-master/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui
IsAnyMouseDown	imgui-master/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui
IsAnyWindowFocused	imgui-master/imgui.h	/^    static inline bool  IsAnyWindowFocused()                  { return IsWindowFocused(ImGuiFocusedFlags_AnyWindow); }$/;"	f	namespace:ImGui
IsAnyWindowHovered	imgui-master/imgui.h	/^    static inline bool  IsAnyWindowHovered()                  { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }$/;"	f	namespace:ImGui
IsBeingResized	imgui-master/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiColumnsSet
IsBuilt	imgui-master/imgui.h	/^    bool                        IsBuilt()                   { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }$/;"	f	struct:ImFontAtlas
IsClippedEx	imgui-master/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id, bool clip_even_when_logged)$/;"	f	class:ImGui
IsDataType	imgui-master/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataType) == 0; }$/;"	f	struct:ImGuiPayload
IsDelivery	imgui-master/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload
IsDragDropPayloadBeingAccepted	imgui-master/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui
IsFirstFrame	imgui-master/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiColumnsSet
IsInverted	imgui-master/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect
IsItemActive	imgui-master/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui
IsItemClicked	imgui-master/imgui.cpp	/^bool ImGui::IsItemClicked(int mouse_button)$/;"	f	class:ImGui
IsItemDeactivated	imgui-master/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui
IsItemDeactivatedAfterChange	imgui-master/imgui.h	/^    static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdit(); }$/;"	f	namespace:ImGui
IsItemDeactivatedAfterEdit	imgui-master/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui
IsItemEdited	imgui-master/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui
IsItemFocused	imgui-master/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui
IsItemHovered	imgui-master/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui
IsItemHoveredRect	imgui-master/imgui.h	/^    static inline bool  IsItemHoveredRect()                   { return IsItemHovered(ImGuiHoveredFlags_RectOnly); }$/;"	f	namespace:ImGui
IsItemVisible	imgui-master/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui
IsKeyDown	imgui-master/imgui.cpp	/^bool ImGui::IsKeyDown(int user_key_index)$/;"	f	class:ImGui
IsKeyPressed	imgui-master/imgui.cpp	/^bool ImGui::IsKeyPressed(int user_key_index, bool repeat)$/;"	f	class:ImGui
IsKeyPressedMap	imgui-master/imgui_internal.h	/^    inline bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true)           { const int key_index = GImGui->IO.KeyMap[key]; return (key_index >= 0) ? IsKeyPressed(key_index, repeat) : false; }$/;"	f	namespace:ImGui
IsKeyReleased	imgui-master/imgui.cpp	/^bool ImGui::IsKeyReleased(int user_key_index)$/;"	f	class:ImGui
IsLoaded	imgui-master/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }$/;"	f	struct:ImFont
IsMouseClicked	imgui-master/imgui.cpp	/^bool ImGui::IsMouseClicked(int button, bool repeat)$/;"	f	class:ImGui
IsMouseDoubleClicked	imgui-master/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(int button)$/;"	f	class:ImGui
IsMouseDown	imgui-master/imgui.cpp	/^bool ImGui::IsMouseDown(int button)$/;"	f	class:ImGui
IsMouseDragging	imgui-master/imgui.cpp	/^bool ImGui::IsMouseDragging(int button, float lock_threshold)$/;"	f	class:ImGui
IsMouseHoveringAnyWindow	imgui-master/imgui.h	/^    static inline bool  IsMouseHoveringAnyWindow()            { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }$/;"	f	namespace:ImGui
IsMouseHoveringRect	imgui-master/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui
IsMouseHoveringWindow	imgui-master/imgui.h	/^    static inline bool  IsMouseHoveringWindow()               { return IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem); }$/;"	f	namespace:ImGui
IsMousePosValid	imgui-master/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui
IsMouseReleased	imgui-master/imgui.cpp	/^bool ImGui::IsMouseReleased(int button)$/;"	f	class:ImGui
IsNavInputDown	imgui-master/imgui_internal.h	/^    inline bool             IsNavInputDown(ImGuiNavInput n)                             { return GImGui->IO.NavInputs[n] > 0.0f; }$/;"	f	namespace:ImGui
IsNavInputPressed	imgui-master/imgui_internal.h	/^    inline bool             IsNavInputPressed(ImGuiNavInput n, ImGuiInputReadMode mode) { return GetNavInputAmount(n, mode) > 0.0f; }$/;"	f	namespace:ImGui
IsNavInputPressedAnyOfTwo	imgui-master/imgui_internal.h	/^    inline bool             IsNavInputPressedAnyOfTwo(ImGuiNavInput n1, ImGuiNavInput n2, ImGuiInputReadMode mode) { return (GetNavInputAmount(n1, mode) + GetNavInputAmount(n2, mode)) > 0.0f; }$/;"	f	namespace:ImGui
IsPacked	imgui-master/imgui.h	/^        bool IsPacked() const   { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlas::CustomRect
IsPopupOpen	imgui-master/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id)$/;"	f	class:ImGui
IsPopupOpen	imgui-master/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id)$/;"	f	class:ImGui
IsPosHoveringAnyWindow	imgui-master/imgui.h	/^    static inline bool  IsPosHoveringAnyWindow(const ImVec2&) { IM_ASSERT(0); return false; } \/\/ This was misleading and partly broken. You probably want to use the ImGui::GetIO().WantCaptureMouse flag instead.$/;"	f	namespace:ImGui
IsPreview	imgui-master/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload
IsRectVisible	imgui-master/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui
IsRectVisible	imgui-master/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui
IsRootWindowFocused	imgui-master/imgui.h	/^    static inline bool  IsRootWindowFocused()                 { return IsWindowFocused(ImGuiFocusedFlags_RootWindow); }$/;"	f	namespace:ImGui
IsRootWindowOrAnyChildFocused	imgui-master/imgui.h	/^    static inline bool  IsRootWindowOrAnyChildFocused()       { return IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows); }$/;"	f	namespace:ImGui
IsRootWindowOrAnyChildHovered	imgui-master/imgui.h	/^    static inline bool  IsRootWindowOrAnyChildHovered()       { return IsWindowHovered(ImGuiHoveredFlags_RootAndChildWindows); }$/;"	f	namespace:ImGui
IsWindowActiveAndVisible	imgui-master/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	file:
IsWindowAppearing	imgui-master/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui
IsWindowChildOf	imgui-master/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui
IsWindowCollapsed	imgui-master/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui
IsWindowContentHoverable	imgui-master/imgui.cpp	/^static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	file:
IsWindowFocused	imgui-master/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui
IsWindowHovered	imgui-master/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui
IsWindowNavFocusable	imgui-master/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui
ItemAdd	imgui-master/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg)$/;"	f	class:ImGui
ItemFlags	imgui-master/imgui_internal.h	/^    ImGuiItemFlags          ItemFlags;              \/\/ == ItemFlagsStack.back() [empty == ImGuiItemFlags_Default]$/;"	m	struct:ImGuiWindowTempData
ItemFlagsStack	imgui-master/imgui_internal.h	/^    ImVector<ImGuiItemFlags>ItemFlagsStack;$/;"	m	struct:ImGuiWindowTempData
ItemHoverable	imgui-master/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui
ItemInnerSpacing	imgui-master/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).$/;"	m	struct:ImGuiStyle
ItemSize	imgui-master/imgui.cpp	/^void ImGui::ItemSize(const ImRect& bb, float text_offset_y)$/;"	f	class:ImGui
ItemSize	imgui-master/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_offset_y)$/;"	f	class:ImGui
ItemSpacing	imgui-master/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets\/lines.$/;"	m	struct:ImGuiStyle
ItemWidth	imgui-master/imgui_internal.h	/^    float                   ItemWidth;              \/\/ == ItemWidthStack.back(). 0.0: default, >0.0: width in pixels, <0.0: align xx pixels to the right of window$/;"	m	struct:ImGuiWindowTempData
ItemWidthDefault	imgui-master/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow
ItemWidthStack	imgui-master/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;$/;"	m	struct:ImGuiWindowTempData
Items	imgui-master/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	file:
ItemsCount	imgui-master/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
ItemsHeight	imgui-master/imgui.h	/^    float   ItemsHeight;$/;"	m	struct:ImGuiListClipper
Items_ArrayGetter	imgui-master/imgui_widgets.cpp	/^static bool Items_ArrayGetter(void* data, int idx, const char** out_text)$/;"	f	file:
Items_SingleStringGetter	imgui-master/imgui_widgets.cpp	/^static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)$/;"	f	file:
KeepAliveID	imgui-master/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui
KeyAlt	imgui-master/imgui.h	/^    bool        KeyAlt;                         \/\/ Keyboard modifier pressed: Alt$/;"	m	struct:ImGuiIO
KeyCtrl	imgui-master/imgui.h	/^    bool        KeyCtrl;                        \/\/ Keyboard modifier pressed: Control$/;"	m	struct:ImGuiIO
KeyMap	imgui-master/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];         \/\/ <unset>          \/\/ Map of indices into the KeysDown[512] entries array which represent your "native" keyboard state.$/;"	m	struct:ImGuiIO
KeyRepeatDelay	imgui-master/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.250f         \/\/ When holding a key\/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).$/;"	m	struct:ImGuiIO
KeyRepeatRate	imgui-master/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/button, rate at which it repeats, in seconds.$/;"	m	struct:ImGuiIO
KeyShift	imgui-master/imgui.h	/^    bool        KeyShift;                       \/\/ Keyboard modifier pressed: Shift$/;"	m	struct:ImGuiIO
KeySuper	imgui-master/imgui.h	/^    bool        KeySuper;                       \/\/ Keyboard modifier pressed: Cmd\/Super\/Windows$/;"	m	struct:ImGuiIO
KeysDown	imgui-master/imgui.h	/^    bool        KeysDown[512];                  \/\/ Keyboard keys that are pressed (ideally left in the "native" order your engine has access to keyboard keys, so you can use your own defines\/enums for keys).$/;"	m	struct:ImGuiIO
KeysDownDuration	imgui-master/imgui.h	/^    float       KeysDownDuration[512];          \/\/ Duration the keyboard key has been down (0.0f == just pressed)$/;"	m	struct:ImGuiIO
KeysDownDurationPrev	imgui-master/imgui.h	/^    float       KeysDownDurationPrev[512];      \/\/ Previous duration the key has been down$/;"	m	struct:ImGuiIO
LIBS	imgui-master/examples/example_glfw_opengl2/Makefile	/^	LIBS = -framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo$/;"	m
LIBS	imgui-master/examples/example_glfw_opengl2/Makefile	/^	LIBS = -lGL `pkg-config --static --libs glfw3`$/;"	m
LIBS	imgui-master/examples/example_glfw_opengl2/Makefile	/^   LIBS = -lglfw3 -lgdi32 -lopengl32 -limm32$/;"	m
LIBS	imgui-master/examples/example_glfw_opengl3/Makefile	/^	LIBS = -framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo$/;"	m
LIBS	imgui-master/examples/example_glfw_opengl3/Makefile	/^	LIBS = -lGL `pkg-config --static --libs glfw3`$/;"	m
LIBS	imgui-master/examples/example_glfw_opengl3/Makefile	/^   LIBS = -lglfw3 -lgdi32 -lopengl32 -limm32$/;"	m
LIBS	imgui-master/examples/example_sdl_opengl2/Makefile	/^	LIBS = -framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo `sdl2-config --libs`$/;"	m
LIBS	imgui-master/examples/example_sdl_opengl2/Makefile	/^	LIBS = -lGL -ldl `sdl2-config --libs`$/;"	m
LIBS	imgui-master/examples/example_sdl_opengl2/Makefile	/^   LIBS = -lgdi32 -lopengl32 -limm32 `pkg-config --static --libs sdl2`$/;"	m
LIBS	imgui-master/examples/example_sdl_opengl2/build_win32.bat	/^set LIBS=\/libpath:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib$/;"	v
LIBS	imgui-master/examples/example_sdl_opengl3/Makefile	/^	LIBS = -framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo `sdl2-config --libs`$/;"	m
LIBS	imgui-master/examples/example_sdl_opengl3/Makefile	/^	LIBS = -lGL -ldl `sdl2-config --libs`$/;"	m
LIBS	imgui-master/examples/example_sdl_opengl3/Makefile	/^   LIBS = -lgdi32 -lopengl32 -limm32 `pkg-config --static --libs sdl2`$/;"	m
LIBS	imgui-master/examples/example_sdl_opengl3/build_win32.bat	/^set LIBS=\/libpath:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib$/;"	v
LabelText	imgui-master/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui
LabelTextV	imgui-master/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui
LastActiveId	imgui-master/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero ActiveId, useful for animation.$/;"	m	struct:ImGuiContext
LastActiveIdTimer	imgui-master/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero ActiveId timer since the beginning of activation, useful for animation.$/;"	m	struct:ImGuiContext
LastFrameActive	imgui-master/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the window was Active.$/;"	m	struct:ImGuiWindow
LastFrameSelected	imgui-master/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of the last activated tabs with little maintenance$/;"	m	struct:ImGuiTabItem
LastFrameVisible	imgui-master/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem
LastItemDisplayRect	imgui-master/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;    \/\/ End-user display rect (only valid if LastItemStatusFlags & ImGuiItemStatusFlags_HasDisplayRect)$/;"	m	struct:ImGuiWindowTempData
LastItemDisplayRect	imgui-master/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemId	imgui-master/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemId	imgui-master/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiWindowTempData
LastItemRect	imgui-master/imgui_internal.h	/^    ImRect                  LastItemRect;           \/\/ Interaction rect$/;"	m	struct:ImGuiWindowTempData
LastItemRect	imgui-master/imgui_internal.h	/^    ImRect                  LastItemRect;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemStatusFlags	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiItemHoveredDataBackup
LastItemStatusFlags	imgui-master/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiWindowTempData
LastTabItemIdx	imgui-master/imgui_internal.h	/^    short               LastTabItemIdx;         \/\/ For BeginTabItem()\/EndTabItem()$/;"	m	struct:ImGuiTabBar
LastValidMousePos	imgui-master/imgui_internal.h	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGuiContext
Layers	imgui-master/imgui_internal.h	/^    ImVector<ImDrawList*>   Layers[2];           \/\/ Global layers for: regular, tooltip$/;"	m	struct:ImDrawDataBuilder
LayoutType	imgui-master/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData
LightHinting	imgui-master/misc/freetype/imgui_freetype.h	/^        LightHinting    = 1 << 3,   \/\/ A lighter hinting algorithm for gray-level modes. Many generated glyphs are fuzzier but better resemble their original shape. This is achieved by snapping glyphs to the pixel grid only vertically (Y-axis), as is done by Microsoft's ClearType and Adobe's proprietary font renderer. This preserves inter-glyph spacing in horizontal text.$/;"	e	enum:ImGuiFreeType::RasterizerFlags
LineGap	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float       LineGap;            \/\/ The spacing in pixels between one row's descent and the next row's ascent.$/;"	m	struct:__anon1::FontInfo	file:
LineMaxY	imgui-master/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumnsSet
LineMinY	imgui-master/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumnsSet
LineOffsets	imgui-master/imgui_demo.cpp	/^    ImVector<int>       LineOffsets;        \/\/ Index to lines offset$/;"	m	struct:ExampleAppLog	file:
LineSpacing	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float       LineSpacing;        \/\/ The baseline-to-baseline distance. Note that it usually is larger than the sum of the ascender and descender taken as absolute values. There is also no guarantee that no glyphs extend above or below subsequent baselines when using this distance. Think of it as a value the designer of the font finds appropriate.$/;"	m	struct:__anon1::FontInfo	file:
ListBox	imgui-master/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)$/;"	f	class:ImGui
ListBox	imgui-master/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_items)$/;"	f	class:ImGui
ListBoxFooter	imgui-master/imgui_widgets.cpp	/^void ImGui::ListBoxFooter()$/;"	f	class:ImGui
ListBoxHeader	imgui-master/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui
ListBoxHeader	imgui-master/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)$/;"	f	class:ImGui
LoadIniSettingsFromDisk	imgui-master/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui
LoadIniSettingsFromMemory	imgui-master/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui
Locked	imgui-master/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.$/;"	m	struct:ImFontAtlas
LogAutoExpandMaxDepth	imgui-master/imgui_internal.h	/^    int                     LogAutoExpandMaxDepth;$/;"	m	struct:ImGuiContext
LogButtons	imgui-master/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui
LogClipboard	imgui-master/imgui_internal.h	/^    ImGuiTextBuffer         LogClipboard;                       \/\/ Accumulation buffer when log to clipboard. This is pointer so our GImGui static constructor doesn't call heap allocators.$/;"	m	struct:ImGuiContext
LogEnabled	imgui-master/imgui_internal.h	/^    bool                    LogEnabled;$/;"	m	struct:ImGuiContext
LogFile	imgui-master/imgui_internal.h	/^    FILE*                   LogFile;                            \/\/ If != NULL log to stdout\/ file$/;"	m	struct:ImGuiContext
LogFilename	imgui-master/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (default parameter to ImGui::LogToFile when no file is specified).$/;"	m	struct:ImGuiIO
LogFinish	imgui-master/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui
LogLinePosY	imgui-master/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiWindowTempData
LogRenderedText	imgui-master/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui
LogStartDepth	imgui-master/imgui_internal.h	/^    int                     LogStartDepth;$/;"	m	struct:ImGuiContext
LogText	imgui-master/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui
LogToClipboard	imgui-master/imgui.cpp	/^void ImGui::LogToClipboard(int max_depth)$/;"	f	class:ImGui
LogToFile	imgui-master/imgui.cpp	/^void ImGui::LogToFile(int max_depth, const char* filename)$/;"	f	class:ImGui
LogToTTY	imgui-master/imgui.cpp	/^void ImGui::LogToTTY(int max_depth)$/;"	f	class:ImGui
LowerBound	imgui-master/imgui.cpp	/^static ImVector<ImGuiStorage::Pair>::iterator LowerBound(ImVector<ImGuiStorage::Pair>& data, ImGuiID key)$/;"	f	file:
MAP_ANALOG	imgui-master/examples/imgui_impl_glfw.cpp	/^        #define MAP_ANALOG(/;"	d	file:
MAP_ANALOG	imgui-master/examples/imgui_impl_glfw.cpp	/^        #undef MAP_ANALOG$/;"	d	file:
MAP_BUTTON	imgui-master/examples/imgui_impl_glfw.cpp	/^        #define MAP_BUTTON(/;"	d	file:
MAP_BUTTON	imgui-master/examples/imgui_impl_glfw.cpp	/^        #undef MAP_BUTTON$/;"	d	file:
MTLCommandBuffer	imgui-master/examples/imgui_impl_metal.h	/^@protocol MTLDevice, MTLCommandBuffer, MTLRenderCommandEncoder;$/;"	v
MTLDevice	imgui-master/examples/imgui_impl_metal.h	/^@protocol MTLDevice, MTLCommandBuffer, MTLRenderCommandEncoder;$/;"	v
MTLRenderCommandEncoder	imgui-master/examples/imgui_impl_metal.h	/^@protocol MTLDevice, MTLCommandBuffer, MTLRenderCommandEncoder;$/;"	v
MallocWrapper	imgui-master/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { (void)user_data; (void)size; IM_ASSERT(0); return NULL; }$/;"	f	file:
MallocWrapper	imgui-master/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { (void)user_data; return malloc(size); }$/;"	f	file:
Map	imgui-master/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool
MarkIniSettingsDirty	imgui-master/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui
MarkIniSettingsDirty	imgui-master/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui
MarkItemEdited	imgui-master/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui
Max	imgui-master/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect
MaxAdvanceWidth	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float       MaxAdvanceWidth;    \/\/ This field gives the maximum horizontal cursor advance for all glyphs in the font.$/;"	m	struct:__anon1::FontInfo	file:
MaxX	imgui-master/imgui_internal.h	/^    float               MinX, MaxX;$/;"	m	struct:ImGuiColumnsSet
MemAlloc	imgui-master/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui
MemFree	imgui-master/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui
MenuBarAppending	imgui-master/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData
MenuBarHeight	imgui-master/imgui_internal.h	/^    float       MenuBarHeight() const                   { return (Flags & ImGuiWindowFlags_MenuBar) ? DC.MenuBarOffset.y + CalcFontSize() + GImGui->Style.FramePadding.y * 2.0f : 0.0f; }$/;"	f	struct:ImGuiWindow
MenuBarOffset	imgui-master/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent of a per-layer CursorPos.x, saved\/restored as we switch to the menu bar. The only situation when MenuBarOffset.y is > 0 if when (SafeAreaPadding.y > FramePadding.y), often used on TVs.$/;"	m	struct:ImGuiWindowTempData
MenuBarOffsetMinVal	imgui-master/imgui_internal.h	/^    ImVec2                  MenuBarOffsetMinVal;                \/\/ This is not exposed publicly, so we don't clear it.$/;"	m	struct:ImGuiNextWindowData
MenuBarRect	imgui-master/imgui_internal.h	/^    ImRect      MenuBarRect() const                     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos.x, y1, Pos.x + SizeFull.x, y1 + MenuBarHeight()); }$/;"	f	struct:ImGuiWindow
MenuColumns	imgui-master/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;                        \/\/ Simplified columns storage for menu items$/;"	m	struct:ImGuiWindow
MenuItem	imgui-master/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui
MenuItem	imgui-master/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui
MergeMode	imgui-master/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.$/;"	m	struct:ImFontConfig
MetricsActiveAllocations	imgui-master/imgui.h	/^    int         MetricsActiveAllocations;       \/\/ Number of active allocations, updated by MemAlloc\/MemFree based on current context. May be off if you have multiple imgui contexts.$/;"	m	struct:ImGuiIO
MetricsActiveWindows	imgui-master/imgui.h	/^    int         MetricsActiveWindows;           \/\/ Number of active windows$/;"	m	struct:ImGuiIO
MetricsRenderIndices	imgui-master/imgui.h	/^    int         MetricsRenderIndices;           \/\/ Indices output during last call to Render() = number of triangles * 3$/;"	m	struct:ImGuiIO
MetricsRenderVertices	imgui-master/imgui.h	/^    int         MetricsRenderVertices;          \/\/ Vertices output during last call to Render()$/;"	m	struct:ImGuiIO
MetricsRenderWindows	imgui-master/imgui.h	/^    int         MetricsRenderWindows;           \/\/ Number of visible windows$/;"	m	struct:ImGuiIO
MetricsTotalSurface	imgui-master/imgui.h	/^    int                         MetricsTotalSurface;\/\/              \/\/ Total surface in pixels to get an idea of the font rasterization\/texture cost (not exact, we approximate the cost of padding between glyphs)$/;"	m	struct:ImFont
Min	imgui-master/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect
MinX	imgui-master/imgui_internal.h	/^    float               MinX, MaxX;$/;"	m	struct:ImGuiColumnsSet
MonoHinting	imgui-master/misc/freetype/imgui_freetype.h	/^        MonoHinting     = 1 << 4,   \/\/ Strong hinting algorithm that should only be used for monochrome output.$/;"	e	enum:ImGuiFreeType::RasterizerFlags
MouseClicked	imgui-master/imgui.h	/^    bool        MouseClicked[5];                \/\/ Mouse button went from !Down to Down$/;"	m	struct:ImGuiIO
MouseClickedPos	imgui-master/imgui.h	/^    ImVec2      MouseClickedPos[5];             \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO
MouseClickedTime	imgui-master/imgui.h	/^    double      MouseClickedTime[5];            \/\/ Time of last click (used to figure out double-click)$/;"	m	struct:ImGuiIO
MouseCursor	imgui-master/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext
MouseCursorScale	imgui-master/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.$/;"	m	struct:ImGuiStyle
MouseDelta	imgui-master/imgui.h	/^    ImVec2      MouseDelta;                     \/\/ Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing\/reappearing mouse won't have a huge delta.$/;"	m	struct:ImGuiIO
MouseDoubleClickMaxDist	imgui-master/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to stay in to validate a double-click, in pixels.$/;"	m	struct:ImGuiIO
MouseDoubleClickTime	imgui-master/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-click, in seconds.$/;"	m	struct:ImGuiIO
MouseDoubleClicked	imgui-master/imgui.h	/^    bool        MouseDoubleClicked[5];          \/\/ Has mouse button been double-clicked?$/;"	m	struct:ImGuiIO
MouseDown	imgui-master/imgui.h	/^    bool        MouseDown[5];                   \/\/ Mouse buttons: 0=left, 1=right, 2=middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.$/;"	m	struct:ImGuiIO
MouseDownDuration	imgui-master/imgui.h	/^    float       MouseDownDuration[5];           \/\/ Duration the mouse button has been down (0.0f == just clicked)$/;"	m	struct:ImGuiIO
MouseDownDurationPrev	imgui-master/imgui.h	/^    float       MouseDownDurationPrev[5];       \/\/ Previous time the mouse button has been down$/;"	m	struct:ImGuiIO
MouseDownOwned	imgui-master/imgui.h	/^    bool        MouseDownOwned[5];              \/\/ Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.$/;"	m	struct:ImGuiIO
MouseDragMaxDistanceAbs	imgui-master/imgui.h	/^    ImVec2      MouseDragMaxDistanceAbs[5];     \/\/ Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point$/;"	m	struct:ImGuiIO
MouseDragMaxDistanceSqr	imgui-master/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];     \/\/ Squared maximum distance of how much mouse has traveled from the clicking point$/;"	m	struct:ImGuiIO
MouseDragThreshold	imgui-master/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold before considering we are dragging.$/;"	m	struct:ImGuiIO
MouseDrawCursor	imgui-master/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by back-end implementations.$/;"	m	struct:ImGuiIO
MousePos	imgui-master/imgui.h	/^    ImVec2      MousePos;                       \/\/ Mouse position, in pixels. Set to ImVec2(-FLT_MAX,-FLT_MAX) if mouse is unavailable (on another screen, etc.)$/;"	m	struct:ImGuiIO
MousePosPrev	imgui-master/imgui.h	/^    ImVec2      MousePosPrev;                   \/\/ Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)$/;"	m	struct:ImGuiIO
MouseReleased	imgui-master/imgui.h	/^    bool        MouseReleased[5];               \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO
MouseWheel	imgui-master/imgui.h	/^    float       MouseWheel;                     \/\/ Mouse wheel Vertical: 1 unit scrolls about 5 lines text.$/;"	m	struct:ImGuiIO
MouseWheelH	imgui-master/imgui.h	/^    float       MouseWheelH;                    \/\/ Mouse wheel Horizontal. Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.$/;"	m	struct:ImGuiIO
MoveId	imgui-master/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow
MovingWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked on (in order to preserve focus). The actually window that is moved is generally MovingWindow->RootWindow.$/;"	m	struct:ImGuiContext
MyDocument	imgui-master/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f,1.0f,1.0f,1.0f))$/;"	f	struct:MyDocument
MyDocument	imgui-master/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
NAV_MAP_KEY	imgui-master/imgui.cpp	/^        #define NAV_MAP_KEY(/;"	d	file:
NAV_MAP_KEY	imgui-master/imgui.cpp	/^        #undef NAV_MAP_KEY$/;"	d	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	imgui-master/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the highlight and screen dimming starts fading in$/;"	v	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	imgui-master/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the window list starts to appear$/;"	v	file:
NUM_BACK_BUFFERS	imgui-master/examples/example_win32_directx12/main.cpp	/^static int const                    NUM_BACK_BUFFERS = 3;$/;"	v	file:
NUM_FRAMES_IN_FLIGHT	imgui-master/examples/example_win32_directx12/main.cpp	/^static int const                    NUM_FRAMES_IN_FLIGHT = 3;$/;"	v	file:
Name	imgui-master/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig
Name	imgui-master/imgui_demo.cpp	/^    const char* Name;           \/\/ Document title$/;"	m	struct:MyDocument	file:
Name	imgui-master/imgui_internal.h	/^    char*                   Name;$/;"	m	struct:ImGuiWindow
Name	imgui-master/imgui_internal.h	/^    char*       Name;$/;"	m	struct:ImGuiWindowSettings
NavActivateDownId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsNavInputDown(ImGuiNavInput_Activate) ? NavId : 0$/;"	m	struct:ImGuiContext
NavActivateId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && IsNavInputPressed(ImGuiNavInput_Activate) ? NavId : 0, also set when calling ActivateItem()$/;"	m	struct:ImGuiContext
NavActivatePressedId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsNavInputPressed(ImGuiNavInput_Activate) ? NavId : 0$/;"	m	struct:ImGuiContext
NavActive	imgui-master/imgui.h	/^    bool        NavActive;                      \/\/ Directional navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.$/;"	m	struct:ImGuiIO
NavAnyRequest	imgui-master/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavInitRequest$/;"	m	struct:ImGuiContext
NavCalcPreferredRefPos	imgui-master/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui
NavClampRectToVisibleAreaForMoveDir	imgui-master/imgui.cpp	/^static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRect& clip_rect)$/;"	f	file:
NavDisableHighlight	imgui-master/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mouse, we hide gamepad\/keyboard highlight (NB: but they are still available, which is why NavDisableHighlight isn't always != NavDisableMouseHover)$/;"	m	struct:ImGuiContext
NavDisableMouseHover	imgui-master/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using gamepad\/keyboard, we hide mouse hovering highlight until mouse is touched again.$/;"	m	struct:ImGuiContext
NavHasScroll	imgui-master/imgui_internal.h	/^    bool                    NavHasScroll;           \/\/ Set when scrolling can be used (ScrollMax > 0.0f)$/;"	m	struct:ImGuiWindowTempData
NavHideHighlightOneFrame	imgui-master/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData
NavId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext
NavIdIsAlive	imgui-master/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen this frame ~~ NavRefRectRel is valid$/;"	m	struct:ImGuiContext
NavIdTabCounter	imgui-master/imgui_internal.h	/^    int                     NavIdTabCounter;                    \/\/ == NavWindow->DC.FocusIdxTabCounter at time of NavId processing$/;"	m	struct:ImGuiContext
NavInitRequest	imgui-master/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing window to select first item$/;"	m	struct:ImGuiContext
NavInitRequestFromMove	imgui-master/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext
NavInitResultId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavInitResultId;$/;"	m	struct:ImGuiContext
NavInitResultRectRel	imgui-master/imgui_internal.h	/^    ImRect                  NavInitResultRectRel;$/;"	m	struct:ImGuiContext
NavInitWindow	imgui-master/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui
NavInputId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavInputId;                         \/\/ ~~ IsNavInputPressed(ImGuiNavInput_Input) ? NavId : 0$/;"	m	struct:ImGuiContext
NavInputSource	imgui-master/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? THIS WILL ONLY BE None or NavGamepad or NavKeyboard.$/;"	m	struct:ImGuiContext
NavInputs	imgui-master/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT]; \/\/ Gamepad inputs (keyboard keys will be auto-mapped and be written here by ImGui::NewFrame, all values will be cleared back to zero in ImGui::EndFrame)$/;"	m	struct:ImGuiIO
NavInputsDownDuration	imgui-master/imgui.h	/^    float       NavInputsDownDuration[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO
NavInputsDownDurationPrev	imgui-master/imgui.h	/^    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO
NavJustMovedToId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (result of a successfully MoveRequest)$/;"	m	struct:ImGuiContext
NavJustTabbedId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavJustTabbedId;                    \/\/ Just tabbed to this id.$/;"	m	struct:ImGuiContext
NavLastChildNavWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar, we remember the child window we came from. (This could probably be made implicit if we kept g.Windows sorted by last focused including child window.)$/;"	m	struct:ImGuiWindow
NavLastIds	imgui-master/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this window, per layer (0\/1)$/;"	m	struct:ImGuiWindow
NavLayer	imgui-master/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on. For now the system is hard-coded for 0=main contents and 1=menu\/title bar, may expose layers later.$/;"	m	struct:ImGuiContext
NavLayerActiveMask	imgui-master/imgui_internal.h	/^    int                     NavLayerActiveMask;     \/\/ Which layer have been written to (result from previous frame)$/;"	m	struct:ImGuiWindowTempData
NavLayerActiveMaskNext	imgui-master/imgui_internal.h	/^    int                     NavLayerActiveMaskNext; \/\/ Which layer have been written to (buffer for current frame)$/;"	m	struct:ImGuiWindowTempData
NavLayerCurrent	imgui-master/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only use 0..1)$/;"	m	struct:ImGuiWindowTempData
NavLayerCurrentMask	imgui-master/imgui_internal.h	/^    int                     NavLayerCurrentMask;    \/\/ = (1 << NavLayerCurrent) used by ItemAdd prior to clipping.$/;"	m	struct:ImGuiWindowTempData
NavMousePosDirty	imgui-master/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mouse position if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos) if set (NB: this not enabled by default)$/;"	m	struct:ImGuiContext
NavMoveClipDir	imgui-master/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;$/;"	m	struct:ImGuiContext
NavMoveDir	imgui-master/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move request (left\/right\/up\/down), direction of the previous move request$/;"	m	struct:ImGuiContext
NavMoveDirLast	imgui-master/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move request (left\/right\/up\/down), direction of the previous move request$/;"	m	struct:ImGuiContext
NavMoveFromClampedRefRect	imgui-master/imgui_internal.h	/^    bool                    NavMoveFromClampedRefRect;          \/\/ Set by manual scrolling, if we scroll to a point where NavId isn't visible we reset navigation from visible items$/;"	m	struct:ImGuiContext
NavMoveRequest	imgui-master/imgui_internal.h	/^    bool                    NavMoveRequest;                     \/\/ Move request for this frame$/;"	m	struct:ImGuiContext
NavMoveRequestButNoResultYet	imgui-master/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui
NavMoveRequestCancel	imgui-master/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui
NavMoveRequestFlags	imgui-master/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveRequestFlags;$/;"	m	struct:ImGuiContext
NavMoveRequestForward	imgui-master/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, const ImRect& bb_rel, ImGuiNavMoveFlags move_flags)$/;"	f	class:ImGui
NavMoveRequestForward	imgui-master/imgui_internal.h	/^    ImGuiNavForward         NavMoveRequestForward;              \/\/ None \/ ForwardQueued \/ ForwardActive (this is used to navigate sibling parent menus from a child menu)$/;"	m	struct:ImGuiContext
NavMoveRequestTryWrapping	imgui-master/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags)$/;"	f	class:ImGui
NavMoveResultLocal	imgui-master/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocal;                 \/\/ Best move request candidate within NavWindow$/;"	m	struct:ImGuiContext
NavMoveResultLocalVisibleSet	imgui-master/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocalVisibleSet;       \/\/ Best move request candidate within NavWindow that are mostly visible (when using ImGuiNavMoveFlags_AlsoScoreVisibleSet flag)$/;"	m	struct:ImGuiContext
NavMoveResultOther	imgui-master/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultOther;                 \/\/ Best move request candidate within NavWindow's flattened hierarchy (when using ImGuiWindowFlags_NavFlattened flag)$/;"	m	struct:ImGuiContext
NavNextActivateId	imgui-master/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queued until next frame$/;"	m	struct:ImGuiContext
NavProcessItem	imgui-master/imgui.cpp	/^static void ImGui::NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id)$/;"	f	class:ImGui
NavRectRel	imgui-master/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in window relative space$/;"	m	struct:ImGuiWindow
NavRestoreLastChildNavWindow	imgui-master/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui
NavRestoreLayer	imgui-master/imgui.cpp	/^static void NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	file:
NavSaveLastChildNavWindow	imgui-master/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindow(ImGuiWindow* nav_window)$/;"	f	class:ImGui
NavScoreItem	imgui-master/imgui.cpp	/^static bool NavScoreItem(ImGuiNavMoveResult* result, ImRect cand)$/;"	f	file:
NavScoreItemDistInterval	imgui-master/imgui.cpp	/^static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)$/;"	f	file:
NavScoringCount	imgui-master/imgui_internal.h	/^    int                     NavScoringCount;                    \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext
NavScoringRectScreen	imgui-master/imgui_internal.h	/^    ImRect                  NavScoringRectScreen;               \/\/ Rectangle used for scoring, in screen space. Based of window->DC.NavRefRectRel[], modified for directional navigation scoring.$/;"	m	struct:ImGuiContext
NavScrollToBringItemIntoView	imgui-master/imgui.cpp	/^static void NavScrollToBringItemIntoView(ImGuiWindow* window, const ImRect& item_rect)$/;"	f	file:
NavUpdate	imgui-master/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui
NavUpdateAnyRequestFlag	imgui-master/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui
NavUpdateMoveResult	imgui-master/imgui.cpp	/^static void ImGui::NavUpdateMoveResult()$/;"	f	class:ImGui
NavUpdatePageUpPageDown	imgui-master/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown(int allowed_dir_flags)$/;"	f	class:ImGui
NavUpdateWindowing	imgui-master/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui
NavUpdateWindowingHighlightWindow	imgui-master/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	file:
NavUpdateWindowingList	imgui-master/imgui.cpp	/^void ImGui::NavUpdateWindowingList()$/;"	f	class:ImGui
NavVisible	imgui-master/imgui.h	/^    bool        NavVisible;                     \/\/ Directional navigation is visible and allowed (will handle ImGuiKey_NavXXX events).$/;"	m	struct:ImGuiIO
NavWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigation. Could be called 'FocusWindow'$/;"	m	struct:ImGuiContext
NavWindowingHighlightAlpha	imgui-master/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext
NavWindowingList	imgui-master/imgui_internal.h	/^    ImGuiWindow*            NavWindowingList;$/;"	m	struct:ImGuiContext
NavWindowingTarget	imgui-master/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ When selecting a window (holding Menu+FocusPrev\/Next, or equivalent of CTRL-TAB) this window is temporarily displayed front-most.$/;"	m	struct:ImGuiContext
NavWindowingTargetAnim	imgui-master/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWindowingTarget until DimBgRatio and NavWindowingHighlightAlpha becomes 0.0f$/;"	m	struct:ImGuiContext
NavWindowingTimer	imgui-master/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext
NavWindowingToggleLayer	imgui-master/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext
NewFrame	imgui-master/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui
NewLine	imgui-master/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui
NextColumn	imgui-master/imgui.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui
NextSelectedTabId	imgui-master/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;$/;"	m	struct:ImGuiTabBar
NextTreeNodeOpenCond	imgui-master/imgui_internal.h	/^    ImGuiCond               NextTreeNodeOpenCond;$/;"	m	struct:ImGuiContext
NextTreeNodeOpenVal	imgui-master/imgui_internal.h	/^    bool                    NextTreeNodeOpenVal;                \/\/ Storage for SetNextTreeNode** functions$/;"	m	struct:ImGuiContext
NextWidth	imgui-master/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns
NextWidths	imgui-master/imgui_internal.h	/^    float       Pos[4], NextWidths[4];$/;"	m	struct:ImGuiMenuColumns
NextWindowData	imgui-master/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow** functions$/;"	m	struct:ImGuiContext
NoAutoHint	imgui-master/misc/freetype/imgui_freetype.h	/^        NoAutoHint      = 1 << 1,   \/\/ Disable auto-hinter.$/;"	e	enum:ImGuiFreeType::RasterizerFlags
NoHinting	imgui-master/misc/freetype/imgui_freetype.h	/^        NoHinting       = 1 << 0,   \/\/ Disable hinting. This generally generates 'blurrier' bitmap glyphs when the glyph are rendered in any of the anti-aliased modes.$/;"	e	enum:ImGuiFreeType::RasterizerFlags
NotifyOfDocumentsClosedElsewhere	imgui-master/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	file:
OBJS	imgui-master/examples/example_glfw_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui-master/examples/example_glfw_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui-master/examples/example_sdl_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui-master/examples/example_sdl_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OUT_DIR	imgui-master/examples/example_sdl_opengl2/build_win32.bat	/^set OUT_DIR=Debug$/;"	v
OUT_DIR	imgui-master/examples/example_sdl_opengl3/build_win32.bat	/^set OUT_DIR=Debug$/;"	v
OUT_EXE	imgui-master/examples/example_sdl_opengl2/build_win32.bat	/^set OUT_EXE=example_sdl_opengl2.exe$/;"	v
OUT_EXE	imgui-master/examples/example_sdl_opengl3/build_win32.bat	/^set OUT_EXE=example_sdl_opengl3.exe$/;"	v
Oblique	imgui-master/misc/freetype/imgui_freetype.h	/^        Oblique         = 1 << 6    \/\/ Styling: Should we slant the font, emulating italic style?$/;"	e	enum:ImGuiFreeType::RasterizerFlags
Offset	imgui-master/imgui.cpp	/^    ImU32           Offset;$/;"	m	struct:ImGuiStyleVarInfo	file:
Offset	imgui-master/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem
OffsetMax	imgui-master/imgui_internal.h	/^    float               OffsetMax;              \/\/ Distance from BarRect.Min.x, locked during layout$/;"	m	struct:ImGuiTabBar
OffsetNextTab	imgui-master/imgui_internal.h	/^    float               OffsetNextTab;          \/\/ Distance from BarRect.Min.x, incremented with each BeginTabItem() call, not used if ImGuiTabBarFlags_Reorderable if set.$/;"	m	struct:ImGuiTabBar
OffsetNorm	imgui-master/imgui_internal.h	/^    float               OffsetNorm;         \/\/ Column start offset, normalized 0.0 (far left) -> 1.0 (far right)$/;"	m	struct:ImGuiColumnData
OffsetNormBeforeResize	imgui-master/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiColumnData
OffsetNormToPixels	imgui-master/imgui.cpp	/^static float OffsetNormToPixels(const ImGuiColumnsSet* columns, float offset_norm)$/;"	f	file:
OffsetX	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float OffsetX;		\/\/ The distance from the origin ("pen position") to the left of the glyph.$/;"	m	struct:__anon1::GlyphInfo	file:
OffsetY	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float OffsetY;		\/\/ The distance from the origin to the top of the glyph. This is usually a value < 0.$/;"	m	struct:__anon1::GlyphInfo	file:
OnKeyPressed	imgui-master/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState
Open	imgui-master/imgui_demo.cpp	/^    bool        Open;           \/\/ Set when the document is open (in this demo, we keep an array of all available documents to simplify the demo)$/;"	m	struct:MyDocument	file:
OpenFrameCount	imgui-master/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupRef
OpenMousePos	imgui-master/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the time of opening popup$/;"	m	struct:ImGuiPopupRef
OpenParentId	imgui-master/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differenciate multiple menu sets from each others (e.g. inside menu bar vs loose menu items)$/;"	m	struct:ImGuiPopupRef
OpenPopup	imgui-master/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id)$/;"	f	class:ImGui
OpenPopupEx	imgui-master/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id)$/;"	f	class:ImGui
OpenPopupOnItemClick	imgui-master/imgui.cpp	/^bool ImGui::OpenPopupOnItemClick(const char* str_id, int mouse_button)$/;"	f	class:ImGui
OpenPopupPos	imgui-master/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typically == OpenMousePos when using mouse)$/;"	m	struct:ImGuiPopupRef
OpenPopupStack	imgui-master/imgui_internal.h	/^    ImVector<ImGuiPopupRef> OpenPopupStack;                     \/\/ Which popups are open (persistent)$/;"	m	struct:ImGuiContext
OpenPrev	imgui-master/imgui_demo.cpp	/^    bool        OpenPrev;       \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	file:
OuterRectClipped	imgui-master/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ = WindowRect just after setup in Begin(). == window->Rect() for root window.$/;"	m	struct:ImGuiWindow
Overlaps	imgui-master/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min.y && r.Min.x <  Max.x && r.Max.x >  Min.x; }$/;"	f	struct:ImRect
OverlayDrawList	imgui-master/imgui_internal.h	/^    ImDrawList              OverlayDrawList;                    \/\/ Optional software render of mouse cursors, if io.MouseDrawCursor is set + a few debug overlays$/;"	m	struct:ImGuiContext
OversampleH	imgui-master/imgui.h	/^    int             OversampleH;            \/\/ 3        \/\/ Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.$/;"	m	struct:ImFontConfig
OversampleV	imgui-master/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.$/;"	m	struct:ImFontConfig
PFNGLACTIVESHADERPROGRAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);$/;"	t
PFNGLACTIVETEXTUREPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t
PFNGLATTACHSHADERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLBEGINCONDITIONALRENDERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);$/;"	t
PFNGLBEGINQUERYINDEXEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);$/;"	t
PFNGLBEGINQUERYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBEGINTRANSFORMFEEDBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);$/;"	t
PFNGLBINDATTRIBLOCATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDBUFFERBASEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);$/;"	t
PFNGLBINDBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t
PFNGLBINDBUFFERRANGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDFRAGDATALOCATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);$/;"	t
PFNGLBINDFRAMEBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);$/;"	t
PFNGLBINDIMAGETEXTUREPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);$/;"	t
PFNGLBINDPROGRAMPIPELINEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLBINDRENDERBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);$/;"	t
PFNGLBINDSAMPLERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t
PFNGLBINDTEXTUREPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t
PFNGLBINDTRANSFORMFEEDBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBINDVERTEXARRAYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLBINDVERTEXBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);$/;"	t
PFNGLBLENDCOLORPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLBLENDEQUATIONIARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);$/;"	t
PFNGLBLENDEQUATIONIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);$/;"	t
PFNGLBLENDEQUATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t
PFNGLBLENDEQUATIONSEPARATEIARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDFUNCIARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t
PFNGLBLENDFUNCIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t
PFNGLBLENDFUNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor);$/;"	t
PFNGLBLENDFUNCSEPARATEIARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	t
PFNGLBLITFRAMEBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	t
PFNGLBUFFERDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);$/;"	t
PFNGLBUFFERSUBDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);$/;"	t
PFNGLCHECKFRAMEBUFFERSTATUSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);$/;"	t
PFNGLCLAMPCOLORPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);$/;"	t
PFNGLCLEARBUFFERDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARBUFFERFIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);$/;"	t
PFNGLCLEARBUFFERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);$/;"	t
PFNGLCLEARBUFFERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);$/;"	t
PFNGLCLEARBUFFERSUBDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARBUFFERUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);$/;"	t
PFNGLCLEARCOLORPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCLEARDEPTHFPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d);$/;"	t
PFNGLCLEARDEPTHPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHPROC) (GLdouble depth);$/;"	t
PFNGLCLEARNAMEDBUFFERDATAEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void *data);$/;"	t
PFNGLCLEARPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t
PFNGLCLEARSTENCILPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s);$/;"	t
PFNGLCLIENTWAITSYNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLCOLORMASKIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	t
PFNGLCOLORMASKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	t
PFNGLCOLORP3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);$/;"	t
PFNGLCOLORP3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);$/;"	t
PFNGLCOLORP4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);$/;"	t
PFNGLCOLORP4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);$/;"	t
PFNGLCOMPILESHADERINCLUDEARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);$/;"	t
PFNGLCOMPILESHADERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);$/;"	t
PFNGLCOPYBUFFERSUBDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);$/;"	t
PFNGLCOPYIMAGESUBDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);$/;"	t
PFNGLCOPYTEXIMAGE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);$/;"	t
PFNGLCOPYTEXIMAGE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	t
PFNGLCOPYTEXSUBIMAGE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	t
PFNGLCOPYTEXSUBIMAGE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCOPYTEXSUBIMAGE3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCREATEPROGRAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t
PFNGLCREATESHADERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t
PFNGLCREATESHADERPROGRAMVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar* const *strings);$/;"	t
PFNGLCREATESYNCFROMCLEVENTARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context * context, struct _cl_event * event, GLbitfield flags);$/;"	t
PFNGLCULLFACEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCULLFACEPROC) (GLenum mode);$/;"	t
PFNGLDEBUGMESSAGECALLBACKARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const GLvoid *userParam);$/;"	t
PFNGLDEBUGMESSAGECALLBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECONTROLARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGECONTROLPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGEINSERTARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	t
PFNGLDEBUGMESSAGEINSERTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	t
PFNGLDELETEBUFFERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t
PFNGLDELETEFRAMEBUFFERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);$/;"	t
PFNGLDELETENAMEDSTRINGARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t
PFNGLDELETEPROGRAMPIPELINESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);$/;"	t
PFNGLDELETEPROGRAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLDELETEQUERIESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETERENDERBUFFERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);$/;"	t
PFNGLDELETESAMPLERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);$/;"	t
PFNGLDELETESHADERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t
PFNGLDELETESYNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);$/;"	t
PFNGLDELETETEXTURESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t
PFNGLDELETETRANSFORMFEEDBACKSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETEVERTEXARRAYSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t
PFNGLDEPTHFUNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func);$/;"	t
PFNGLDEPTHMASKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag);$/;"	t
PFNGLDEPTHRANGEARRAYVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);$/;"	t
PFNGLDEPTHRANGEFPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);$/;"	t
PFNGLDEPTHRANGEINDEXEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);$/;"	t
PFNGLDEPTHRANGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEPROC) (GLdouble near, GLdouble far);$/;"	t
PFNGLDETACHSHADERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLDISABLEIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLDISABLEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t
PFNGLDISABLEVERTEXATTRIBARRAYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLDISPATCHCOMPUTEINDIRECTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);$/;"	t
PFNGLDISPATCHCOMPUTEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);$/;"	t
PFNGLDRAWARRAYSINDIRECTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const GLvoid *indirect);$/;"	t
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);$/;"	t
PFNGLDRAWARRAYSINSTANCEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);$/;"	t
PFNGLDRAWARRAYSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERPROC) (GLenum mode);$/;"	t
PFNGLDRAWBUFFERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);$/;"	t
PFNGLDRAWELEMENTSBASEVERTEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINDIRECTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const GLvoid *indirect);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount);$/;"	t
PFNGLDRAWELEMENTSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);$/;"	t
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);$/;"	t
PFNGLDRAWRANGEELEMENTSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);$/;"	t
PFNGLENABLEIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLENABLEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t
PFNGLENABLEVERTEXATTRIBARRAYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLENDCONDITIONALRENDERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);$/;"	t
PFNGLENDQUERYINDEXEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);$/;"	t
PFNGLENDQUERYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);$/;"	t
PFNGLENDTRANSFORMFEEDBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLFENCESYNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);$/;"	t
PFNGLFINISHPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFINISHPROC) (void);$/;"	t
PFNGLFLUSHMAPPEDBUFFERRANGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLFLUSHPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t
PFNGLFRAMEBUFFERPARAMETERIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLFRAMEBUFFERRENDERBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	t
PFNGLFRAMEBUFFERTEXTURE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	t
PFNGLFRAMEBUFFERTEXTURELAYERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);$/;"	t
PFNGLFRAMEBUFFERTEXTUREPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	t
PFNGLFRONTFACEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode);$/;"	t
PFNGLGENBUFFERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t
PFNGLGENERATEMIPMAPPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);$/;"	t
PFNGLGENFRAMEBUFFERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);$/;"	t
PFNGLGENPROGRAMPIPELINESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);$/;"	t
PFNGLGENQUERIESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);$/;"	t
PFNGLGENRENDERBUFFERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);$/;"	t
PFNGLGENSAMPLERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);$/;"	t
PFNGLGENTEXTURESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t
PFNGLGENTRANSFORMFEEDBACKSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);$/;"	t
PFNGLGENVERTEXARRAYSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);$/;"	t
PFNGLGETACTIVEATTRIBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVESUBROUTINENAMEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);$/;"	t
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);$/;"	t
PFNGLGETACTIVEUNIFORMNAMEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);$/;"	t
PFNGLGETACTIVEUNIFORMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMSIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);$/;"	t
PFNGLGETATTACHEDSHADERSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);$/;"	t
PFNGLGETATTRIBLOCATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETBOOLEANI_VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t
PFNGLGETBOOLEANVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *params);$/;"	t
PFNGLGETBUFFERPARAMETERI64VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETBUFFERPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETBUFFERPOINTERVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *params);$/;"	t
PFNGLGETBUFFERSUBDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);$/;"	t
PFNGLGETCOMPRESSEDTEXIMAGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);$/;"	t
PFNGLGETDEBUGMESSAGELOGARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	t
PFNGLGETDEBUGMESSAGELOGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	t
PFNGLGETDOUBLEI_VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t
PFNGLGETDOUBLEVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEVPROC) (GLenum pname, GLdouble *params);$/;"	t
PFNGLGETERRORPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t
PFNGLGETFLOATI_VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t
PFNGLGETFLOATVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *params);$/;"	t
PFNGLGETFRAGDATAINDEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAGDATALOCATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);$/;"	t
PFNGLGETFRAMEBUFFERPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETGRAPHICSRESETSTATUSARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);$/;"	t
PFNGLGETINTEGER64I_VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t
PFNGLGETINTEGER64VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *params);$/;"	t
PFNGLGETINTEGERI_VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t
PFNGLGETINTEGERVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *params);$/;"	t
PFNGLGETINTERNALFORMATI64VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);$/;"	t
PFNGLGETINTERNALFORMATIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETMULTISAMPLEFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);$/;"	t
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);$/;"	t
PFNGLGETNAMEDSTRINGARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);$/;"	t
PFNGLGETNAMEDSTRINGIVARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);$/;"	t
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);$/;"	t
PFNGLGETNTEXIMAGEARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);$/;"	t
PFNGLGETNUNIFORMDVARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);$/;"	t
PFNGLGETNUNIFORMFVARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);$/;"	t
PFNGLGETNUNIFORMIVARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETNUNIFORMUIVARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);$/;"	t
PFNGLGETOBJECTLABELPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETOBJECTPTRLABELPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETPOINTERVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, GLvoid* *params);$/;"	t
PFNGLGETPROGRAMBINARYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);$/;"	t
PFNGLGETPROGRAMINFOLOGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMINTERFACEIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMPIPELINEINFOLOGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMPIPELINEIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMRESOURCEINDEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCEIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);$/;"	t
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCELOCATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCENAMEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETPROGRAMSTAGEIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);$/;"	t
PFNGLGETQUERYINDEXEDIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTI64VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETQUERYOBJECTIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTUI64VPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);$/;"	t
PFNGLGETQUERYOBJECTUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);$/;"	t
PFNGLGETRENDERBUFFERPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERINFOLOGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETSHADERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERPRECISIONFORMATPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);$/;"	t
PFNGLGETSHADERSOURCEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);$/;"	t
PFNGLGETSTRINGIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t
PFNGLGETSTRINGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t
PFNGLGETSUBROUTINEINDEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);$/;"	t
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);$/;"	t
PFNGLGETSYNCIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	t
PFNGLGETTEXIMAGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);$/;"	t
PFNGLGETTEXLEVELPARAMETERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) (GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXLEVELPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) (GLenum target, GLint level, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXPARAMETERIIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERIUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);$/;"	t
PFNGLGETTEXPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETUNIFORMBLOCKINDEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);$/;"	t
PFNGLGETUNIFORMDVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);$/;"	t
PFNGLGETUNIFORMFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);$/;"	t
PFNGLGETUNIFORMINDICESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);$/;"	t
PFNGLGETUNIFORMIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);$/;"	t
PFNGLGETUNIFORMLOCATIONPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETUNIFORMSUBROUTINEUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);$/;"	t
PFNGLGETUNIFORMUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBDVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETVERTEXATTRIBFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETVERTEXATTRIBIIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBIUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBLDVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETVERTEXATTRIBPOINTERVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);$/;"	t
PFNGLHINTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode);$/;"	t
PFNGLINVALIDATEBUFFERDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);$/;"	t
PFNGLINVALIDATEBUFFERSUBDATAPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLINVALIDATEFRAMEBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);$/;"	t
PFNGLINVALIDATESUBFRAMEBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLINVALIDATETEXIMAGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);$/;"	t
PFNGLINVALIDATETEXSUBIMAGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLISBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);$/;"	t
PFNGLISENABLEDIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLISENABLEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t
PFNGLISFRAMEBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);$/;"	t
PFNGLISNAMEDSTRINGARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t
PFNGLISPROGRAMPIPELINEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLISPROGRAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t
PFNGLISQUERYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);$/;"	t
PFNGLISRENDERBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);$/;"	t
PFNGLISSAMPLERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);$/;"	t
PFNGLISSHADERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);$/;"	t
PFNGLISSYNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);$/;"	t
PFNGLISTEXTUREPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture);$/;"	t
PFNGLISTRANSFORMFEEDBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);$/;"	t
PFNGLISVERTEXARRAYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLLINEWIDTHPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width);$/;"	t
PFNGLLINKPROGRAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t
PFNGLLOGICOPPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLLOGICOPPROC) (GLenum opcode);$/;"	t
PFNGLMAPBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);$/;"	t
PFNGLMAPBUFFERRANGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	t
PFNGLMEMORYBARRIERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);$/;"	t
PFNGLMINSAMPLESHADINGARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);$/;"	t
PFNGLMINSAMPLESHADINGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value);$/;"	t
PFNGLMULTIDRAWARRAYSINDIRECTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWARRAYSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount, const GLint *basevertex);$/;"	t
PFNGLMULTIDRAWELEMENTSINDIRECTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWELEMENTSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount);$/;"	t
PFNGLMULTITEXCOORDP1UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP1UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLMULTITEXCOORDP2UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP2UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLMULTITEXCOORDP3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLMULTITEXCOORDP4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);$/;"	t
PFNGLMULTITEXCOORDP4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);$/;"	t
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);$/;"	t
PFNGLNAMEDSTRINGARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);$/;"	t
PFNGLNORMALP3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);$/;"	t
PFNGLNORMALP3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);$/;"	t
PFNGLOBJECTLABELPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);$/;"	t
PFNGLOBJECTPTRLABELPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);$/;"	t
PFNGLPATCHPARAMETERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);$/;"	t
PFNGLPATCHPARAMETERIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);$/;"	t
PFNGLPAUSETRANSFORMFEEDBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLPIXELSTOREFPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREFPROC) (GLenum pname, GLfloat param);$/;"	t
PFNGLPIXELSTOREIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERFPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);$/;"	t
PFNGLPOINTPARAMETERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);$/;"	t
PFNGLPOINTPARAMETERIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);$/;"	t
PFNGLPOINTSIZEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTSIZEPROC) (GLfloat size);$/;"	t
PFNGLPOLYGONMODEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t
PFNGLPOLYGONOFFSETPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units);$/;"	t
PFNGLPOPDEBUGGROUPPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void);$/;"	t
PFNGLPRIMITIVERESTARTINDEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);$/;"	t
PFNGLPROGRAMBINARYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);$/;"	t
PFNGLPROGRAMPARAMETERIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);$/;"	t
PFNGLPROGRAMUNIFORM1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);$/;"	t
PFNGLPROGRAMUNIFORM1DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM1FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);$/;"	t
PFNGLPROGRAMUNIFORM1FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM1IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);$/;"	t
PFNGLPROGRAMUNIFORM1IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM1UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);$/;"	t
PFNGLPROGRAMUNIFORM1UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);$/;"	t
PFNGLPROGRAMUNIFORM2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM2FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLPROGRAMUNIFORM2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM2IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);$/;"	t
PFNGLPROGRAMUNIFORM2IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM2UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLPROGRAMUNIFORM2UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);$/;"	t
PFNGLPROGRAMUNIFORM3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM3FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLPROGRAMUNIFORM3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM3IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLPROGRAMUNIFORM3IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLPROGRAMUNIFORM3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM4DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);$/;"	t
PFNGLPROGRAMUNIFORM4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM4FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLPROGRAMUNIFORM4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM4IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLPROGRAMUNIFORM4IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLPROGRAMUNIFORM4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROVOKINGVERTEXPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);$/;"	t
PFNGLPUSHDEBUGGROUPPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);$/;"	t
PFNGLQUERYCOUNTERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);$/;"	t
PFNGLREADBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADBUFFERPROC) (GLenum mode);$/;"	t
PFNGLREADNPIXELSARBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);$/;"	t
PFNGLREADPIXELSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);$/;"	t
PFNGLRELEASESHADERCOMPILERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRESUMETRANSFORMFEEDBACKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLSAMPLECOVERAGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert);$/;"	t
PFNGLSAMPLEMASKIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);$/;"	t
PFNGLSAMPLERPARAMETERFPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);$/;"	t
PFNGLSAMPLERPARAMETERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);$/;"	t
PFNGLSAMPLERPARAMETERIIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSAMPLERPARAMETERIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);$/;"	t
PFNGLSAMPLERPARAMETERIUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);$/;"	t
PFNGLSAMPLERPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSCISSORARRAYVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);$/;"	t
PFNGLSCISSORINDEXEDPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);$/;"	t
PFNGLSCISSORINDEXEDVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLSCISSORPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLSECONDARYCOLORP3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);$/;"	t
PFNGLSECONDARYCOLORP3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);$/;"	t
PFNGLSHADERBINARYPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);$/;"	t
PFNGLSHADERSOURCEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length);$/;"	t
PFNGLSHADERSTORAGEBLOCKBINDINGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);$/;"	t
PFNGLSTENCILFUNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILFUNCSEPARATEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILMASKPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask);$/;"	t
PFNGLSTENCILMASKSEPARATEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);$/;"	t
PFNGLSTENCILOPPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass);$/;"	t
PFNGLSTENCILOPSEPARATEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	t
PFNGLTEXBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);$/;"	t
PFNGLTEXBUFFERRANGEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLTEXCOORDP1UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP1UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXCOORDP2UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP2UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXCOORDP3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXCOORDP4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);$/;"	t
PFNGLTEXCOORDP4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);$/;"	t
PFNGLTEXIMAGE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);$/;"	t
PFNGLTEXIMAGE2DMULTISAMPLEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);$/;"	t
PFNGLTEXIMAGE3DMULTISAMPLEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);$/;"	t
PFNGLTEXPARAMETERFPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXPARAMETERFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);$/;"	t
PFNGLTEXPARAMETERIIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXPARAMETERIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLTEXPARAMETERIUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);$/;"	t
PFNGLTEXPARAMETERIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXSTORAGE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXSTORAGE2DMULTISAMPLEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXSTORAGE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXSTORAGE3DMULTISAMPLEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXSTORAGE3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTEXSUBIMAGE1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);$/;"	t
PFNGLTEXSUBIMAGE2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);$/;"	t
PFNGLTEXSUBIMAGE3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);$/;"	t
PFNGLTEXTUREBUFFERRANGEEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLTEXTURESTORAGE1DEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXTURESTORAGE2DEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXTURESTORAGE3DEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXTUREVIEWPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);$/;"	t
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode);$/;"	t
PFNGLUNIFORM1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);$/;"	t
PFNGLUNIFORM1DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM1FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);$/;"	t
PFNGLUNIFORM1FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM1IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t
PFNGLUNIFORM1IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM1UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);$/;"	t
PFNGLUNIFORM1UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);$/;"	t
PFNGLUNIFORM2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM2FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLUNIFORM2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM2IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);$/;"	t
PFNGLUNIFORM2IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM2UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLUNIFORM2UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLUNIFORM3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM3FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLUNIFORM3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM3IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLUNIFORM3IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLUNIFORM3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM4DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLUNIFORM4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM4FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLUNIFORM4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM4IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLUNIFORM4IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLUNIFORM4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORMBLOCKBINDINGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);$/;"	t
PFNGLUNIFORMMATRIX2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2X3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2X4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3X2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3X4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4X2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4X3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMSUBROUTINESUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);$/;"	t
PFNGLUNMAPBUFFERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);$/;"	t
PFNGLUSEPROGRAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLUSEPROGRAMSTAGESPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);$/;"	t
PFNGLVALIDATEPROGRAMPIPELINEPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLVALIDATEPROGRAMPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);$/;"	t
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);$/;"	t
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);$/;"	t
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);$/;"	t
PFNGLVERTEXATTRIB1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIB1DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB1FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);$/;"	t
PFNGLVERTEXATTRIB1FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB1SPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);$/;"	t
PFNGLVERTEXATTRIB1SVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIB2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB2FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEXATTRIB2FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB2SPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);$/;"	t
PFNGLVERTEXATTRIB2SVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIB3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB3FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEXATTRIB3FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB3SPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEXATTRIB3SVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4BVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIB4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB4FPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEXATTRIB4FVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB4IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NBVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4NIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NSVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4NUBPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	t
PFNGLVERTEXATTRIB4NUBVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4NUIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4NUSVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIB4SPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEXATTRIB4SVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4UBVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4USVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBBINDINGPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);$/;"	t
PFNGLVERTEXATTRIBDIVISORPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);$/;"	t
PFNGLVERTEXATTRIBFORMATPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBI1IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);$/;"	t
PFNGLVERTEXATTRIBI1IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI1UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);$/;"	t
PFNGLVERTEXATTRIBI1UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI2IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);$/;"	t
PFNGLVERTEXATTRIBI2IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI2UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);$/;"	t
PFNGLVERTEXATTRIBI2UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI3IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);$/;"	t
PFNGLVERTEXATTRIBI3IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);$/;"	t
PFNGLVERTEXATTRIBI3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4BVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIBI4IPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLVERTEXATTRIBI4IVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI4SVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIBI4UBVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIBI4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);$/;"	t
PFNGLVERTEXATTRIBI4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4USVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBIFORMATPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBIPOINTERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	t
PFNGLVERTEXATTRIBL1DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIBL1DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL2DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIBL2DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL3DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIBL3DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL4DPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIBL4DVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBLFORMATPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBLPOINTERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	t
PFNGLVERTEXATTRIBP1UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP1UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP2UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP2UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBPOINTERPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);$/;"	t
PFNGLVERTEXBINDINGDIVISORPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);$/;"	t
PFNGLVERTEXP2UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);$/;"	t
PFNGLVERTEXP2UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);$/;"	t
PFNGLVERTEXP3UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);$/;"	t
PFNGLVERTEXP3UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);$/;"	t
PFNGLVERTEXP4UIPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);$/;"	t
PFNGLVERTEXP4UIVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);$/;"	t
PFNGLVIEWPORTARRAYVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);$/;"	t
PFNGLVIEWPORTINDEXEDFPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);$/;"	t
PFNGLVIEWPORTINDEXEDFVPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVIEWPORTPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLWAITSYNCPROC	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
Pair	imgui-master/imgui.h	/^        Pair(ImGuiID _key, float _val_f) { key = _key; val_f = _val_f; }$/;"	f	struct:ImGuiStorage::Pair
Pair	imgui-master/imgui.h	/^        Pair(ImGuiID _key, int _val_i)   { key = _key; val_i = _val_i; }$/;"	f	struct:ImGuiStorage::Pair
Pair	imgui-master/imgui.h	/^        Pair(ImGuiID _key, void* _val_p) { key = _key; val_p = _val_p; }$/;"	f	struct:ImGuiStorage::Pair
Pair	imgui-master/imgui.h	/^    struct Pair$/;"	s	struct:ImGuiStorage
ParentLayoutType	imgui-master/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the time of Begin()$/;"	m	struct:ImGuiWindowTempData
ParentWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popup window, this is pointing to our parent. Otherwise NULL.$/;"	m	struct:ImGuiWindow
ParentWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*        ParentWindow;   \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupRef
PassFilter	imgui-master/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter
PatchFormatStringFloatToInt	imgui-master/imgui_widgets.cpp	/^static const char* PatchFormatStringFloatToInt(const char* fmt)$/;"	f	file:
PathArcTo	imgui-master/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments)$/;"	f	class:ImDrawList
PathArcToFast	imgui-master/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12)$/;"	f	class:ImDrawList
PathBezierCurveTo	imgui-master/imgui_draw.cpp	/^void ImDrawList::PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments)$/;"	f	class:ImDrawList
PathBezierToCasteljau	imgui-master/imgui_draw.cpp	/^static void PathBezierToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float tess_tol, int level)$/;"	f	file:
PathClear	imgui-master/imgui.h	/^    inline    void  PathClear()                                                 { _Path.resize(0); }$/;"	f	struct:ImDrawList
PathFillConvex	imgui-master/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); PathClear(); }  \/\/ Note: Anti-aliased filling requires points to be in clockwise order.$/;"	f	struct:ImDrawList
PathLineTo	imgui-master/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }$/;"	f	struct:ImDrawList
PathLineToMergeDuplicate	imgui-master/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path[_Path.Size-1], &pos, 8) != 0) _Path.push_back(pos); }$/;"	f	struct:ImDrawList
PathRect	imgui-master/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, int rounding_corners)$/;"	f	class:ImDrawList
PathStroke	imgui-master/imgui.h	/^    inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); PathClear(); }$/;"	f	struct:ImDrawList
PhysicalDevice	imgui-master/examples/imgui_impl_vulkan.h	/^    VkPhysicalDevice                PhysicalDevice;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
PipelineCache	imgui-master/examples/imgui_impl_vulkan.h	/^    VkPipelineCache                 PipelineCache;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
PixelHeight	imgui-master/misc/freetype/imgui_freetype.cpp	/^        uint32_t    PixelHeight;        \/\/ Size this font was generated with.$/;"	m	struct:__anon1::FontInfo	file:
PixelSnapH	imgui-master/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH\/V to 1.$/;"	m	struct:ImFontConfig
PixelsToOffsetNorm	imgui-master/imgui.cpp	/^static float PixelsToOffsetNorm(const ImGuiColumnsSet* columns, float offset)$/;"	f	file:
PlatformImeLastPos	imgui-master/imgui_internal.h	/^    ImVec2                  PlatformImePos, PlatformImeLastPos; \/\/ Cursor position request & last passed to the OS Input Method Editor$/;"	m	struct:ImGuiContext
PlatformImePos	imgui-master/imgui_internal.h	/^    ImVec2                  PlatformImePos, PlatformImeLastPos; \/\/ Cursor position request & last passed to the OS Input Method Editor$/;"	m	struct:ImGuiContext
PlotEx	imgui-master/imgui_widgets.cpp	/^void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)$/;"	f	class:ImGui
PlotHistogram	imgui-master/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)$/;"	f	class:ImGui
PlotHistogram	imgui-master/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)$/;"	f	class:ImGui
PlotLines	imgui-master/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)$/;"	f	class:ImGui
PlotLines	imgui-master/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)$/;"	f	class:ImGui
Plot_ArrayGetter	imgui-master/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	file:
PopAllowKeyboardFocus	imgui-master/imgui.cpp	/^void ImGui::PopAllowKeyboardFocus()$/;"	f	class:ImGui
PopButtonRepeat	imgui-master/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui
PopClipRect	imgui-master/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui
PopClipRect	imgui-master/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList
PopFont	imgui-master/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui
PopID	imgui-master/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui
PopItemFlag	imgui-master/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui
PopItemWidth	imgui-master/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui
PopStyleColor	imgui-master/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui
PopStyleVar	imgui-master/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui
PopTextWrapPos	imgui-master/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui
PopTextureID	imgui-master/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList
PopupBorderSize	imgui-master/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
PopupId	imgui-master/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when this window is used as a popup\/menu (because we use generic Name\/ID for recycling)$/;"	m	struct:ImGuiWindow
PopupId	imgui-master/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupRef
PopupRounding	imgui-master/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)$/;"	m	struct:ImGuiStyle
Pos	imgui-master/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData
Pos	imgui-master/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up to nearest pixel)$/;"	m	struct:ImGuiWindow
Pos	imgui-master/imgui_internal.h	/^    ImVec2      Pos;$/;"	m	struct:ImGuiWindowSettings
Pos	imgui-master/imgui_internal.h	/^    float       Pos[4], NextWidths[4];$/;"	m	struct:ImGuiMenuColumns
PosCond	imgui-master/imgui_internal.h	/^    ImGuiCond               PosCond;$/;"	m	struct:ImGuiNextWindowData
PosPivotVal	imgui-master/imgui_internal.h	/^    ImVec2                  PosPivotVal;$/;"	m	struct:ImGuiNextWindowData
PosVal	imgui-master/imgui_internal.h	/^    ImVec2                  PosVal;$/;"	m	struct:ImGuiNextWindowData
PresentMode	imgui-master/examples/imgui_impl_vulkan.h	/^    VkPresentModeKHR    PresentMode;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
PrevFrameVisible	imgui-master/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar
PrevLineSize	imgui-master/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData
PrevLineTextBaseOffset	imgui-master/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData
Preview	imgui-master/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)$/;"	m	struct:ImGuiPayload
PrimQuadUV	imgui-master/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col)$/;"	f	class:ImDrawList
PrimRect	imgui-master/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList
PrimRectUV	imgui-master/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& uv_c, ImU32 col)$/;"	f	class:ImDrawList
PrimReserve	imgui-master/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList
PrimVtx	imgui-master/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }$/;"	f	struct:ImDrawList
PrimWriteIdx	imgui-master/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }$/;"	f	struct:ImDrawList
PrimWriteVtx	imgui-master/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }$/;"	f	struct:ImDrawList
PrintFmt	imgui-master/imgui_widgets.cpp	/^    const char* PrintFmt;   \/\/ Unused$/;"	m	struct:ImGuiDataTypeInfo	file:
PrivateClipboard	imgui-master/imgui_internal.h	/^    ImVector<char>          PrivateClipboard;                   \/\/ If no custom clipboard handler is defined$/;"	m	struct:ImGuiContext
ProgressBar	imgui-master/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui
PushAllowKeyboardFocus	imgui-master/imgui.cpp	/^void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)$/;"	f	class:ImGui
PushButtonRepeat	imgui-master/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui
PushClipRect	imgui-master/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)$/;"	f	class:ImGui
PushClipRect	imgui-master/imgui_draw.cpp	/^void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect)$/;"	f	class:ImDrawList
PushClipRectFullScreen	imgui-master/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList
PushColumnClipRect	imgui-master/imgui.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui
PushFont	imgui-master/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui
PushID	imgui-master/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui
PushID	imgui-master/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui
PushID	imgui-master/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui
PushID	imgui-master/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui
PushItemFlag	imgui-master/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui
PushItemWidth	imgui-master/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui
PushMultiItemsWidths	imgui-master/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui
PushStyleColor	imgui-master/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui
PushStyleColor	imgui-master/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui
PushStyleVar	imgui-master/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui
PushStyleVar	imgui-master/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui
PushTextWrapPos	imgui-master/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui
PushTextureID	imgui-master/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList
Queue	imgui-master/examples/imgui_impl_vulkan.h	/^    VkQueue                         Queue;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
QueueFamily	imgui-master/examples/imgui_impl_vulkan.h	/^    uint32_t                        QueueFamily;$/;"	m	struct:ImGui_ImplVulkan_InitInfo
RadioButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui
RadioButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui
Rasterize	imgui-master/examples/example_glfw_opengl2/main.cpp	/^void Rasterize()$/;"	f
RasterizerFlags	imgui-master/imgui.h	/^    unsigned int    RasterizerFlags;        \/\/ 0x00     \/\/ Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.$/;"	m	struct:ImFontConfig
RasterizerFlags	imgui-master/misc/freetype/imgui_freetype.h	/^    enum RasterizerFlags $/;"	g	namespace:ImGuiFreeType
RasterizerMultiply	imgui-master/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.$/;"	m	struct:ImFontConfig
ReadLineFn	imgui-master/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, const char* line); \/\/ Read: Called for every line of text within an ini entry$/;"	m	struct:ImGuiSettingsHandler
ReadOpenFn	imgui-master/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name);              \/\/ Read: Called when entering into a new ini entry e.g. "[Window][Name]"$/;"	m	struct:ImGuiSettingsHandler
Rect	imgui-master/imgui_internal.h	/^    ImRect      Rect() const                            { return ImRect(Pos.x, Pos.y, Pos.x+Size.x, Pos.y+Size.y); }$/;"	f	struct:ImGuiWindow
RectRel	imgui-master/imgui_internal.h	/^    ImRect        RectRel;      \/\/ Best candidate bounding box in window relative space$/;"	m	struct:ImGuiNavMoveResult
RefFrame	imgui-master/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame
Remove	imgui-master/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Data[idx].~T(); *(int*)&Data[idx] = FreeIdx; FreeIdx = idx; Map.SetInt(key, -1); }$/;"	f	struct:ImPool
Remove	imgui-master/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool
Render	imgui-master/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui
RenderArrow	imgui-master/imgui.cpp	/^void ImGui::RenderArrow(ImVec2 p_min, ImGuiDir dir, float scale)$/;"	f	class:ImGui
RenderArrowPointingAt	imgui-master/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col)$/;"	f	class:ImGui
RenderArrowsForVerticalBar	imgui-master/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float bar_w)$/;"	f	file:
RenderBullet	imgui-master/imgui.cpp	/^void ImGui::RenderBullet(ImVec2 pos)$/;"	f	class:ImGui
RenderChar	imgui-master/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) const$/;"	f	class:ImFont
RenderCheckMark	imgui-master/imgui.cpp	/^void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui
RenderColorRectWithAlphaCheckerboard	imgui-master/imgui_widgets.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImVec2 p_min, ImVec2 p_max, ImU32 col, float grid_step, ImVec2 grid_off, float rounding, int rounding_corners_flags)$/;"	f	class:ImGui
RenderCompleteSemaphore	imgui-master/examples/imgui_impl_vulkan.h	/^    VkSemaphore         RenderCompleteSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameData
RenderDrawListsFn	imgui-master/imgui.h	/^    void        (*RenderDrawListsFn)(ImDrawData* data);$/;"	m	struct:ImGuiIO
RenderDrawListsFnUnused	imgui-master/imgui.h	/^    void*       RenderDrawListsFnUnused;$/;"	m	struct:ImGuiIO
RenderFrame	imgui-master/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui
RenderFrameBorder	imgui-master/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui
RenderMouseCursor	imgui-master/imgui_draw.cpp	/^void ImGui::RenderMouseCursor(ImDrawList* draw_list, ImVec2 pos, float scale, ImGuiMouseCursor mouse_cursor)$/;"	f	class:ImGui
RenderNavHighlight	imgui-master/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui
RenderPass	imgui-master/examples/imgui_impl_vulkan.h	/^    VkRenderPass        RenderPass;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
RenderPixelEllipsis	imgui-master/imgui_draw.cpp	/^void ImGui::RenderPixelEllipsis(ImDrawList* draw_list, ImFont* font, ImVec2 pos, int count, ImU32 col)$/;"	f	class:ImGui
RenderRectFilledRangeH	imgui-master/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)$/;"	f	class:ImGui
RenderText	imgui-master/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_hash)$/;"	f	class:ImGui
RenderText	imgui-master/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip) const$/;"	f	class:ImFont
RenderTextClipped	imgui-master/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)$/;"	f	class:ImGui
RenderTextClippedEx	imgui-master/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_display_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)$/;"	f	class:ImGui
RenderTextWrapped	imgui-master/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width)$/;"	f	class:ImGui
ReorderRequestDir	imgui-master/imgui_internal.h	/^    int                 ReorderRequestDir;$/;"	m	struct:ImGuiTabBar
ReorderRequestTabId	imgui-master/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar
Reserve	imgui-master/imgui_internal.h	/^    void        Reserve(int capacity)               { Data.reserve(capacity); Map.Data.reserve(capacity); }$/;"	f	struct:ImPool
ResetMouseDragDelta	imgui-master/imgui.cpp	/^void ImGui::ResetMouseDragDelta(int button)$/;"	f	class:ImGui
ResizeSwapChain	imgui-master/examples/example_win32_directx12/main.cpp	/^void ResizeSwapChain(HWND hWnd, int width, int height)$/;"	f
Restore	imgui-master/imgui_internal.h	/^    void Restore() const    { ImGuiWindow* window = GImGui->CurrentWindow; window->DC.LastItemId = LastItemId; window->DC.LastItemStatusFlags = LastItemStatusFlags; window->DC.LastItemRect = LastItemRect; window->DC.LastItemDisplayRect = LastItemDisplayRect; }$/;"	f	struct:ImGuiItemHoveredDataBackup
RootWindow	imgui-master/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first ancestor that is not a child window.$/;"	m	struct:ImGuiWindow
RootWindowForNav	imgui-master/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first ancestor which doesn't have the NavFlattened flag.$/;"	m	struct:ImGuiWindow
RootWindowForTitleBarHighlight	imgui-master/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first ancestor which will display TitleBgActive color when this window is active.$/;"	m	struct:ImGuiWindow
RoundScalarWithFormatT	imgui-master/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui
SDL_Event	imgui-master/examples/imgui_impl_sdl.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_HAS_CAPTURE_MOUSE	imgui-master/examples/imgui_impl_sdl.cpp	/^#define SDL_HAS_CAPTURE_MOUSE /;"	d	file:
SDL_HAS_MOUSE_FOCUS_CLICKTHROUGH	imgui-master/examples/imgui_impl_sdl.cpp	/^#define SDL_HAS_MOUSE_FOCUS_CLICKTHROUGH /;"	d	file:
SDL_HAS_VULKAN	imgui-master/examples/imgui_impl_sdl.cpp	/^#define SDL_HAS_VULKAN /;"	d	file:
SDL_WINDOW_VULKAN	imgui-master/examples/imgui_impl_sdl.cpp	/^static const Uint32 SDL_WINDOW_VULKAN = 0x10000000;$/;"	v	file:
SOURCES	imgui-master/examples/example_glfw_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui-master/examples/example_glfw_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui-master/examples/example_sdl_opengl2/Makefile	/^SOURCES = main.cpp ..\/imgui_impl_sdl.cpp ..\/imgui_impl_opengl2.cpp$/;"	m
SOURCES	imgui-master/examples/example_sdl_opengl2/build_win32.bat	/^set SOURCES=main.cpp ..\\imgui_impl_sdl.cpp ..\\imgui_impl_opengl2.cpp ..\\..\\imgui*.cpp$/;"	v
SOURCES	imgui-master/examples/example_sdl_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui-master/examples/example_sdl_opengl3/build_win32.bat	/^set SOURCES=main.cpp ..\\imgui_impl_sdl.cpp ..\\imgui_impl_opengl3.cpp ..\\..\\imgui*.cpp ..\\libs\\gl3w\\GL\\gl3w.c$/;"	v
STBRP_ASSERT	imgui-master/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	imgui-master/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_ASSERT	imgui-master/misc/freetype/imgui_freetype.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_DEF	imgui-master/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	imgui-master/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anon30
STBRP_HEURISTIC_Skyline_BL_sortHeight	imgui-master/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anon30
STBRP_HEURISTIC_Skyline_default	imgui-master/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anon30
STBRP_SORT	imgui-master/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	imgui-master/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	imgui-master/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP_STATIC	imgui-master/misc/freetype/imgui_freetype.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	imgui-master/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	imgui-master/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	imgui-master/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anon31
STBRP__MAXVAL	imgui-master/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	imgui-master/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	imgui-master/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	imgui-master/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	imgui-master/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	imgui-master/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	imgui-master/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	imgui-master/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	imgui-master/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	imgui-master/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	imgui-master/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	imgui-master/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon19
STBTT_MAC_EID_CHINESE_TRAD	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon19
STBTT_MAC_EID_GREEK	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon19
STBTT_MAC_EID_HEBREW	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon19
STBTT_MAC_EID_JAPANESE	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon19
STBTT_MAC_EID_KOREAN	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon19
STBTT_MAC_EID_ROMAN	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon19
STBTT_MAC_EID_RUSSIAN	imgui-master/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon19
STBTT_MAC_LANG_ARABIC	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon21
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon21
STBTT_MAC_LANG_CHINESE_TRAD	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon21
STBTT_MAC_LANG_DUTCH	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon21
STBTT_MAC_LANG_ENGLISH	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon21
STBTT_MAC_LANG_FRENCH	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon21
STBTT_MAC_LANG_GERMAN	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon21
STBTT_MAC_LANG_HEBREW	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon21
STBTT_MAC_LANG_ITALIAN	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon21
STBTT_MAC_LANG_JAPANESE	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon21
STBTT_MAC_LANG_KOREAN	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon21
STBTT_MAC_LANG_RUSSIAN	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon21
STBTT_MAC_LANG_SPANISH	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon21
STBTT_MAC_LANG_SWEDISH	imgui-master/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon21
STBTT_MAX_OVERSAMPLE	imgui-master/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	imgui-master/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon18
STBTT_MS_EID_SYMBOL	imgui-master/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon18
STBTT_MS_EID_UNICODE_BMP	imgui-master/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon18
STBTT_MS_EID_UNICODE_FULL	imgui-master/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon18
STBTT_MS_LANG_CHINESE	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon20
STBTT_MS_LANG_DUTCH	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon20
STBTT_MS_LANG_ENGLISH	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon20
STBTT_MS_LANG_FRENCH	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon20
STBTT_MS_LANG_GERMAN	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon20
STBTT_MS_LANG_HEBREW	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon20
STBTT_MS_LANG_ITALIAN	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon20
STBTT_MS_LANG_JAPANESE	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon20
STBTT_MS_LANG_KOREAN	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon20
STBTT_MS_LANG_RUSSIAN	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon20
STBTT_MS_LANG_SPANISH	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon20
STBTT_MS_LANG_SWEDISH	imgui-master/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon20
STBTT_PLATFORM_ID_ISO	imgui-master/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon16
STBTT_PLATFORM_ID_MAC	imgui-master/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon16
STBTT_PLATFORM_ID_MICROSOFT	imgui-master/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon16
STBTT_PLATFORM_ID_UNICODE	imgui-master/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon16
STBTT_POINT_SIZE	imgui-master/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	imgui-master/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	imgui-master/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	imgui-master/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon17
STBTT_UNICODE_EID_UNICODE_1_0	imgui-master/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon17
STBTT_UNICODE_EID_UNICODE_1_1	imgui-master/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon17
STBTT_UNICODE_EID_UNICODE_2_0_BMP	imgui-master/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon17
STBTT_UNICODE_EID_UNICODE_2_0_FULL	imgui-master/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon17
STBTT__COMPARE	imgui-master/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	imgui-master/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	imgui-master/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__CSERR	imgui-master/imstb_truetype.h	/^#undef STBTT__CSERR$/;"	d
STBTT__NOTUSED	imgui-master/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	imgui-master/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	imgui-master/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	imgui-master/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	imgui-master/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	imgui-master/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	imgui-master/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	imgui-master/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	imgui-master/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	imgui-master/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	imgui-master/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	imgui-master/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	imgui-master/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	imgui-master/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	imgui-master/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	imgui-master/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	imgui-master/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	imgui-master/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	imgui-master/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	imgui-master/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	imgui-master/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	imgui-master/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	imgui-master/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	imgui-master/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	imgui-master/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	imgui-master/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	imgui-master/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	imgui-master/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon13
STBTT_vcurve	imgui-master/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon13
STBTT_vline	imgui-master/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon13
STBTT_vmove	imgui-master/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon13
STB_INCLUDE_STB_RECT_PACK_H	imgui-master/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	imgui-master/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_IMPLEMENTATION	imgui-master/misc/freetype/imgui_freetype.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	imgui-master/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_TEXTEDIT_CHARTYPE	imgui-master/imgui_internal.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_CHARTYPE	imgui-master/imgui_internal.h	/^#undef STB_TEXTEDIT_CHARTYPE$/;"	d
STB_TEXTEDIT_CHARTYPE	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_DELETECHARS	imgui-master/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_GETCHAR	imgui-master/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                      { return obj->TextW[idx]; }$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_GETWIDTH	imgui-master/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)  { ImWchar c = obj->TextW[line_start_idx+char_idx]; if (c == '\\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; return GImGui->Font->GetCharAdvance(c) * (GImGui->FontSize \/ GImGui->Font->FontSize); }$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_GETWIDTH_NEWLINE	imgui-master/imgui_internal.h	/^#define STB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
STB_TEXTEDIT_IMPLEMENTATION	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_INSERTCHARS	imgui-master/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text, int new_text_len)$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_KEYTOTEXT	imgui-master/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                    { return key >= 0x10000 ? 0 : key; }$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_KEYTYPE	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_REDO	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	imgui-master/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_start_idx)$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_MOVEWORDLEFT	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	imgui-master/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_MOVEWORDRIGHT	imgui-master/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	imgui-master/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	imgui-master/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_right(obj, idx)) idx++; return idx > len ? len : idx; }$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_NEWLINE	imgui-master/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	m	namespace:ImGuiStb	file:
STB_TEXTEDIT_POSITIONTYPE	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_POSITIONTYPE /;"	d
STB_TEXTEDIT_STRING	imgui-master/imgui_internal.h	/^#define STB_TEXTEDIT_STRING /;"	d
STB_TEXTEDIT_STRING	imgui-master/imgui_internal.h	/^#undef STB_TEXTEDIT_STRING$/;"	d
STB_TEXTEDIT_STRINGLEN	imgui-master/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                             { return obj->CurLenW; }$/;"	f	namespace:ImGuiStb
STB_TEXTEDIT_UNDOCHARCOUNT	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_memmove	imgui-master/imstb_textedit.h	/^#define STB_TEXTEDIT_memmove /;"	d
STB_TEXT_HAS_SELECTION	imgui-master/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	imgui-master/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	imgui-master/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anon5
STB__SCRAMBLE	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define STB__SCRAMBLE(/;"	d	file:
STB__TRY	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define STB__TRY(/;"	d	file:
SameLine	imgui-master/imgui.cpp	/^void ImGui::SameLine(float pos_x, float spacing_w)$/;"	f	class:ImGui
SaveIniSettingsToDisk	imgui-master/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui
SaveIniSettingsToMemory	imgui-master/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui
ScalarAsInputTextId	imgui-master/imgui_internal.h	/^    ImGuiID                 ScalarAsInputTextId;                \/\/ Temporary text input when CTRL+clicking on a slider, etc.$/;"	m	struct:ImGuiContext
Scale	imgui-master/imgui.h	/^    float                       Scale;              \/\/ = 1.f        \/\/ Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()$/;"	m	struct:ImFont
ScaleAllSizes	imgui-master/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle
ScaleClipRects	imgui-master/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& scale)$/;"	f	class:ImDrawData
ScanFmt	imgui-master/imgui_widgets.cpp	/^    const char* ScanFmt;$/;"	m	struct:ImGuiDataTypeInfo	file:
Scroll	imgui-master/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow
ScrollTarget	imgui-master/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. stored as cursor position with scrolling canceled out, so the highest point is always 0.0f. (FLT_MAX for no change)$/;"	m	struct:ImGuiWindow
ScrollTargetCenterRatio	imgui-master/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that target position is at top, 0.5f = scroll so that target position is centered$/;"	m	struct:ImGuiWindow
ScrollToBottom	imgui-master/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	file:
ScrollToBottom	imgui-master/imgui_demo.cpp	/^    bool                ScrollToBottom;$/;"	m	struct:ExampleAppLog	file:
ScrollX	imgui-master/imgui_internal.h	/^    float                   ScrollX;$/;"	m	struct:ImGuiInputTextState
Scrollbar	imgui-master/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiLayoutType direction)$/;"	f	class:ImGui
ScrollbarClickDeltaToGrabCenter	imgui-master/imgui_internal.h	/^    ImVec2                  ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and center of grab box, normalized in parent space. Use storage?$/;"	m	struct:ImGuiContext
ScrollbarRounding	imgui-master/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle
ScrollbarSize	imgui-master/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the horizontal scrollbar.$/;"	m	struct:ImGuiStyle
ScrollbarSizes	imgui-master/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by scrollbars on each axis$/;"	m	struct:ImGuiWindow
ScrollbarX	imgui-master/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;$/;"	m	struct:ImGuiWindow
ScrollbarY	imgui-master/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;$/;"	m	struct:ImGuiWindow
ScrollingAnim	imgui-master/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar
ScrollingTarget	imgui-master/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar
SelectAll	imgui-master/imgui_internal.h	/^    void                SelectAll()                 { StbState.select_start = 0; StbState.cursor = StbState.select_end = CurLenW; StbState.has_preferred_x = false; }$/;"	f	struct:ImGuiInputTextState
Selectable	imgui-master/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)$/;"	f	class:ImGui
Selectable	imgui-master/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)$/;"	f	class:ImGui
SelectedAllMouseLock	imgui-master/imgui_internal.h	/^    bool                    SelectedAllMouseLock;$/;"	m	struct:ImGuiInputTextState
SelectedTabId	imgui-master/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab$/;"	m	struct:ImGuiTabBar
SelectionEnd	imgui-master/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-write   \/\/ [Completion,History,Always]$/;"	m	struct:ImGuiInputTextCallbackData
SelectionStart	imgui-master/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-write   \/\/ [Completion,History,Always] == to SelectionEnd when no selection)$/;"	m	struct:ImGuiInputTextCallbackData
Separator	imgui-master/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui
SetActiveID	imgui-master/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui
SetAllInt	imgui-master/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage
SetAllocatorFunctions	imgui-master/imgui.cpp	/^void ImGui::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void(*free_func)(void* ptr, void* user_data), void* user_data)$/;"	f	class:ImGui
SetBit	imgui-master/imgui.h	/^        void           SetBit(int n)        { UsedChars[n >> 3] |= 1 << (n & 7); }  \/\/ Set bit 'c' in the array$/;"	f	struct:ImFontAtlas::GlyphRangesBuilder
SetBool	imgui-master/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage
SetClipboardText	imgui-master/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui
SetClipboardTextFn	imgui-master/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO
SetClipboardTextFn_DefaultImpl	imgui-master/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	file:
SetColorEditOptions	imgui-master/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui
SetColumnOffset	imgui-master/imgui.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui
SetColumnWidth	imgui-master/imgui.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui
SetCurrentContext	imgui-master/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui
SetCurrentFont	imgui-master/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui
SetCurrentWindow	imgui-master/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	file:
SetCursorPos	imgui-master/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui
SetCursorPosX	imgui-master/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui
SetCursorPosY	imgui-master/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui
SetCursorPosYAndSetupDummyPrevLine	imgui-master/imgui.cpp	/^static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)$/;"	f	file:
SetCursorScreenPos	imgui-master/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui
SetDragDropPayload	imgui-master/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond cond)$/;"	f	class:ImGui
SetFallbackChar	imgui-master/imgui_draw.cpp	/^void ImFont::SetFallbackChar(ImWchar c)$/;"	f	class:ImFont
SetFloat	imgui-master/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage
SetFocusID	imgui-master/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui
SetHSV	imgui-master/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }$/;"	f	struct:ImColor
SetHoveredID	imgui-master/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui
SetInt	imgui-master/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage
SetItemAllowOverlap	imgui-master/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui
SetItemDefaultFocus	imgui-master/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui
SetKeyboardFocusHere	imgui-master/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui
SetMouseCursor	imgui-master/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui
SetNavID	imgui-master/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, int nav_layer)$/;"	f	class:ImGui
SetNavIDWithRectRel	imgui-master/imgui.cpp	/^void ImGui::SetNavIDWithRectRel(ImGuiID id, int nav_layer, const ImRect& rect_rel)$/;"	f	class:ImGui
SetNextTreeNodeOpen	imgui-master/imgui_widgets.cpp	/^void ImGui::SetNextTreeNodeOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui
SetNextWindowBgAlpha	imgui-master/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui
SetNextWindowCollapsed	imgui-master/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui
SetNextWindowContentSize	imgui-master/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui
SetNextWindowContentWidth	imgui-master/imgui.h	/^    static inline void  SetNextWindowContentWidth(float w)    { SetNextWindowContentSize(ImVec2(w, 0.0f)); }$/;"	f	namespace:ImGui
SetNextWindowFocus	imgui-master/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui
SetNextWindowPos	imgui-master/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui
SetNextWindowPosCenter	imgui-master/imgui.h	/^    static inline void  SetNextWindowPosCenter(ImGuiCond c=0) { ImGuiIO& io = GetIO(); SetNextWindowPos(ImVec2(io.DisplaySize.x * 0.5f, io.DisplaySize.y * 0.5f), c, ImVec2(0.5f, 0.5f)); }$/;"	f	namespace:ImGui
SetNextWindowSize	imgui-master/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui
SetNextWindowSizeConstraints	imgui-master/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_user_data)$/;"	f	class:ImGui
SetPixelHeight	imgui-master/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::SetPixelHeight(int pixel_height) $/;"	f	class:__anon1::FreeTypeFont
SetScrollFromPosY	imgui-master/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui
SetScrollHere	imgui-master/imgui.h	/^    static inline void  SetScrollHere(float center_ratio=0.5f){ SetScrollHereY(center_ratio); }$/;"	f	namespace:ImGui
SetScrollHereY	imgui-master/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui
SetScrollX	imgui-master/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui
SetScrollY	imgui-master/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui
SetStateStorage	imgui-master/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui
SetTabItemClosed	imgui-master/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui
SetTexID	imgui-master/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas
SetTooltip	imgui-master/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui
SetTooltipV	imgui-master/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui
SetVoidPtr	imgui-master/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage
SetWindowCollapsed	imgui-master/imgui.cpp	/^static void SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	file:
SetWindowCollapsed	imgui-master/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowCollapsed	imgui-master/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowCollapsedAllowFlags	imgui-master/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags;       \/\/ store acceptable condition flags for SetNextWindowCollapsed() use.$/;"	m	struct:ImGuiWindow
SetWindowConditionAllowFlags	imgui-master/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	file:
SetWindowFocus	imgui-master/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui
SetWindowFocus	imgui-master/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui
SetWindowFontScale	imgui-master/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui
SetWindowPos	imgui-master/imgui.cpp	/^static void SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	file:
SetWindowPos	imgui-master/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowPos	imgui-master/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowPosAllowFlags	imgui-master/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags;             \/\/ store acceptable condition flags for SetNextWindowPos() use.$/;"	m	struct:ImGuiWindow
SetWindowPosPivot	imgui-master/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for positioning. ImVec2(0,0) when positioning from top-left corner; ImVec2(0.5f,0.5f) for centering; ImVec2(1,1) for bottom right.$/;"	m	struct:ImGuiWindow
SetWindowPosVal	imgui-master/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when using a non-zero Pivot (position set needs to be processed when we know the window size)$/;"	m	struct:ImGuiWindow
SetWindowScrollX	imgui-master/imgui.cpp	/^void ImGui::SetWindowScrollX(ImGuiWindow* window, float new_scroll_x)$/;"	f	class:ImGui
SetWindowScrollY	imgui-master/imgui.cpp	/^void ImGui::SetWindowScrollY(ImGuiWindow* window, float new_scroll_y)$/;"	f	class:ImGui
SetWindowSize	imgui-master/imgui.cpp	/^static void SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	file:
SetWindowSize	imgui-master/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowSize	imgui-master/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui
SetWindowSizeAllowFlags	imgui-master/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags;            \/\/ store acceptable condition flags for SetNextWindowSize() use.$/;"	m	struct:ImGuiWindow
SettingsDirtyTimer	imgui-master/imgui_internal.h	/^    float                          SettingsDirtyTimer;          \/\/ Save .ini Settings to memory when time reaches zero$/;"	m	struct:ImGuiContext
SettingsHandlerWindow_ReadLine	imgui-master/imgui.cpp	/^static void SettingsHandlerWindow_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, const char* line)$/;"	f	file:
SettingsHandlerWindow_ReadOpen	imgui-master/imgui.cpp	/^static void* SettingsHandlerWindow_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* name)$/;"	f	file:
SettingsHandlerWindow_WriteAll	imgui-master/imgui.cpp	/^static void SettingsHandlerWindow_WriteAll(ImGuiContext* imgui_ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* buf)$/;"	f	file:
SettingsHandlers	imgui-master/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler> SettingsHandlers;            \/\/ List of .ini settings handlers$/;"	m	struct:ImGuiContext
SettingsIdx	imgui-master/imgui_internal.h	/^    int                     SettingsIdx;                        \/\/ Index into SettingsWindow[] (indices are always valid as we only grow the array from the back)$/;"	m	struct:ImGuiWindow
SettingsIniData	imgui-master/imgui_internal.h	/^    ImGuiTextBuffer                SettingsIniData;             \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext
SettingsLoaded	imgui-master/imgui_internal.h	/^    bool                           SettingsLoaded;$/;"	m	struct:ImGuiContext
SettingsWindows	imgui-master/imgui_internal.h	/^    ImVector<ImGuiWindowSettings>  SettingsWindows;             \/\/ ImGuiWindow .ini settings entries (parsed from the last loaded .ini file and maintained on saving)$/;"	m	struct:ImGuiContext
SetupDrawData	imgui-master/imgui.cpp	/^static void SetupDrawData(ImVector<ImDrawList*>* draw_lists, ImDrawData* draw_data)$/;"	f	file:
SetupVulkan	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkan(const char** extensions, uint32_t extensions_count)$/;"	f	file:
SetupVulkan	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static void SetupVulkan(const char** extensions, uint32_t extensions_count)$/;"	f	file:
SetupVulkanWindowData	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkanWindowData(ImGui_ImplVulkanH_WindowData* wd, VkSurfaceKHR surface, int width, int height)$/;"	f	file:
SetupVulkanWindowData	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static void SetupVulkanWindowData(ImGui_ImplVulkanH_WindowData* wd, VkSurfaceKHR surface, int width, int height)$/;"	f	file:
ShadeVertsLinearColorGradientKeepAlpha	imgui-master/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1)$/;"	f	class:ImGui
ShadeVertsLinearUV	imgui-master/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, bool clamp)$/;"	f	class:ImGui
ShowAboutWindow	imgui-master/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui
ShowAboutWindow	imgui-master/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui
ShowDemoWindow	imgui-master/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui
ShowDemoWindow	imgui-master/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui
ShowDemoWindowColumns	imgui-master/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	file:
ShowDemoWindowLayout	imgui-master/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	file:
ShowDemoWindowMisc	imgui-master/imgui_demo.cpp	/^static void ShowDemoWindowMisc()$/;"	f	file:
ShowDemoWindowPopups	imgui-master/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	file:
ShowDemoWindowWidgets	imgui-master/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	file:
ShowExampleAppAutoResize	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	file:
ShowExampleAppConsole	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	file:
ShowExampleAppConstrainedResize	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	file:
ShowExampleAppCustomRendering	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	file:
ShowExampleAppDocuments	imgui-master/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f
ShowExampleAppLayout	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	file:
ShowExampleAppLog	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	file:
ShowExampleAppLongText	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	file:
ShowExampleAppMainMenuBar	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	file:
ShowExampleAppPropertyEditor	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	file:
ShowExampleAppSimpleOverlay	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	file:
ShowExampleAppWindowTitles	imgui-master/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	file:
ShowExampleMenuFile	imgui-master/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	file:
ShowFontSelector	imgui-master/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui
ShowHelpMarker	imgui-master/imgui_demo.cpp	/^static void ShowHelpMarker(const char* desc)$/;"	f	file:
ShowMetricsWindow	imgui-master/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui
ShowStyleEditor	imgui-master/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui
ShowStyleEditor	imgui-master/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui
ShowStyleSelector	imgui-master/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui
ShowTestWindow	imgui-master/imgui.h	/^    static inline void  ShowTestWindow()                      { return ShowDemoWindow(); }$/;"	f	namespace:ImGui
ShowUserGuide	imgui-master/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui
ShowUserGuide	imgui-master/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui
Shutdown	imgui-master/imgui.cpp	/^void ImGui::Shutdown(ImGuiContext* context)$/;"	f	class:ImGui
Shutdown	imgui-master/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::Shutdown()$/;"	f	class:__anon1::FreeTypeFont
Size	imgui-master/imgui.h	/^    int                         Size;$/;"	m	class:ImVector
Size	imgui-master/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or collapsed title bar size)$/;"	m	struct:ImGuiWindow
Size	imgui-master/imgui_internal.h	/^    ImVec2      Size;$/;"	m	struct:ImGuiWindowSettings
Size	imgui-master/imgui_widgets.cpp	/^    size_t      Size;$/;"	m	struct:ImGuiDataTypeInfo	file:
SizeCallback	imgui-master/imgui_internal.h	/^    ImGuiSizeCallback       SizeCallback;$/;"	m	struct:ImGuiNextWindowData
SizeCallbackUserData	imgui-master/imgui_internal.h	/^    void*                   SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData
SizeCond	imgui-master/imgui_internal.h	/^    ImGuiCond               SizeCond;$/;"	m	struct:ImGuiNextWindowData
SizeConstraintCond	imgui-master/imgui_internal.h	/^    ImGuiCond               SizeConstraintCond;$/;"	m	struct:ImGuiNextWindowData
SizeConstraintRect	imgui-master/imgui_internal.h	/^    ImRect                  SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData
SizeContents	imgui-master/imgui_internal.h	/^    ImVec2                  SizeContents;                       \/\/ Size of contents (== extents reach of the drawing cursor) from previous frame. Include decoration, window title, border, menu, etc.$/;"	m	struct:ImGuiWindow
SizeContentsExplicit	imgui-master/imgui_internal.h	/^    ImVec2                  SizeContentsExplicit;               \/\/ Size of contents explicitly set by the user via SetNextWindowContentSize()$/;"	m	struct:ImGuiWindow
SizeFull	imgui-master/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow
SizeFullAtLastBegin	imgui-master/imgui_internal.h	/^    ImVec2                  SizeFullAtLastBegin;                \/\/ Copy of SizeFull at the end of Begin. This is the reference value we'll use on the next frame to decide if we need scrollbars.$/;"	m	struct:ImGuiWindow
SizePixels	imgui-master/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (more or less maps to the resulting font height).$/;"	m	struct:ImFontConfig
SizeVal	imgui-master/imgui_internal.h	/^    ImVec2                  SizeVal;$/;"	m	struct:ImGuiNextWindowData
SkipItems	imgui-master/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely be all clipped (e.g. window not visible or collapsed)$/;"	m	struct:ImGuiWindow
SliderAngle	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format)$/;"	f	class:ImGui
SliderBehavior	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format, float power, ImGuiSliderFlags flags, ImRect* out_grab_bb)$/;"	f	class:ImGui
SliderBehaviorT	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, const TYPE v_min, const TYPE v_max, const char* format, float power, ImGuiSliderFlags flags, ImRect* out_grab_bb)$/;"	f	class:ImGui
SliderCalcRatioFromValueT	imgui-master/imgui_widgets.cpp	/^float ImGui::SliderCalcRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, float power, float linear_zero_pos)$/;"	f	class:ImGui
SliderFloat	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderFloat2	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderFloat3	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderFloat4	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
SliderInt	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderInt2	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderInt3	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderInt4	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format)$/;"	f	class:ImGui
SliderScalar	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
SliderScalarN	imgui-master/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
SmallButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui
SourceId	imgui-master/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload
SourceParentId	imgui-master/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload
Spacing	imgui-master/imgui_internal.h	/^    float       Spacing;$/;"	m	struct:ImGuiMenuColumns
Spacing	imgui-master/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui
SplitterBehavior	imgui-master/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay)$/;"	f	class:ImGui
StackSizesBackup	imgui-master/imgui_internal.h	/^    short                   StackSizesBackup[6];    \/\/ Store size of various stacks for asserting$/;"	m	struct:ImGuiWindowTempData
StartMaxPosX	imgui-master/imgui_internal.h	/^    float               StartMaxPosX;       \/\/ Copy of CursorMaxPos$/;"	m	struct:ImGuiColumnsSet
StartMouseMovingWindow	imgui-master/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui
StartPosY	imgui-master/imgui.h	/^    float   StartPosY;$/;"	m	struct:ImGuiListClipper
StartPosY	imgui-master/imgui_internal.h	/^    float               StartPosY;          \/\/ Copy of CursorPos$/;"	m	struct:ImGuiColumnsSet
StateStorage	imgui-master/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow
StateStorage	imgui-master/imgui_internal.h	/^    ImGuiStorage*           StateStorage;$/;"	m	struct:ImGuiWindowTempData
StbFindState	imgui-master/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anon7
StbState	imgui-master/imgui_internal.h	/^    ImGuiStb::STB_TexteditState StbState;$/;"	m	struct:ImGuiInputTextState
StbTexteditRow	imgui-master/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anon6
StbUndoRecord	imgui-master/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anon3
StbUndoState	imgui-master/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anon4
Step	imgui-master/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper
StepNo	imgui-master/imgui.h	/^    int     ItemsCount, StepNo, DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper
Str	imgui-master/misc/cpp/imgui_stdlib.cpp	/^    std::string*            Str;$/;"	m	struct:InputTextCallback_UserData	file:
Strdup	imgui-master/imgui_demo.cpp	/^    static char* Strdup(const char *str)                             { size_t len = strlen(str) + 1; void* buff = malloc(len); return (char*)memcpy(buff, (const void*)str, len); }$/;"	f	struct:ExampleAppConsole
Stricmp	imgui-master/imgui_demo.cpp	/^    static int   Stricmp(const char* str1, const char* str2)         { int d; while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; } return d; }$/;"	f	struct:ExampleAppConsole
Stride	imgui-master/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	file:
Strnicmp	imgui-master/imgui_demo.cpp	/^    static int   Strnicmp(const char* str1, const char* str2, int n) { int d = 0; while (n > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; n--; } return d; }$/;"	f	struct:ExampleAppConsole
Strtrim	imgui-master/imgui_demo.cpp	/^    static void  Strtrim(char* str)                                  { char* str_end = str + strlen(str); while (str_end > str && str_end[-1] == ' ') str_end--; *str_end = 0; }$/;"	f	struct:ExampleAppConsole
Style	imgui-master/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext
StyleColorsClassic	imgui-master/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui
StyleColorsDark	imgui-master/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui
StyleColorsLight	imgui-master/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui
StyleModifiers	imgui-master/imgui_internal.h	/^    ImVector<ImGuiStyleMod> StyleModifiers;                     \/\/ Stack for PushStyleVar()\/PopStyleVar()$/;"	m	struct:ImGuiContext
Surface	imgui-master/examples/imgui_impl_vulkan.h	/^    VkSurfaceKHR        Surface;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
SurfaceFormat	imgui-master/examples/imgui_impl_vulkan.h	/^    VkSurfaceFormatKHR  SurfaceFormat;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
Swapchain	imgui-master/examples/imgui_impl_vulkan.h	/^    VkSwapchainKHR      Swapchain;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
TabBarCalcMaxTabWidth	imgui-master/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui
TabBarCalcTabID	imgui-master/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui
TabBarCloseTab	imgui-master/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui
TabBarFindTabByID	imgui-master/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui
TabBarLayout	imgui-master/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui
TabBarQueueChangeTabOrder	imgui-master/imgui_widgets.cpp	/^void ImGui::TabBarQueueChangeTabOrder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int dir)$/;"	f	class:ImGui
TabBarRemoveTab	imgui-master/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui
TabBarScrollClamp	imgui-master/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui
TabBarScrollToTab	imgui-master/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui
TabBarScrollingButtons	imgui-master/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui
TabBarSortItemComparer	imgui-master/imgui_widgets.cpp	/^static int IMGUI_CDECL TabBarSortItemComparer(const void* lhs, const void* rhs)$/;"	f	file:
TabBars	imgui-master/imgui_internal.h	/^    ImPool<ImGuiTabBar>     TabBars;$/;"	m	struct:ImGuiContext
TabBorderSize	imgui-master/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs. $/;"	m	struct:ImGuiStyle
TabItemBackground	imgui-master/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, ImU32 col)$/;"	f	class:ImGui
TabItemCalcSize	imgui-master/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)$/;"	f	class:ImGui
TabItemComparerByVisibleOffset	imgui-master/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByVisibleOffset(const void* lhs, const void* rhs)$/;"	f	file:
TabItemEx	imgui-master/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui
TabItemLabelAndCloseButton	imgui-master/imgui_widgets.cpp	/^bool ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, const char* label, ImGuiID tab_id, ImGuiID close_button_id)$/;"	f	class:ImGui
TabRounding	imgui-master/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.$/;"	m	struct:ImGuiStyle
TabSortByWidthBuffer	imgui-master/imgui_internal.h	/^    ImVector<ImGuiTabBarSortItem>   TabSortByWidthBuffer;$/;"	m	struct:ImGuiContext
Tabs	imgui-master/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar
TempBuffer	imgui-master/imgui_internal.h	/^    ImVector<char>          TempBuffer;             \/\/ temporary buffer for callback and other other operations. size=capacity.$/;"	m	struct:ImGuiInputTextState
TempBuffer	imgui-master/imgui_internal.h	/^    char                    TempBuffer[1024*3+1];               \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext
TexDesiredWidth	imgui-master/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.$/;"	m	struct:ImFontAtlas
TexGlyphPadding	imgui-master/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture in pixels. Defaults to 1.$/;"	m	struct:ImFontAtlas
TexHeight	imgui-master/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build().$/;"	m	struct:ImFontAtlas
TexID	imgui-master/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.$/;"	m	struct:ImFontAtlas
TexPixelsAlpha8	imgui-master/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight$/;"	m	struct:ImFontAtlas
TexPixelsRGBA32	imgui-master/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4$/;"	m	struct:ImFontAtlas
TexUvScale	imgui-master/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas
TexUvWhitePixel	imgui-master/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas
TexUvWhitePixel	imgui-master/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData
TexWidth	imgui-master/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build().$/;"	m	struct:ImFontAtlas
Text	imgui-master/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui
TextColored	imgui-master/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui
TextColoredV	imgui-master/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui
TextDisabled	imgui-master/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui
TextDisabledV	imgui-master/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui
TextEditCallback	imgui-master/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole
TextEditCallbackStub	imgui-master/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data) \/\/ In C++11 you are better off using lambdas for this sort of forwarding callbacks$/;"	f	struct:ExampleAppConsole
TextRange	imgui-master/imgui.h	/^        TextRange() { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::TextRange
TextRange	imgui-master/imgui.h	/^        TextRange(const char* _b, const char* _e) { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::TextRange
TextRange	imgui-master/imgui.h	/^    struct TextRange$/;"	s	struct:ImGuiTextFilter
TextUnformatted	imgui-master/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui
TextV	imgui-master/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui
TextW	imgui-master/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can't guarantee the persistence of the user-provided buffer. so we copy into own buffer.$/;"	m	struct:ImGuiInputTextState
TextWrapPos	imgui-master/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ == TextWrapPosStack.back() [empty == -1.0f]$/;"	m	struct:ImGuiWindowTempData
TextWrapPosStack	imgui-master/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;$/;"	m	struct:ImGuiWindowTempData
TextWrapped	imgui-master/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui
TextWrappedV	imgui-master/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui
TextureId	imgui-master/imgui.h	/^    ImTextureID     TextureId;              \/\/ User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.$/;"	m	struct:ImDrawCmd
Time	imgui-master/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext
TitleBarHeight	imgui-master/imgui_internal.h	/^    float       TitleBarHeight() const                  { return (Flags & ImGuiWindowFlags_NoTitleBar) ? 0.0f : CalcFontSize() + GImGui->Style.FramePadding.y * 2.0f; }$/;"	f	struct:ImGuiWindow
TitleBarRect	imgui-master/imgui_internal.h	/^    ImRect      TitleBarRect() const                    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + TitleBarHeight())); }$/;"	f	struct:ImGuiWindow
TooltipOverrideCount	imgui-master/imgui_internal.h	/^    int                     TooltipOverrideCount;$/;"	m	struct:ImGuiContext
TotalIdxCount	imgui-master/imgui.h	/^    int             TotalIdxCount;          \/\/ For convenience, sum of all ImDrawList's IdxBuffer.Size$/;"	m	struct:ImDrawData
TotalVtxCount	imgui-master/imgui.h	/^    int             TotalVtxCount;          \/\/ For convenience, sum of all ImDrawList's VtxBuffer.Size$/;"	m	struct:ImDrawData
TouchExtraPadding	imgui-master/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!$/;"	m	struct:ImGuiStyle
Translate	imgui-master/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; Max.y += d.y; }$/;"	f	struct:ImRect
TranslateX	imgui-master/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect
TranslateY	imgui-master/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect
TreeAdvanceToLabelPos	imgui-master/imgui_widgets.cpp	/^void ImGui::TreeAdvanceToLabelPos()$/;"	f	class:ImGui
TreeDepth	imgui-master/imgui_internal.h	/^    int                     TreeDepth;$/;"	m	struct:ImGuiWindowTempData
TreeDepthMayJumpToParentOnPop	imgui-master/imgui_internal.h	/^    ImU32                   TreeDepthMayJumpToParentOnPop; \/\/ Store a copy of !g.NavIdIsAlive for TreeDepth 0..31$/;"	m	struct:ImGuiWindowTempData
TreeNode	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui
TreeNode	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui
TreeNode	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui
TreeNodeBehavior	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)$/;"	f	class:ImGui
TreeNodeBehaviorIsOpen	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
TreeNodeEx	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui
TreeNodeEx	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui
TreeNodeEx	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui
TreeNodeExV	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)$/;"	f	class:ImGui
TreeNodeExV	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)$/;"	f	class:ImGui
TreeNodeV	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui
TreeNodeV	imgui-master/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui
TreePop	imgui-master/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui
TreePush	imgui-master/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui
TreePush	imgui-master/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui
TreePushRawID	imgui-master/imgui_widgets.cpp	/^void ImGui::TreePushRawID(ImGuiID id)$/;"	f	class:ImGui
Type	imgui-master/imgui.cpp	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiStyleVarInfo	file:
TypeHash	imgui-master/imgui_internal.h	/^    ImGuiID     TypeHash;   \/\/ == ImHash(TypeName, 0, 0)$/;"	m	struct:ImGuiSettingsHandler
TypeName	imgui-master/imgui_internal.h	/^    const char* TypeName;   \/\/ Short description stored in .ini file. Disallowed characters: '[' ']'$/;"	m	struct:ImGuiSettingsHandler
U0	imgui-master/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
U1	imgui-master/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
UNAME_S	imgui-master/examples/example_glfw_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui-master/examples/example_glfw_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui-master/examples/example_sdl_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui-master/examples/example_sdl_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
USE_GL_ES3	imgui-master/examples/imgui_impl_opengl3.cpp	/^#define USE_GL_ES3$/;"	d	file:
USYNERGY_BIG_ENDIAN	imgui-master/examples/libs/usynergy/uSynergy.h	/^		#define USYNERGY_BIG_ENDIAN$/;"	d
USYNERGY_CLIPBOARD_FORMAT_BITMAP	imgui-master/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_BITMAP				= 1,			\/* Bitmap format, BMP 24\/32bpp, BI_RGB *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_HTML	imgui-master/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_HTML					= 2,			\/* HTML format, HTML fragment, UTF-8, newline is LF *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_TEXT	imgui-master/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_TEXT					= 0,			\/* Text format, UTF-8, newline is LF *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_FALSE	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_FALSE	/;"	d
USYNERGY_IDLE_TIMEOUT	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_IDLE_TIMEOUT	/;"	d
USYNERGY_IS_PACKET	imgui-master/examples/libs/usynergy/uSynergy.c	/^#define USYNERGY_IS_PACKET(/;"	d	file:
USYNERGY_IS_PACKET	imgui-master/examples/libs/usynergy/uSynergy.c	/^#undef USYNERGY_IS_PACKET$/;"	d	file:
USYNERGY_LITTLE_ENDIAN	imgui-master/examples/libs/usynergy/uSynergy.h	/^		#define USYNERGY_LITTLE_ENDIAN$/;"	d
USYNERGY_MODIFIER_ALT	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT	/;"	d
USYNERGY_MODIFIER_ALT_GR	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT_GR	/;"	d
USYNERGY_MODIFIER_CAPSLOCK	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CAPSLOCK	/;"	d
USYNERGY_MODIFIER_CTRL	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CTRL	/;"	d
USYNERGY_MODIFIER_LEVEL5LOCK	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_LEVEL5LOCK	/;"	d
USYNERGY_MODIFIER_META	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_META	/;"	d
USYNERGY_MODIFIER_NUMLOCK	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_NUMLOCK	/;"	d
USYNERGY_MODIFIER_SCROLLOCK	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SCROLLOCK	/;"	d
USYNERGY_MODIFIER_SHIFT	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SHIFT	/;"	d
USYNERGY_MODIFIER_WIN	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_WIN	/;"	d
USYNERGY_NUM_JOYSTICKS	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_NUM_JOYSTICKS	/;"	d
USYNERGY_PROTOCOL_MAJOR	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MAJOR	/;"	d
USYNERGY_PROTOCOL_MINOR	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MINOR	/;"	d
USYNERGY_RECEIVE_BUFFER_SIZE	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_RECEIVE_BUFFER_SIZE	/;"	d
USYNERGY_REPLY_BUFFER_SIZE	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_REPLY_BUFFER_SIZE	/;"	d
USYNERGY_TRACE_BUFFER_SIZE	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRACE_BUFFER_SIZE	/;"	d
USYNERGY_TRUE	imgui-master/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRUE	/;"	d
Unindent	imgui-master/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui
UnpackAccumulativeOffsetsIntoRanges	imgui-master/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_offsets, int accumulative_offsets_count, ImWchar* out_ranges)$/;"	f	file:
Update	imgui-master/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(int count, float spacing, bool clear)$/;"	f	class:ImGuiMenuColumns
UpdateClipRect	imgui-master/imgui_draw.cpp	/^void ImDrawList::UpdateClipRect()$/;"	f	class:ImDrawList
UpdateHoveredWindowAndCaptureFlags	imgui-master/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui
UpdateManualResize	imgui-master/imgui.cpp	/^static void ImGui::UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* border_held, int resize_grip_count, ImU32 resize_grip_col[4])$/;"	f	class:ImGui
UpdateMouseInputs	imgui-master/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui
UpdateMouseMovingWindow	imgui-master/imgui.cpp	/^void ImGui::UpdateMouseMovingWindow()$/;"	f	class:ImGui
UpdateMouseWheel	imgui-master/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui
UpdateTextureID	imgui-master/imgui_draw.cpp	/^void ImDrawList::UpdateTextureID()$/;"	f	class:ImDrawList
UpdateWindowParentAndRootLinks	imgui-master/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parent_window)$/;"	f	class:ImGui
UsedChars	imgui-master/imgui.h	/^        ImVector<unsigned char> UsedChars;  \/\/ Store 1-bit per Unicode code point (0=unused, 1=used)$/;"	m	struct:ImFontAtlas::GlyphRangesBuilder
UserCallback	imgui-master/imgui.h	/^    ImDrawCallback  UserCallback;           \/\/ If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.$/;"	m	struct:ImDrawCmd
UserCallback	imgui-master/imgui_internal.h	/^    ImGuiInputTextCallback  UserCallback;$/;"	m	struct:ImGuiInputTextState
UserCallbackData	imgui-master/imgui.h	/^    void*           UserCallbackData;       \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd
UserCallbackData	imgui-master/imgui_internal.h	/^    void*                   UserCallbackData;$/;"	m	struct:ImGuiInputTextState
UserData	imgui-master/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData
UserData	imgui-master/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data for retrieval by callbacks.$/;"	m	struct:ImGuiIO
UserData	imgui-master/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()$/;"	m	struct:ImGuiSizeCallbackData
UserData	imgui-master/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler
UserFlags	imgui-master/imgui_internal.h	/^    ImGuiInputTextFlags     UserFlags;$/;"	m	struct:ImGuiInputTextState
UserFlags	imgui-master/misc/freetype/imgui_freetype.cpp	/^        unsigned int    UserFlags;          \/\/ = ImFontConfig::RasterizerFlags$/;"	m	struct:__anon1::FreeTypeFont	file:
V0	imgui-master/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
V1	imgui-master/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph
VB	imgui-master/examples/imgui_impl_dx12.cpp	/^    ID3D12Resource* VB;$/;"	m	struct:FrameResources	file:
VERTEX_CONSTANT_BUFFER	imgui-master/examples/imgui_impl_dx10.cpp	/^struct VERTEX_CONSTANT_BUFFER$/;"	s	file:
VERTEX_CONSTANT_BUFFER	imgui-master/examples/imgui_impl_dx11.cpp	/^struct VERTEX_CONSTANT_BUFFER$/;"	s	file:
VERTEX_CONSTANT_BUFFER	imgui-master/examples/imgui_impl_dx12.cpp	/^struct VERTEX_CONSTANT_BUFFER$/;"	s	file:
VSliderFloat	imgui-master/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format, float power)$/;"	f	class:ImGui
VSliderInt	imgui-master/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format)$/;"	f	class:ImGui
VSliderScalar	imgui-master/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format, float power)$/;"	f	class:ImGui
Valid	imgui-master/imgui.h	/^    bool            Valid;                  \/\/ Only valid after Render() is called and before the next NewFrame() is called.$/;"	m	struct:ImDrawData
Value	imgui-master/imgui.h	/^    ImVec4              Value;$/;"	m	struct:ImColor
Value	imgui-master/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui
Value	imgui-master/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui
Value	imgui-master/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui
Value	imgui-master/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui
Values	imgui-master/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	file:
VarIdx	imgui-master/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod
VertexBuffer	imgui-master/examples/imgui_impl_vulkan.cpp	/^    VkBuffer        VertexBuffer;$/;"	m	struct:FrameDataForRender	file:
VertexBufferMemory	imgui-master/examples/imgui_impl_vulkan.cpp	/^    VkDeviceMemory  VertexBufferMemory;$/;"	m	struct:FrameDataForRender	file:
VertexBufferSize	imgui-master/examples/imgui_impl_dx12.cpp	/^    int VertexBufferSize;$/;"	m	struct:FrameResources	file:
VertexBufferSize	imgui-master/examples/imgui_impl_vulkan.cpp	/^    VkDeviceSize    VertexBufferSize;$/;"	m	struct:FrameDataForRender	file:
VerticalSeparator	imgui-master/imgui_widgets.cpp	/^void ImGui::VerticalSeparator()$/;"	f	class:ImGui
VisibleTabId	imgui-master/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. when previewing contents for CTRL+TAB preview)$/;"	m	struct:ImGuiTabBar
VisibleTabWasSubmitted	imgui-master/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar
VtxBuffer	imgui-master/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList
WIN32_LEAN_AND_MEAN	imgui-master/examples/imgui_impl_win32.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WIN32_LEAN_AND_MEAN	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WIN32_LEAN_AND_MEAN	imgui-master/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	imgui-master/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise by only highlighting the border after a certain time.$/;"	v	file:
WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS	imgui-master/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS = 4.0f;     \/\/ Extend outside and inside windows. Affect FindHoveredWindow().$/;"	v	file:
WINGDIAPI	imgui-master/examples/imgui_impl_opengl2.cpp	/^#define WINGDIAPI /;"	d	file:
WINGDIAPI	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define WINGDIAPI /;"	d
WINGDIAPI	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #undef WINGDIAPI$/;"	d
WM_MOUSEHWHEEL	imgui-master/examples/imgui_impl_win32.cpp	/^#define WM_MOUSEHWHEEL /;"	d	file:
WaitForLastSubmittedFrame	imgui-master/examples/example_win32_directx12/main.cpp	/^void WaitForLastSubmittedFrame()$/;"	f
WaitForNextFrameResources	imgui-master/examples/example_win32_directx12/main.cpp	/^FrameContext* WaitForNextFrameResources()$/;"	f
WantCaptureKeyboard	imgui-master/imgui.h	/^    bool        WantCaptureKeyboard;            \/\/ When io.WantCaptureKeyboard is true, imgui will use the keyboard inputs, do not dispatch them to your main game\/application (in both cases, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).$/;"	m	struct:ImGuiIO
WantCaptureKeyboardNextFrame	imgui-master/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;$/;"	m	struct:ImGuiContext
WantCaptureMouse	imgui-master/imgui.h	/^    bool        WantCaptureMouse;               \/\/ When io.WantCaptureMouse is true, imgui will use the mouse inputs, do not dispatch them to your main game\/application (in both cases, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).$/;"	m	struct:ImGuiIO
WantCaptureMouseNextFrame	imgui-master/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture via CaptureKeyboardFromApp()\/CaptureMouseFromApp() sets those flags$/;"	m	struct:ImGuiContext
WantClose	imgui-master/imgui_demo.cpp	/^    bool        WantClose;      \/\/ Set when the document $/;"	m	struct:MyDocument	file:
WantCollapseToggle	imgui-master/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow
WantLayout	imgui-master/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar
WantSaveIniSettings	imgui-master/imgui.h	/^    bool        WantSaveIniSettings;            \/\/ When manual .ini load\/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. IMPORTANT: You need to clear io.WantSaveIniSettings yourself.$/;"	m	struct:ImGuiIO
WantSetMousePos	imgui-master/imgui.h	/^    bool        WantSetMousePos;                \/\/ MousePos has been altered, back-end should reposition mouse on next frame. Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.$/;"	m	struct:ImGuiIO
WantTextInput	imgui-master/imgui.h	/^    bool        WantTextInput;                  \/\/ Mobile\/console: when io.WantTextInput is true, you may display an on-screen keyboard. This is set by ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).$/;"	m	struct:ImGuiIO
WantTextInputNextFrame	imgui-master/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext
WasActive	imgui-master/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow
Width	imgui-master/examples/imgui_impl_vulkan.h	/^    int                 Width;$/;"	m	struct:ImGui_ImplVulkanH_WindowData
Width	imgui-master/imgui.h	/^        unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlas::CustomRect
Width	imgui-master/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem
Width	imgui-master/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns
Width	imgui-master/imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiTabBarSortItem
Width	imgui-master/misc/freetype/imgui_freetype.cpp	/^        float Width;		\/\/ Glyph's width in pixels.$/;"	m	struct:__anon1::GlyphInfo	file:
WidthContents	imgui-master/imgui_internal.h	/^    float               WidthContents;          \/\/ Width of actual contents, stored during BeginTabItem() call$/;"	m	struct:ImGuiTabItem
Window	imgui-master/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if user never calls OpenPopup()$/;"	m	struct:ImGuiPopupRef
Window	imgui-master/imgui_internal.h	/^    ImGuiWindow*  Window;       \/\/ Best candidate window$/;"	m	struct:ImGuiNavMoveResult
WindowBorderSize	imgui-master/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU\/GPU costly).$/;"	m	struct:ImGuiStyle
WindowBorderSize	imgui-master/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the time of begin.$/;"	m	struct:ImGuiWindow
WindowMinSize	imgui-master/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. If you want to constraint individual windows, use SetNextWindowSizeConstraints().$/;"	m	struct:ImGuiStyle
WindowPadding	imgui-master/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle
WindowPadding	imgui-master/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time of begin.$/;"	m	struct:ImGuiWindow
WindowRounding	imgui-master/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f to have rectangular windows.$/;"	m	struct:ImGuiStyle
WindowRounding	imgui-master/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time of begin.$/;"	m	struct:ImGuiWindow
WindowTitleAlign	imgui-master/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.$/;"	m	struct:ImGuiStyle
Windows	imgui-master/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display order, back to front$/;"	m	struct:ImGuiContext
WindowsActiveCount	imgui-master/imgui_internal.h	/^    int                     WindowsActiveCount;$/;"	m	struct:ImGuiContext
WindowsById	imgui-master/imgui_internal.h	/^    ImGuiStorage            WindowsById;$/;"	m	struct:ImGuiContext
WindowsFocusOrder	imgui-master/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Windows, sorted in focus order, back to front$/;"	m	struct:ImGuiContext
WindowsSortBuffer	imgui-master/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsSortBuffer;$/;"	m	struct:ImGuiContext
WndProc	imgui-master/examples/example_win32_directx10/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f
WndProc	imgui-master/examples/example_win32_directx11/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f
WndProc	imgui-master/examples/example_win32_directx12/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f
WndProc	imgui-master/examples/example_win32_directx9/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f
WriteAccessed	imgui-master/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget access the current window$/;"	m	struct:ImGuiWindow
WriteAllFn	imgui-master/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* out_buf);      \/\/ Write: Output every entries into 'out_buf'$/;"	m	struct:ImGuiSettingsHandler
X	imgui-master/imgui.h	/^        unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlas::CustomRect
X0	imgui-master/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
X1	imgui-master/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
Y	imgui-master/imgui.h	/^        unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlas::CustomRect
Y0	imgui-master/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
Y1	imgui-master/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph
_CRT_SECURE_NO_WARNINGS	imgui-master/examples/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui-master/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui-master/imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui-master/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui-master/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_Channels	imgui-master/imgui.h	/^    ImVector<ImDrawChannel> _Channels;          \/\/ [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)$/;"	m	struct:ImDrawList
_ChannelsCount	imgui-master/imgui.h	/^    int                     _ChannelsCount;     \/\/ [Internal] number of active channels (1+)$/;"	m	struct:ImDrawList
_ChannelsCurrent	imgui-master/imgui.h	/^    int                     _ChannelsCurrent;   \/\/ [Internal] current channel number (0)$/;"	m	struct:ImDrawList
_ClipRectStack	imgui-master/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList
_Data	imgui-master/imgui.h	/^    const ImDrawListSharedData* _Data;          \/\/ Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)$/;"	m	struct:ImDrawList
_IdxWritePtr	imgui-master/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)$/;"	m	struct:ImDrawList
_OwnerName	imgui-master/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debugging$/;"	m	struct:ImDrawList
_Path	imgui-master/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList
_TextureIdStack	imgui-master/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList
_VtxCurrentIdx	imgui-master/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] == VtxBuffer.Size$/;"	m	struct:ImDrawList
_VtxWritePtr	imgui-master/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)$/;"	m	struct:ImDrawList
_WIN32	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define _WIN32$/;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	imgui-master/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__gl3w_h_	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define __gl3w_h_$/;"	d
__gl_h_	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define __gl_h_$/;"	d
__glcorearb_h_	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^#define __glcorearb_h_$/;"	d
__glsl_shader_frag_spv	imgui-master/examples/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_frag_spv[] =$/;"	v	file:
__glsl_shader_vert_spv	imgui-master/examples/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_vert_spv[] =$/;"	v	file:
_glfw3_h_	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^#define _glfw3_h_$/;"	d
_glfw3_native_h_	imgui-master/examples/libs/glfw/include/GLFW/glfw3native.h	/^#define _glfw3_native_h_$/;"	d
_grow_capacity	imgui-master/imgui.h	/^    inline int          _grow_capacity(int sz) const            { int new_capacity = Capacity ? (Capacity + Capacity\/2) : 8; return new_capacity > sz ? new_capacity : sz; }$/;"	f	class:ImVector
active_head	imgui-master/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context
align	imgui-master/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context
alloca	imgui-master/imgui_draw.cpp	/^#define alloca /;"	d	file:
appendf	imgui-master/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer
appendfv	imgui-master/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer
array_of_unicode_codepoints	imgui-master/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode codepoints$/;"	m	struct:__anon12
b	imgui-master/imgui.h	/^        const char* b;$/;"	m	struct:ImGuiTextFilter::TextRange
back	imgui-master/imgui.h	/^    inline const value_type&    back() const                    { IM_ASSERT(Size > 0); return Data[Size - 1]; }$/;"	f	class:ImVector
back	imgui-master/imgui.h	/^    inline value_type&          back()                          { IM_ASSERT(Size > 0); return Data[Size - 1]; }$/;"	f	class:ImVector
baseline_y_delta	imgui-master/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anon6
begin	imgui-master/imgui.h	/^        const char*     begin() const   { return b; }$/;"	f	struct:ImGuiTextFilter::TextRange
begin	imgui-master/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; }$/;"	f	struct:ImGuiTextBuffer
begin	imgui-master/imgui.h	/^    inline const_iterator       begin() const                   { return Data; }$/;"	f	class:ImVector
begin	imgui-master/imgui.h	/^    inline iterator             begin()                         { return Data; }$/;"	f	class:ImVector
binary_to_compressed_c	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^bool binary_to_compressed_c(const char* filename, const char* symbol, bool use_base85_encoding, bool use_compression)$/;"	f
blue	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* blue;$/;"	m	struct:GLFWgammaramp
blueBits	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int blueBits;$/;"	m	struct:GLFWvidmode
bottom_y	imgui-master/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon24
bounds	imgui-master/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anon22
bundle	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^CFBundleRef bundle;$/;"	v
bundleURL	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^CFURLRef bundleURL;$/;"	v
c_str	imgui-master/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer
capacity	imgui-master/imgui.h	/^    inline int                  capacity() const                { return Capacity; }$/;"	f	class:ImVector
cdata	imgui-master/imstb_truetype.h	/^stbtt_bakedchar cdata[96]; \/\/ ASCII 32..126 is 95 glyphs$/;"	v
cff	imgui-master/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo
char_storage	imgui-master/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anon3
chardata_for_range	imgui-master/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon12
charstrings	imgui-master/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo
check_vk_result	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	file:
check_vk_result	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	file:
check_vk_result	imgui-master/examples/imgui_impl_vulkan.cpp	/^static void check_vk_result(VkResult err)$/;"	f	file:
clear	imgui-master/imgui.h	/^    inline void                 clear()                         { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }$/;"	f	class:ImVector
clear	imgui-master/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer
clear_color	imgui-master/examples/example_freeglut_opengl2/main.cpp	/^static ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);$/;"	v	file:
close_libgl	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^static void close_libgl(void)$/;"	f	file:
col	imgui-master/examples/imgui_impl_allegro5.cpp	/^    ALLEGRO_COLOR col;$/;"	m	struct:ImDrawVertAllegro	file:
col	imgui-master/examples/imgui_impl_dx9.cpp	/^    D3DCOLOR col;$/;"	m	struct:CUSTOMVERTEX	file:
col	imgui-master/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert
colorR	imgui-master/examples/example_glfw_opengl2/main.cpp	/^float colorR = 0;$/;"	v
const_iterator	imgui-master/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	class:ImVector
contains	imgui-master/imgui.h	/^    inline bool         contains(const value_type& v) const             { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }$/;"	f	class:ImVector
cursor	imgui-master/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anon5
cursor	imgui-master/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anon8
cursor_at_end_of_line	imgui-master/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anon5
cx	imgui-master/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon14
cx1	imgui-master/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon14
cy	imgui-master/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon14
cy1	imgui-master/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon14
data	imgui-master/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo
data	imgui-master/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon8
debug_report	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage, void* pUserData)$/;"	f	file:
debug_report	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage, void* pUserData)$/;"	f	file:
delete_length	imgui-master/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anon3
direction	imgui-master/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge
direction	imgui-master/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge
display_h	imgui-master/examples/example_glfw_opengl2/main.cpp	/^int display_w, display_h;$/;"	v
display_w	imgui-master/examples/example_glfw_opengl2/main.cpp	/^int display_w, display_h;$/;"	v
dx	imgui-master/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
e	imgui-master/imgui.h	/^        const char* e;$/;"	m	struct:ImGuiTextFilter::TextRange
empty	imgui-master/imgui.h	/^        bool            empty() const   { return b == e; }$/;"	f	struct:ImGuiTextFilter::TextRange
empty	imgui-master/imgui.h	/^    bool                empty()                 { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer
empty	imgui-master/imgui.h	/^    inline bool                 empty() const                   { return Size == 0; }$/;"	f	class:ImVector
end	imgui-master/imgui.h	/^        const char*     end () const    { return e; }$/;"	f	struct:ImGuiTextFilter::TextRange
end	imgui-master/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }   \/\/ Buf is zero-terminated, so end() will point on the zero-terminator$/;"	f	struct:ImGuiTextBuffer
end	imgui-master/imgui.h	/^    inline const_iterator       end() const                     { return Data + Size; }$/;"	f	class:ImVector
end	imgui-master/imgui.h	/^    inline iterator             end()                           { return Data + Size; }$/;"	f	class:ImVector
equal	imgui-master/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f
erase	imgui-master/imgui.h	/^    inline iterator     erase(const_iterator it)                        { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(value_type)); Size--; return Data + off; }$/;"	f	class:ImVector
erase	imgui-master/imgui.h	/^    inline iterator     erase(const_iterator it, const_iterator it_last){ IM_ASSERT(it >= Data && it < Data+Size && it_last > it && it_last <= Data+Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(value_type)); Size -= (int)count; return Data + off; }$/;"	f	class:ImVector
erase_unsorted	imgui-master/imgui.h	/^    inline iterator     erase_unsorted(const_iterator it)               { IM_ASSERT(it >= Data && it < Data+Size);  const ptrdiff_t off = it - Data; if (it < Data+Size-1) memcpy(Data + off, Data + Size - 1, sizeof(value_type)); Size--; return Data + off; }$/;"	f	class:ImVector
extra	imgui-master/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' not 'width+2'$/;"	m	struct:stbrp_context
ey	imgui-master/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge
fdselect	imgui-master/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo
fdx	imgui-master/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fdy	imgui-master/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
first_char	imgui-master/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon7
first_free	imgui-master/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap
first_unicode_codepoint_in_range	imgui-master/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and this is the first codepoint$/;"	m	struct:__anon12
first_x	imgui-master/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon22
first_y	imgui-master/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon22
font_size	imgui-master/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anon12
fontdicts	imgui-master/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo
fontstart	imgui-master/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo
free_head	imgui-master/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context
front	imgui-master/imgui.h	/^    inline const value_type&    front() const                   { IM_ASSERT(Size > 0); return Data[0]; }$/;"	f	class:ImVector
front	imgui-master/imgui.h	/^    inline value_type&          front()                         { IM_ASSERT(Size > 0); return Data[0]; }$/;"	f	class:ImVector
ftex	imgui-master/imstb_truetype.h	/^GLuint ftex;$/;"	v
fx	imgui-master/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
g_Allocator	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkAllocationCallbacks*       g_Allocator = NULL;$/;"	v	file:
g_Allocator	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkAllocationCallbacks*       g_Allocator = NULL;$/;"	v	file:
g_Allocator	imgui-master/examples/imgui_impl_vulkan.cpp	/^static const VkAllocationCallbacks* g_Allocator = NULL;$/;"	v	file:
g_AttribLocationColor	imgui-master/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationPosition = 0, g_AttribLocationUV = 0, g_AttribLocationColor = 0;$/;"	v	file:
g_AttribLocationPosition	imgui-master/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationPosition = 0, g_AttribLocationUV = 0, g_AttribLocationColor = 0;$/;"	v	file:
g_AttribLocationProjMtx	imgui-master/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;$/;"	v	file:
g_AttribLocationTex	imgui-master/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;$/;"	v	file:
g_AttribLocationUV	imgui-master/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationPosition = 0, g_AttribLocationUV = 0, g_AttribLocationColor = 0;$/;"	v	file:
g_BufferMemoryAlignment	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkDeviceSize                 g_BufferMemoryAlignment = 256;$/;"	v	file:
g_CheckVkResultFn	imgui-master/examples/imgui_impl_vulkan.cpp	/^static void                         (*g_CheckVkResultFn)(VkResult err) = NULL;$/;"	v	file:
g_ClientApi	imgui-master/examples/imgui_impl_glfw.cpp	/^static GlfwClientApi        g_ClientApi = GlfwClientApi_Unknown;$/;"	v	file:
g_ClipboardText	imgui-master/examples/imgui_impl_marmalade.cpp	/^static char*        g_ClipboardText = NULL;$/;"	v	file:
g_ClipboardTextData	imgui-master/examples/imgui_impl_allegro5.cpp	/^static char*                    g_ClipboardTextData = NULL;$/;"	v	file:
g_ClipboardTextData	imgui-master/examples/imgui_impl_sdl.cpp	/^static char*        g_ClipboardTextData = NULL;$/;"	v	file:
g_DebugReport	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkDebugReportCallbackEXT     g_DebugReport = VK_NULL_HANDLE;$/;"	v	file:
g_DebugReport	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkDebugReportCallbackEXT     g_DebugReport = VK_NULL_HANDLE;$/;"	v	file:
g_DescriptorPool	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkDescriptorPool             g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	file:
g_DescriptorPool	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkDescriptorPool             g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	file:
g_DescriptorPool	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkDescriptorPool             g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	file:
g_DescriptorSet	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkDescriptorSet              g_DescriptorSet = VK_NULL_HANDLE;$/;"	v	file:
g_DescriptorSetLayout	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkDescriptorSetLayout        g_DescriptorSetLayout = VK_NULL_HANDLE;$/;"	v	file:
g_Device	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkDevice                     g_Device = VK_NULL_HANDLE;$/;"	v	file:
g_Device	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkDevice                     g_Device = VK_NULL_HANDLE;$/;"	v	file:
g_Device	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkDevice                     g_Device = VK_NULL_HANDLE;$/;"	v	file:
g_Display	imgui-master/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_DISPLAY*         g_Display = NULL;$/;"	v	file:
g_ElementsHandle	imgui-master/examples/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	file:
g_FontImage	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkImage                g_FontImage = VK_NULL_HANDLE;$/;"	v	file:
g_FontMemory	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkDeviceMemory         g_FontMemory = VK_NULL_HANDLE;$/;"	v	file:
g_FontSampler	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkSampler              g_FontSampler = VK_NULL_HANDLE;$/;"	v	file:
g_FontTexture	imgui-master/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DTEXTURE9       g_FontTexture = NULL;$/;"	v	file:
g_FontTexture	imgui-master/examples/imgui_impl_marmalade.cpp	/^static CIwTexture*  g_FontTexture = NULL;$/;"	v	file:
g_FontTexture	imgui-master/examples/imgui_impl_opengl2.cpp	/^static GLuint       g_FontTexture = 0;$/;"	v	file:
g_FontTexture	imgui-master/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_FontTexture = 0;$/;"	v	file:
g_FontView	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkImageView            g_FontView = VK_NULL_HANDLE;$/;"	v	file:
g_FragHandle	imgui-master/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	file:
g_FrameIndex	imgui-master/examples/imgui_impl_vulkan.cpp	/^static int                    g_FrameIndex = 0;$/;"	v	file:
g_FramesDataBuffers	imgui-master/examples/imgui_impl_vulkan.cpp	/^static FrameDataForRender     g_FramesDataBuffers[IMGUI_VK_QUEUED_FRAMES] = {};$/;"	v	file:
g_GlslVersionString	imgui-master/examples/imgui_impl_opengl3.cpp	/^static char         g_GlslVersionString[32] = "";$/;"	v	file:
g_IndexBufferSize	imgui-master/examples/imgui_impl_dx10.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	file:
g_IndexBufferSize	imgui-master/examples/imgui_impl_dx11.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	file:
g_IndexBufferSize	imgui-master/examples/imgui_impl_dx9.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	file:
g_Instance	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkInstance                   g_Instance = VK_NULL_HANDLE;$/;"	v	file:
g_Instance	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkInstance                   g_Instance = VK_NULL_HANDLE;$/;"	v	file:
g_Instance	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkInstance                   g_Instance = VK_NULL_HANDLE;$/;"	v	file:
g_LastMouseCursor	imgui-master/examples/imgui_impl_win32.cpp	/^static ImGuiMouseCursor     g_LastMouseCursor = ImGuiMouseCursor_COUNT;$/;"	v	file:
g_MouseCursorInvisible	imgui-master/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_MOUSE_CURSOR*    g_MouseCursorInvisible = NULL;$/;"	v	file:
g_MouseCursors	imgui-master/examples/imgui_impl_glfw.cpp	/^static GLFWcursor*          g_MouseCursors[ImGuiMouseCursor_COUNT] = { 0 };$/;"	v	file:
g_MouseCursors	imgui-master/examples/imgui_impl_sdl.cpp	/^static SDL_Cursor*  g_MouseCursors[ImGuiMouseCursor_COUNT] = { 0 };$/;"	v	file:
g_MouseJustPressed	imgui-master/examples/imgui_impl_glfw.cpp	/^static bool                 g_MouseJustPressed[5] = { false, false, false, false, false };$/;"	v	file:
g_MousePressed	imgui-master/examples/imgui_impl_marmalade.cpp	/^static bool         g_MousePressed[3] = { false, false, false };$/;"	v	file:
g_MousePressed	imgui-master/examples/imgui_impl_sdl.cpp	/^static bool         g_MousePressed[3] = { false, false, false };$/;"	v	file:
g_PhysicalDevice	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkPhysicalDevice             g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	file:
g_PhysicalDevice	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkPhysicalDevice             g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	file:
g_PhysicalDevice	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkPhysicalDevice             g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	file:
g_Pipeline	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkPipeline                   g_Pipeline = VK_NULL_HANDLE;$/;"	v	file:
g_PipelineCache	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkPipelineCache              g_PipelineCache = VK_NULL_HANDLE;$/;"	v	file:
g_PipelineCache	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkPipelineCache              g_PipelineCache = VK_NULL_HANDLE;$/;"	v	file:
g_PipelineCache	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkPipelineCache              g_PipelineCache = VK_NULL_HANDLE;$/;"	v	file:
g_PipelineCreateFlags	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkPipelineCreateFlags        g_PipelineCreateFlags = 0;$/;"	v	file:
g_PipelineLayout	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkPipelineLayout             g_PipelineLayout = VK_NULL_HANDLE;$/;"	v	file:
g_PrevUserCallbackChar	imgui-master/examples/imgui_impl_glfw.cpp	/^static GLFWcharfun          g_PrevUserCallbackChar = NULL;$/;"	v	file:
g_PrevUserCallbackKey	imgui-master/examples/imgui_impl_glfw.cpp	/^static GLFWkeyfun           g_PrevUserCallbackKey = NULL;$/;"	v	file:
g_PrevUserCallbackMousebutton	imgui-master/examples/imgui_impl_glfw.cpp	/^static GLFWmousebuttonfun   g_PrevUserCallbackMousebutton = NULL;$/;"	v	file:
g_PrevUserCallbackScroll	imgui-master/examples/imgui_impl_glfw.cpp	/^static GLFWscrollfun        g_PrevUserCallbackScroll = NULL;$/;"	v	file:
g_Queue	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static VkQueue                      g_Queue = VK_NULL_HANDLE;$/;"	v	file:
g_Queue	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static VkQueue                      g_Queue = VK_NULL_HANDLE;$/;"	v	file:
g_Queue	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkQueue                      g_Queue = VK_NULL_HANDLE;$/;"	v	file:
g_QueueFamily	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static uint32_t                     g_QueueFamily = (uint32_t)-1;$/;"	v	file:
g_QueueFamily	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static uint32_t                     g_QueueFamily = (uint32_t)-1;$/;"	v	file:
g_QueueFamily	imgui-master/examples/imgui_impl_vulkan.cpp	/^static uint32_t                     g_QueueFamily = (uint32_t)-1;$/;"	v	file:
g_RTVFormat	imgui-master/examples/imgui_impl_dx12.cpp	/^static DXGI_FORMAT                  g_RTVFormat = DXGI_FORMAT_UNKNOWN;$/;"	v	file:
g_RenderPass	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkRenderPass                 g_RenderPass = VK_NULL_HANDLE;$/;"	v	file:
g_RenderScale	imgui-master/examples/imgui_impl_marmalade.cpp	/^static ImVec2       g_RenderScale = ImVec2(1.0f,1.0f);$/;"	v	file:
g_ResizeHeight	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static int                          g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	file:
g_ResizeWanted	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static bool                         g_ResizeWanted = false;$/;"	v	file:
g_ResizeWidth	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static int                          g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	file:
g_ShaderHandle	imgui-master/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	file:
g_Texture	imgui-master/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_BITMAP*          g_Texture = NULL;$/;"	v	file:
g_TicksPerSecond	imgui-master/examples/imgui_impl_win32.cpp	/^static INT64                g_TicksPerSecond = 0;$/;"	v	file:
g_Time	imgui-master/examples/imgui_impl_allegro5.cpp	/^static double                   g_Time = 0.0;$/;"	v	file:
g_Time	imgui-master/examples/imgui_impl_freeglut.cpp	/^static int g_Time = 0;          \/\/ Current time, in milliseconds$/;"	v	file:
g_Time	imgui-master/examples/imgui_impl_glfw.cpp	/^static double               g_Time = 0.0;$/;"	v	file:
g_Time	imgui-master/examples/imgui_impl_marmalade.cpp	/^static double       g_Time = 0.0f;$/;"	v	file:
g_Time	imgui-master/examples/imgui_impl_sdl.cpp	/^static Uint64       g_Time = 0;$/;"	v	file:
g_Time	imgui-master/examples/imgui_impl_win32.cpp	/^static INT64                g_Time = 0;$/;"	v	file:
g_UploadBuffer	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkBuffer               g_UploadBuffer = VK_NULL_HANDLE;$/;"	v	file:
g_UploadBufferMemory	imgui-master/examples/imgui_impl_vulkan.cpp	/^static VkDeviceMemory         g_UploadBufferMemory = VK_NULL_HANDLE;$/;"	v	file:
g_VboHandle	imgui-master/examples/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	file:
g_VertHandle	imgui-master/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	file:
g_VertexBufferSize	imgui-master/examples/imgui_impl_dx10.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	file:
g_VertexBufferSize	imgui-master/examples/imgui_impl_dx11.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	file:
g_VertexBufferSize	imgui-master/examples/imgui_impl_dx9.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	file:
g_VertexDecl	imgui-master/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_VERTEX_DECL*     g_VertexDecl = NULL;$/;"	v	file:
g_Window	imgui-master/examples/imgui_impl_glfw.cpp	/^static GLFWwindow*          g_Window = NULL;$/;"	v	file:
g_Window	imgui-master/examples/imgui_impl_sdl.cpp	/^static SDL_Window*  g_Window = NULL;$/;"	v	file:
g_WindowData	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static ImGui_ImplVulkanH_WindowData g_WindowData;$/;"	v	file:
g_WindowData	imgui-master/examples/example_sdl_vulkan/main.cpp	/^static ImGui_ImplVulkanH_WindowData g_WindowData;$/;"	v	file:
g_d3dpp	imgui-master/examples/example_win32_directx9/main.cpp	/^static D3DPRESENT_PARAMETERS    g_d3dpp;$/;"	v	file:
g_fence	imgui-master/examples/example_win32_directx12/main.cpp	/^static ID3D12Fence*                 g_fence = NULL;$/;"	v	file:
g_fenceEvent	imgui-master/examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_fenceEvent = NULL;$/;"	v	file:
g_fenceLastSignaledValue	imgui-master/examples/example_win32_directx12/main.cpp	/^static UINT64                       g_fenceLastSignaledValue = 0;$/;"	v	file:
g_frameContext	imgui-master/examples/example_win32_directx12/main.cpp	/^static FrameContext                 g_frameContext[NUM_FRAMES_IN_FLIGHT] = {};$/;"	v	file:
g_frameIndex	imgui-master/examples/example_win32_directx12/main.cpp	/^static UINT                         g_frameIndex = 0;$/;"	v	file:
g_frameIndex	imgui-master/examples/imgui_impl_dx12.cpp	/^static UINT                         g_frameIndex = UINT_MAX;$/;"	v	file:
g_hFontSrvCpuDescHandle	imgui-master/examples/imgui_impl_dx12.cpp	/^static D3D12_CPU_DESCRIPTOR_HANDLE  g_hFontSrvCpuDescHandle = {};$/;"	v	file:
g_hFontSrvGpuDescHandle	imgui-master/examples/imgui_impl_dx12.cpp	/^static D3D12_GPU_DESCRIPTOR_HANDLE  g_hFontSrvGpuDescHandle = {};$/;"	v	file:
g_hSwapChainWaitableObject	imgui-master/examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_hSwapChainWaitableObject = NULL;$/;"	v	file:
g_hWnd	imgui-master/examples/imgui_impl_win32.cpp	/^static HWND                 g_hWnd = 0;$/;"	v	file:
g_mainRenderTargetDescriptor	imgui-master/examples/example_win32_directx12/main.cpp	/^static D3D12_CPU_DESCRIPTOR_HANDLE  g_mainRenderTargetDescriptor[NUM_BACK_BUFFERS] = {};$/;"	v	file:
g_mainRenderTargetResource	imgui-master/examples/example_win32_directx12/main.cpp	/^static ID3D12Resource*              g_mainRenderTargetResource[NUM_BACK_BUFFERS] = {};$/;"	v	file:
g_mainRenderTargetView	imgui-master/examples/example_win32_directx10/main.cpp	/^static ID3D10RenderTargetView*  g_mainRenderTargetView = NULL;$/;"	v	file:
g_mainRenderTargetView	imgui-master/examples/example_win32_directx11/main.cpp	/^static ID3D11RenderTargetView*  g_mainRenderTargetView = NULL;$/;"	v	file:
g_numFramesInFlight	imgui-master/examples/imgui_impl_dx12.cpp	/^static UINT                         g_numFramesInFlight = 0;$/;"	v	file:
g_osdKeyboardEnabled	imgui-master/examples/imgui_impl_marmalade.cpp	/^static bool         g_osdKeyboardEnabled = false;$/;"	v	file:
g_pBlendState	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10BlendState*        g_pBlendState = NULL;$/;"	v	file:
g_pBlendState	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11BlendState*        g_pBlendState = NULL;$/;"	v	file:
g_pDepthStencilState	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10DepthStencilState* g_pDepthStencilState = NULL;$/;"	v	file:
g_pDepthStencilState	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11DepthStencilState* g_pDepthStencilState = NULL;$/;"	v	file:
g_pFactory	imgui-master/examples/imgui_impl_dx10.cpp	/^static IDXGIFactory*            g_pFactory = NULL;$/;"	v	file:
g_pFactory	imgui-master/examples/imgui_impl_dx11.cpp	/^static IDXGIFactory*            g_pFactory = NULL;$/;"	v	file:
g_pFontSampler	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10SamplerState*      g_pFontSampler = NULL;$/;"	v	file:
g_pFontSampler	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11SamplerState*      g_pFontSampler = NULL;$/;"	v	file:
g_pFontTextureResource	imgui-master/examples/imgui_impl_dx12.cpp	/^static ID3D12Resource*              g_pFontTextureResource = NULL;$/;"	v	file:
g_pFontTextureView	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10ShaderResourceView*g_pFontTextureView = NULL;$/;"	v	file:
g_pFontTextureView	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11ShaderResourceView*g_pFontTextureView = NULL;$/;"	v	file:
g_pFrameResources	imgui-master/examples/imgui_impl_dx12.cpp	/^static FrameResources*              g_pFrameResources = NULL;$/;"	v	file:
g_pIB	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10Buffer*            g_pIB = NULL;$/;"	v	file:
g_pIB	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11Buffer*            g_pIB = NULL;$/;"	v	file:
g_pIB	imgui-master/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DINDEXBUFFER9   g_pIB = NULL;$/;"	v	file:
g_pInputLayout	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10InputLayout*       g_pInputLayout = NULL;$/;"	v	file:
g_pInputLayout	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11InputLayout*       g_pInputLayout = NULL;$/;"	v	file:
g_pPipelineState	imgui-master/examples/imgui_impl_dx12.cpp	/^static ID3D12PipelineState*         g_pPipelineState = NULL;$/;"	v	file:
g_pPixelShader	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10PixelShader*       g_pPixelShader = NULL;$/;"	v	file:
g_pPixelShader	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11PixelShader*       g_pPixelShader = NULL;$/;"	v	file:
g_pPixelShaderBlob	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10Blob*              g_pPixelShaderBlob = NULL;$/;"	v	file:
g_pPixelShaderBlob	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D10Blob*              g_pPixelShaderBlob = NULL;$/;"	v	file:
g_pPixelShaderBlob	imgui-master/examples/imgui_impl_dx12.cpp	/^static ID3D10Blob*                  g_pPixelShaderBlob = NULL;$/;"	v	file:
g_pRasterizerState	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10RasterizerState*   g_pRasterizerState = NULL;$/;"	v	file:
g_pRasterizerState	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11RasterizerState*   g_pRasterizerState = NULL;$/;"	v	file:
g_pRootSignature	imgui-master/examples/imgui_impl_dx12.cpp	/^static ID3D12RootSignature*         g_pRootSignature = NULL;$/;"	v	file:
g_pSwapChain	imgui-master/examples/example_win32_directx10/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = NULL;$/;"	v	file:
g_pSwapChain	imgui-master/examples/example_win32_directx11/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = NULL;$/;"	v	file:
g_pSwapChain	imgui-master/examples/example_win32_directx12/main.cpp	/^static IDXGISwapChain3*             g_pSwapChain = NULL;$/;"	v	file:
g_pVB	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10Buffer*            g_pVB = NULL;$/;"	v	file:
g_pVB	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11Buffer*            g_pVB = NULL;$/;"	v	file:
g_pVB	imgui-master/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DVERTEXBUFFER9  g_pVB = NULL;$/;"	v	file:
g_pVertexConstantBuffer	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10Buffer*            g_pVertexConstantBuffer = NULL;$/;"	v	file:
g_pVertexConstantBuffer	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11Buffer*            g_pVertexConstantBuffer = NULL;$/;"	v	file:
g_pVertexShader	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10VertexShader*      g_pVertexShader = NULL;$/;"	v	file:
g_pVertexShader	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11VertexShader*      g_pVertexShader = NULL;$/;"	v	file:
g_pVertexShaderBlob	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10Blob*              g_pVertexShaderBlob = NULL;$/;"	v	file:
g_pVertexShaderBlob	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D10Blob*              g_pVertexShaderBlob = NULL;$/;"	v	file:
g_pVertexShaderBlob	imgui-master/examples/imgui_impl_dx12.cpp	/^static ID3D10Blob*                  g_pVertexShaderBlob = NULL;$/;"	v	file:
g_pd3dCommandList	imgui-master/examples/example_win32_directx12/main.cpp	/^static ID3D12GraphicsCommandList*   g_pd3dCommandList = NULL;$/;"	v	file:
g_pd3dCommandQueue	imgui-master/examples/example_win32_directx12/main.cpp	/^static ID3D12CommandQueue*          g_pd3dCommandQueue = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/example_win32_directx10/main.cpp	/^static ID3D10Device*            g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/example_win32_directx11/main.cpp	/^static ID3D11Device*            g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/example_win32_directx12/main.cpp	/^static ID3D12Device*                g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/example_win32_directx9/main.cpp	/^static LPDIRECT3DDEVICE9        g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/imgui_impl_dx10.cpp	/^static ID3D10Device*            g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11Device*            g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/imgui_impl_dx12.cpp	/^static ID3D12Device*                g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDevice	imgui-master/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DDEVICE9        g_pd3dDevice = NULL;$/;"	v	file:
g_pd3dDeviceContext	imgui-master/examples/example_win32_directx11/main.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = NULL;$/;"	v	file:
g_pd3dDeviceContext	imgui-master/examples/imgui_impl_dx11.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = NULL;$/;"	v	file:
g_pd3dRtvDescHeap	imgui-master/examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dRtvDescHeap = NULL;$/;"	v	file:
g_pd3dSrvDescHeap	imgui-master/examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dSrvDescHeap = NULL;$/;"	v	file:
get_proc	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^static void *get_proc(const char *proc)$/;"	f	file:
gl3wActiveShaderProgram	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLACTIVESHADERPROGRAMPROC gl3wActiveShaderProgram;$/;"	v
gl3wActiveTexture	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLACTIVETEXTUREPROC gl3wActiveTexture;$/;"	v
gl3wAttachShader	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLATTACHSHADERPROC gl3wAttachShader;$/;"	v
gl3wBeginConditionalRender	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINCONDITIONALRENDERPROC gl3wBeginConditionalRender;$/;"	v
gl3wBeginQuery	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINQUERYPROC gl3wBeginQuery;$/;"	v
gl3wBeginQueryIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINQUERYINDEXEDPROC gl3wBeginQueryIndexed;$/;"	v
gl3wBeginTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINTRANSFORMFEEDBACKPROC gl3wBeginTransformFeedback;$/;"	v
gl3wBindAttribLocation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDATTRIBLOCATIONPROC gl3wBindAttribLocation;$/;"	v
gl3wBindBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDBUFFERPROC gl3wBindBuffer;$/;"	v
gl3wBindBufferBase	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDBUFFERBASEPROC gl3wBindBufferBase;$/;"	v
gl3wBindBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDBUFFERRANGEPROC gl3wBindBufferRange;$/;"	v
gl3wBindFragDataLocation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDFRAGDATALOCATIONPROC gl3wBindFragDataLocation;$/;"	v
gl3wBindFragDataLocationIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDFRAGDATALOCATIONINDEXEDPROC gl3wBindFragDataLocationIndexed;$/;"	v
gl3wBindFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDFRAMEBUFFERPROC gl3wBindFramebuffer;$/;"	v
gl3wBindImageTexture	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;$/;"	v
gl3wBindProgramPipeline	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDPROGRAMPIPELINEPROC gl3wBindProgramPipeline;$/;"	v
gl3wBindRenderbuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDRENDERBUFFERPROC gl3wBindRenderbuffer;$/;"	v
gl3wBindSampler	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDSAMPLERPROC gl3wBindSampler;$/;"	v
gl3wBindTexture	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDTEXTUREPROC gl3wBindTexture;$/;"	v
gl3wBindTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDTRANSFORMFEEDBACKPROC gl3wBindTransformFeedback;$/;"	v
gl3wBindVertexArray	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDVERTEXARRAYPROC gl3wBindVertexArray;$/;"	v
gl3wBindVertexBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDVERTEXBUFFERPROC gl3wBindVertexBuffer;$/;"	v
gl3wBlendColor	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDCOLORPROC gl3wBlendColor;$/;"	v
gl3wBlendEquation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONPROC gl3wBlendEquation;$/;"	v
gl3wBlendEquationSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONSEPARATEPROC gl3wBlendEquationSeparate;$/;"	v
gl3wBlendEquationSeparatei	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONSEPARATEIPROC gl3wBlendEquationSeparatei;$/;"	v
gl3wBlendEquationSeparateiARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONSEPARATEIARBPROC gl3wBlendEquationSeparateiARB;$/;"	v
gl3wBlendEquationi	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONIPROC gl3wBlendEquationi;$/;"	v
gl3wBlendEquationiARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONIARBPROC gl3wBlendEquationiARB;$/;"	v
gl3wBlendFunc	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCPROC gl3wBlendFunc;$/;"	v
gl3wBlendFuncSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCSEPARATEPROC gl3wBlendFuncSeparate;$/;"	v
gl3wBlendFuncSeparatei	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCSEPARATEIPROC gl3wBlendFuncSeparatei;$/;"	v
gl3wBlendFuncSeparateiARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCSEPARATEIARBPROC gl3wBlendFuncSeparateiARB;$/;"	v
gl3wBlendFunci	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCIPROC gl3wBlendFunci;$/;"	v
gl3wBlendFunciARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCIARBPROC gl3wBlendFunciARB;$/;"	v
gl3wBlitFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLITFRAMEBUFFERPROC gl3wBlitFramebuffer;$/;"	v
gl3wBufferData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBUFFERDATAPROC gl3wBufferData;$/;"	v
gl3wBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBUFFERSUBDATAPROC gl3wBufferSubData;$/;"	v
gl3wCheckFramebufferStatus	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCHECKFRAMEBUFFERSTATUSPROC gl3wCheckFramebufferStatus;$/;"	v
gl3wClampColor	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLAMPCOLORPROC gl3wClampColor;$/;"	v
gl3wClear	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARPROC gl3wClear;$/;"	v
gl3wClearBufferData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERDATAPROC gl3wClearBufferData;$/;"	v
gl3wClearBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERSUBDATAPROC gl3wClearBufferSubData;$/;"	v
gl3wClearBufferfi	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERFIPROC gl3wClearBufferfi;$/;"	v
gl3wClearBufferfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERFVPROC gl3wClearBufferfv;$/;"	v
gl3wClearBufferiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERIVPROC gl3wClearBufferiv;$/;"	v
gl3wClearBufferuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERUIVPROC gl3wClearBufferuiv;$/;"	v
gl3wClearColor	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARCOLORPROC gl3wClearColor;$/;"	v
gl3wClearDepth	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARDEPTHPROC gl3wClearDepth;$/;"	v
gl3wClearDepthf	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARDEPTHFPROC gl3wClearDepthf;$/;"	v
gl3wClearNamedBufferDataEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARNAMEDBUFFERDATAEXTPROC gl3wClearNamedBufferDataEXT;$/;"	v
gl3wClearNamedBufferSubDataEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC gl3wClearNamedBufferSubDataEXT;$/;"	v
gl3wClearStencil	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARSTENCILPROC gl3wClearStencil;$/;"	v
gl3wClientWaitSync	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLIENTWAITSYNCPROC gl3wClientWaitSync;$/;"	v
gl3wColorMask	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORMASKPROC gl3wColorMask;$/;"	v
gl3wColorMaski	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORMASKIPROC gl3wColorMaski;$/;"	v
gl3wColorP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP3UIPROC gl3wColorP3ui;$/;"	v
gl3wColorP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP3UIVPROC gl3wColorP3uiv;$/;"	v
gl3wColorP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP4UIPROC gl3wColorP4ui;$/;"	v
gl3wColorP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP4UIVPROC gl3wColorP4uiv;$/;"	v
gl3wCompileShader	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPILESHADERPROC gl3wCompileShader;$/;"	v
gl3wCompileShaderIncludeARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPILESHADERINCLUDEARBPROC gl3wCompileShaderIncludeARB;$/;"	v
gl3wCompressedTexImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXIMAGE1DPROC gl3wCompressedTexImage1D;$/;"	v
gl3wCompressedTexImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXIMAGE2DPROC gl3wCompressedTexImage2D;$/;"	v
gl3wCompressedTexImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXIMAGE3DPROC gl3wCompressedTexImage3D;$/;"	v
gl3wCompressedTexSubImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC gl3wCompressedTexSubImage1D;$/;"	v
gl3wCompressedTexSubImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC gl3wCompressedTexSubImage2D;$/;"	v
gl3wCompressedTexSubImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC gl3wCompressedTexSubImage3D;$/;"	v
gl3wCopyBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYBUFFERSUBDATAPROC gl3wCopyBufferSubData;$/;"	v
gl3wCopyImageSubData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYIMAGESUBDATAPROC gl3wCopyImageSubData;$/;"	v
gl3wCopyTexImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXIMAGE1DPROC gl3wCopyTexImage1D;$/;"	v
gl3wCopyTexImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXIMAGE2DPROC gl3wCopyTexImage2D;$/;"	v
gl3wCopyTexSubImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXSUBIMAGE1DPROC gl3wCopyTexSubImage1D;$/;"	v
gl3wCopyTexSubImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXSUBIMAGE2DPROC gl3wCopyTexSubImage2D;$/;"	v
gl3wCopyTexSubImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXSUBIMAGE3DPROC gl3wCopyTexSubImage3D;$/;"	v
gl3wCreateProgram	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATEPROGRAMPROC gl3wCreateProgram;$/;"	v
gl3wCreateShader	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATESHADERPROC gl3wCreateShader;$/;"	v
gl3wCreateShaderProgramv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATESHADERPROGRAMVPROC gl3wCreateShaderProgramv;$/;"	v
gl3wCreateSyncFromCLeventARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATESYNCFROMCLEVENTARBPROC gl3wCreateSyncFromCLeventARB;$/;"	v
gl3wCullFace	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCULLFACEPROC gl3wCullFace;$/;"	v
gl3wDebugMessageCallback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECALLBACKPROC gl3wDebugMessageCallback;$/;"	v
gl3wDebugMessageCallbackARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECALLBACKARBPROC gl3wDebugMessageCallbackARB;$/;"	v
gl3wDebugMessageControl	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECONTROLPROC gl3wDebugMessageControl;$/;"	v
gl3wDebugMessageControlARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECONTROLARBPROC gl3wDebugMessageControlARB;$/;"	v
gl3wDebugMessageInsert	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGEINSERTPROC gl3wDebugMessageInsert;$/;"	v
gl3wDebugMessageInsertARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGEINSERTARBPROC gl3wDebugMessageInsertARB;$/;"	v
gl3wDeleteBuffers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEBUFFERSPROC gl3wDeleteBuffers;$/;"	v
gl3wDeleteFramebuffers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEFRAMEBUFFERSPROC gl3wDeleteFramebuffers;$/;"	v
gl3wDeleteNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETENAMEDSTRINGARBPROC gl3wDeleteNamedStringARB;$/;"	v
gl3wDeleteProgram	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEPROGRAMPROC gl3wDeleteProgram;$/;"	v
gl3wDeleteProgramPipelines	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEPROGRAMPIPELINESPROC gl3wDeleteProgramPipelines;$/;"	v
gl3wDeleteQueries	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEQUERIESPROC gl3wDeleteQueries;$/;"	v
gl3wDeleteRenderbuffers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETERENDERBUFFERSPROC gl3wDeleteRenderbuffers;$/;"	v
gl3wDeleteSamplers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETESAMPLERSPROC gl3wDeleteSamplers;$/;"	v
gl3wDeleteShader	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETESHADERPROC gl3wDeleteShader;$/;"	v
gl3wDeleteSync	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETESYNCPROC gl3wDeleteSync;$/;"	v
gl3wDeleteTextures	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETETEXTURESPROC gl3wDeleteTextures;$/;"	v
gl3wDeleteTransformFeedbacks	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETETRANSFORMFEEDBACKSPROC gl3wDeleteTransformFeedbacks;$/;"	v
gl3wDeleteVertexArrays	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEVERTEXARRAYSPROC gl3wDeleteVertexArrays;$/;"	v
gl3wDepthFunc	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHFUNCPROC gl3wDepthFunc;$/;"	v
gl3wDepthMask	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHMASKPROC gl3wDepthMask;$/;"	v
gl3wDepthRange	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEPROC gl3wDepthRange;$/;"	v
gl3wDepthRangeArrayv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEARRAYVPROC gl3wDepthRangeArrayv;$/;"	v
gl3wDepthRangeIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEINDEXEDPROC gl3wDepthRangeIndexed;$/;"	v
gl3wDepthRangef	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEFPROC gl3wDepthRangef;$/;"	v
gl3wDetachShader	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDETACHSHADERPROC gl3wDetachShader;$/;"	v
gl3wDisable	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISABLEPROC gl3wDisable;$/;"	v
gl3wDisableVertexAttribArray	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISABLEVERTEXATTRIBARRAYPROC gl3wDisableVertexAttribArray;$/;"	v
gl3wDisablei	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISABLEIPROC gl3wDisablei;$/;"	v
gl3wDispatchCompute	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISPATCHCOMPUTEPROC gl3wDispatchCompute;$/;"	v
gl3wDispatchComputeIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISPATCHCOMPUTEINDIRECTPROC gl3wDispatchComputeIndirect;$/;"	v
gl3wDrawArrays	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSPROC gl3wDrawArrays;$/;"	v
gl3wDrawArraysIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSINDIRECTPROC gl3wDrawArraysIndirect;$/;"	v
gl3wDrawArraysInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSINSTANCEDPROC gl3wDrawArraysInstanced;$/;"	v
gl3wDrawArraysInstancedBaseInstance	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC gl3wDrawArraysInstancedBaseInstance;$/;"	v
gl3wDrawBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWBUFFERPROC gl3wDrawBuffer;$/;"	v
gl3wDrawBuffers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWBUFFERSPROC gl3wDrawBuffers;$/;"	v
gl3wDrawElements	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSPROC gl3wDrawElements;$/;"	v
gl3wDrawElementsBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSBASEVERTEXPROC gl3wDrawElementsBaseVertex;$/;"	v
gl3wDrawElementsIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINDIRECTPROC gl3wDrawElementsIndirect;$/;"	v
gl3wDrawElementsInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDPROC gl3wDrawElementsInstanced;$/;"	v
gl3wDrawElementsInstancedBaseInstance	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC gl3wDrawElementsInstancedBaseInstance;$/;"	v
gl3wDrawElementsInstancedBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC gl3wDrawElementsInstancedBaseVertex;$/;"	v
gl3wDrawElementsInstancedBaseVertexBaseInstance	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC gl3wDrawElementsInstancedBaseVertexBaseInstance;$/;"	v
gl3wDrawRangeElements	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWRANGEELEMENTSPROC gl3wDrawRangeElements;$/;"	v
gl3wDrawRangeElementsBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC gl3wDrawRangeElementsBaseVertex;$/;"	v
gl3wDrawTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKPROC gl3wDrawTransformFeedback;$/;"	v
gl3wDrawTransformFeedbackInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC gl3wDrawTransformFeedbackInstanced;$/;"	v
gl3wDrawTransformFeedbackStream	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC gl3wDrawTransformFeedbackStream;$/;"	v
gl3wDrawTransformFeedbackStreamInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC gl3wDrawTransformFeedbackStreamInstanced;$/;"	v
gl3wEnable	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENABLEPROC gl3wEnable;$/;"	v
gl3wEnableVertexAttribArray	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENABLEVERTEXATTRIBARRAYPROC gl3wEnableVertexAttribArray;$/;"	v
gl3wEnablei	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENABLEIPROC gl3wEnablei;$/;"	v
gl3wEndConditionalRender	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDCONDITIONALRENDERPROC gl3wEndConditionalRender;$/;"	v
gl3wEndQuery	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDQUERYPROC gl3wEndQuery;$/;"	v
gl3wEndQueryIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDQUERYINDEXEDPROC gl3wEndQueryIndexed;$/;"	v
gl3wEndTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDTRANSFORMFEEDBACKPROC gl3wEndTransformFeedback;$/;"	v
gl3wFenceSync	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFENCESYNCPROC gl3wFenceSync;$/;"	v
gl3wFinish	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFINISHPROC gl3wFinish;$/;"	v
gl3wFlush	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFLUSHPROC gl3wFlush;$/;"	v
gl3wFlushMappedBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFLUSHMAPPEDBUFFERRANGEPROC gl3wFlushMappedBufferRange;$/;"	v
gl3wFramebufferParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERPARAMETERIPROC gl3wFramebufferParameteri;$/;"	v
gl3wFramebufferRenderbuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERRENDERBUFFERPROC gl3wFramebufferRenderbuffer;$/;"	v
gl3wFramebufferTexture	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTUREPROC gl3wFramebufferTexture;$/;"	v
gl3wFramebufferTexture1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURE1DPROC gl3wFramebufferTexture1D;$/;"	v
gl3wFramebufferTexture2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURE2DPROC gl3wFramebufferTexture2D;$/;"	v
gl3wFramebufferTexture3D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURE3DPROC gl3wFramebufferTexture3D;$/;"	v
gl3wFramebufferTextureLayer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURELAYERPROC gl3wFramebufferTextureLayer;$/;"	v
gl3wFrontFace	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRONTFACEPROC gl3wFrontFace;$/;"	v
gl3wGenBuffers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENBUFFERSPROC gl3wGenBuffers;$/;"	v
gl3wGenFramebuffers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENFRAMEBUFFERSPROC gl3wGenFramebuffers;$/;"	v
gl3wGenProgramPipelines	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENPROGRAMPIPELINESPROC gl3wGenProgramPipelines;$/;"	v
gl3wGenQueries	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENQUERIESPROC gl3wGenQueries;$/;"	v
gl3wGenRenderbuffers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENRENDERBUFFERSPROC gl3wGenRenderbuffers;$/;"	v
gl3wGenSamplers	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENSAMPLERSPROC gl3wGenSamplers;$/;"	v
gl3wGenTextures	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENTEXTURESPROC gl3wGenTextures;$/;"	v
gl3wGenTransformFeedbacks	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENTRANSFORMFEEDBACKSPROC gl3wGenTransformFeedbacks;$/;"	v
gl3wGenVertexArrays	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENVERTEXARRAYSPROC gl3wGenVertexArrays;$/;"	v
gl3wGenerateMipmap	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENERATEMIPMAPPROC gl3wGenerateMipmap;$/;"	v
gl3wGetActiveAtomicCounterBufferiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;$/;"	v
gl3wGetActiveAttrib	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEATTRIBPROC gl3wGetActiveAttrib;$/;"	v
gl3wGetActiveSubroutineName	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVESUBROUTINENAMEPROC gl3wGetActiveSubroutineName;$/;"	v
gl3wGetActiveSubroutineUniformName	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC gl3wGetActiveSubroutineUniformName;$/;"	v
gl3wGetActiveSubroutineUniformiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC gl3wGetActiveSubroutineUniformiv;$/;"	v
gl3wGetActiveUniform	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMPROC gl3wGetActiveUniform;$/;"	v
gl3wGetActiveUniformBlockName	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC gl3wGetActiveUniformBlockName;$/;"	v
gl3wGetActiveUniformBlockiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMBLOCKIVPROC gl3wGetActiveUniformBlockiv;$/;"	v
gl3wGetActiveUniformName	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMNAMEPROC gl3wGetActiveUniformName;$/;"	v
gl3wGetActiveUniformsiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMSIVPROC gl3wGetActiveUniformsiv;$/;"	v
gl3wGetAttachedShaders	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETATTACHEDSHADERSPROC gl3wGetAttachedShaders;$/;"	v
gl3wGetAttribLocation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETATTRIBLOCATIONPROC gl3wGetAttribLocation;$/;"	v
gl3wGetBooleani_v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBOOLEANI_VPROC gl3wGetBooleani_v;$/;"	v
gl3wGetBooleanv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBOOLEANVPROC gl3wGetBooleanv;$/;"	v
gl3wGetBufferParameteri64v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERPARAMETERI64VPROC gl3wGetBufferParameteri64v;$/;"	v
gl3wGetBufferParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERPARAMETERIVPROC gl3wGetBufferParameteriv;$/;"	v
gl3wGetBufferPointerv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERPOINTERVPROC gl3wGetBufferPointerv;$/;"	v
gl3wGetBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERSUBDATAPROC gl3wGetBufferSubData;$/;"	v
gl3wGetCompressedTexImage	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETCOMPRESSEDTEXIMAGEPROC gl3wGetCompressedTexImage;$/;"	v
gl3wGetDebugMessageLog	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDEBUGMESSAGELOGPROC gl3wGetDebugMessageLog;$/;"	v
gl3wGetDebugMessageLogARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDEBUGMESSAGELOGARBPROC gl3wGetDebugMessageLogARB;$/;"	v
gl3wGetDoublei_v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDOUBLEI_VPROC gl3wGetDoublei_v;$/;"	v
gl3wGetDoublev	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDOUBLEVPROC gl3wGetDoublev;$/;"	v
gl3wGetError	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETERRORPROC gl3wGetError;$/;"	v
gl3wGetFloati_v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFLOATI_VPROC gl3wGetFloati_v;$/;"	v
gl3wGetFloatv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFLOATVPROC gl3wGetFloatv;$/;"	v
gl3wGetFragDataIndex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAGDATAINDEXPROC gl3wGetFragDataIndex;$/;"	v
gl3wGetFragDataLocation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAGDATALOCATIONPROC gl3wGetFragDataLocation;$/;"	v
gl3wGetFramebufferAttachmentParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC gl3wGetFramebufferAttachmentParameteriv;$/;"	v
gl3wGetFramebufferParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAMEBUFFERPARAMETERIVPROC gl3wGetFramebufferParameteriv;$/;"	v
gl3wGetGraphicsResetStatusARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETGRAPHICSRESETSTATUSARBPROC gl3wGetGraphicsResetStatusARB;$/;"	v
gl3wGetInteger64i_v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGER64I_VPROC gl3wGetInteger64i_v;$/;"	v
gl3wGetInteger64v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGER64VPROC gl3wGetInteger64v;$/;"	v
gl3wGetIntegeri_v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGERI_VPROC gl3wGetIntegeri_v;$/;"	v
gl3wGetIntegerv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGERVPROC gl3wGetIntegerv;$/;"	v
gl3wGetInternalformati64v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTERNALFORMATI64VPROC gl3wGetInternalformati64v;$/;"	v
gl3wGetInternalformativ	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTERNALFORMATIVPROC gl3wGetInternalformativ;$/;"	v
gl3wGetMultisamplefv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETMULTISAMPLEFVPROC gl3wGetMultisamplefv;$/;"	v
gl3wGetNamedFramebufferParameterivEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC gl3wGetNamedFramebufferParameterivEXT;$/;"	v
gl3wGetNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNAMEDSTRINGARBPROC gl3wGetNamedStringARB;$/;"	v
gl3wGetNamedStringivARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNAMEDSTRINGIVARBPROC gl3wGetNamedStringivARB;$/;"	v
gl3wGetObjectLabel	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETOBJECTLABELPROC gl3wGetObjectLabel;$/;"	v
gl3wGetObjectPtrLabel	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETOBJECTPTRLABELPROC gl3wGetObjectPtrLabel;$/;"	v
gl3wGetPointerv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPOINTERVPROC gl3wGetPointerv;$/;"	v
gl3wGetProcAddress	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^void *gl3wGetProcAddress(const char *proc)$/;"	f
gl3wGetProgramBinary	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMBINARYPROC gl3wGetProgramBinary;$/;"	v
gl3wGetProgramInfoLog	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMINFOLOGPROC gl3wGetProgramInfoLog;$/;"	v
gl3wGetProgramInterfaceiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMINTERFACEIVPROC gl3wGetProgramInterfaceiv;$/;"	v
gl3wGetProgramPipelineInfoLog	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMPIPELINEINFOLOGPROC gl3wGetProgramPipelineInfoLog;$/;"	v
gl3wGetProgramPipelineiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMPIPELINEIVPROC gl3wGetProgramPipelineiv;$/;"	v
gl3wGetProgramResourceIndex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCEINDEXPROC gl3wGetProgramResourceIndex;$/;"	v
gl3wGetProgramResourceLocation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCELOCATIONPROC gl3wGetProgramResourceLocation;$/;"	v
gl3wGetProgramResourceLocationIndex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC gl3wGetProgramResourceLocationIndex;$/;"	v
gl3wGetProgramResourceName	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCENAMEPROC gl3wGetProgramResourceName;$/;"	v
gl3wGetProgramResourceiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCEIVPROC gl3wGetProgramResourceiv;$/;"	v
gl3wGetProgramStageiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMSTAGEIVPROC gl3wGetProgramStageiv;$/;"	v
gl3wGetProgramiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMIVPROC gl3wGetProgramiv;$/;"	v
gl3wGetQueryIndexediv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYINDEXEDIVPROC gl3wGetQueryIndexediv;$/;"	v
gl3wGetQueryObjecti64v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTI64VPROC gl3wGetQueryObjecti64v;$/;"	v
gl3wGetQueryObjectiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTIVPROC gl3wGetQueryObjectiv;$/;"	v
gl3wGetQueryObjectui64v	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTUI64VPROC gl3wGetQueryObjectui64v;$/;"	v
gl3wGetQueryObjectuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTUIVPROC gl3wGetQueryObjectuiv;$/;"	v
gl3wGetQueryiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYIVPROC gl3wGetQueryiv;$/;"	v
gl3wGetRenderbufferParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETRENDERBUFFERPARAMETERIVPROC gl3wGetRenderbufferParameteriv;$/;"	v
gl3wGetSamplerParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERIIVPROC gl3wGetSamplerParameterIiv;$/;"	v
gl3wGetSamplerParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERIUIVPROC gl3wGetSamplerParameterIuiv;$/;"	v
gl3wGetSamplerParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERFVPROC gl3wGetSamplerParameterfv;$/;"	v
gl3wGetSamplerParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERIVPROC gl3wGetSamplerParameteriv;$/;"	v
gl3wGetShaderInfoLog	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERINFOLOGPROC gl3wGetShaderInfoLog;$/;"	v
gl3wGetShaderPrecisionFormat	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERPRECISIONFORMATPROC gl3wGetShaderPrecisionFormat;$/;"	v
gl3wGetShaderSource	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERSOURCEPROC gl3wGetShaderSource;$/;"	v
gl3wGetShaderiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERIVPROC gl3wGetShaderiv;$/;"	v
gl3wGetString	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSTRINGPROC gl3wGetString;$/;"	v
gl3wGetStringi	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSTRINGIPROC gl3wGetStringi;$/;"	v
gl3wGetSubroutineIndex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSUBROUTINEINDEXPROC gl3wGetSubroutineIndex;$/;"	v
gl3wGetSubroutineUniformLocation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC gl3wGetSubroutineUniformLocation;$/;"	v
gl3wGetSynciv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSYNCIVPROC gl3wGetSynciv;$/;"	v
gl3wGetTexImage	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXIMAGEPROC gl3wGetTexImage;$/;"	v
gl3wGetTexLevelParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXLEVELPARAMETERFVPROC gl3wGetTexLevelParameterfv;$/;"	v
gl3wGetTexLevelParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXLEVELPARAMETERIVPROC gl3wGetTexLevelParameteriv;$/;"	v
gl3wGetTexParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERIIVPROC gl3wGetTexParameterIiv;$/;"	v
gl3wGetTexParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERIUIVPROC gl3wGetTexParameterIuiv;$/;"	v
gl3wGetTexParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERFVPROC gl3wGetTexParameterfv;$/;"	v
gl3wGetTexParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERIVPROC gl3wGetTexParameteriv;$/;"	v
gl3wGetTransformFeedbackVarying	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTRANSFORMFEEDBACKVARYINGPROC gl3wGetTransformFeedbackVarying;$/;"	v
gl3wGetUniformBlockIndex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMBLOCKINDEXPROC gl3wGetUniformBlockIndex;$/;"	v
gl3wGetUniformIndices	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMINDICESPROC gl3wGetUniformIndices;$/;"	v
gl3wGetUniformLocation	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMLOCATIONPROC gl3wGetUniformLocation;$/;"	v
gl3wGetUniformSubroutineuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMSUBROUTINEUIVPROC gl3wGetUniformSubroutineuiv;$/;"	v
gl3wGetUniformdv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMDVPROC gl3wGetUniformdv;$/;"	v
gl3wGetUniformfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMFVPROC gl3wGetUniformfv;$/;"	v
gl3wGetUniformiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMIVPROC gl3wGetUniformiv;$/;"	v
gl3wGetUniformuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMUIVPROC gl3wGetUniformuiv;$/;"	v
gl3wGetVertexAttribIiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBIIVPROC gl3wGetVertexAttribIiv;$/;"	v
gl3wGetVertexAttribIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBIUIVPROC gl3wGetVertexAttribIuiv;$/;"	v
gl3wGetVertexAttribLdv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBLDVPROC gl3wGetVertexAttribLdv;$/;"	v
gl3wGetVertexAttribPointerv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBPOINTERVPROC gl3wGetVertexAttribPointerv;$/;"	v
gl3wGetVertexAttribdv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBDVPROC gl3wGetVertexAttribdv;$/;"	v
gl3wGetVertexAttribfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBFVPROC gl3wGetVertexAttribfv;$/;"	v
gl3wGetVertexAttribiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBIVPROC gl3wGetVertexAttribiv;$/;"	v
gl3wGetnCompressedTexImageARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC gl3wGetnCompressedTexImageARB;$/;"	v
gl3wGetnTexImageARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNTEXIMAGEARBPROC gl3wGetnTexImageARB;$/;"	v
gl3wGetnUniformdvARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMDVARBPROC gl3wGetnUniformdvARB;$/;"	v
gl3wGetnUniformfvARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMFVARBPROC gl3wGetnUniformfvARB;$/;"	v
gl3wGetnUniformivARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMIVARBPROC gl3wGetnUniformivARB;$/;"	v
gl3wGetnUniformuivARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMUIVARBPROC gl3wGetnUniformuivARB;$/;"	v
gl3wHint	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLHINTPROC gl3wHint;$/;"	v
gl3wInit	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^int gl3wInit(void)$/;"	f
gl3wInvalidateBufferData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATEBUFFERDATAPROC gl3wInvalidateBufferData;$/;"	v
gl3wInvalidateBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATEBUFFERSUBDATAPROC gl3wInvalidateBufferSubData;$/;"	v
gl3wInvalidateFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATEFRAMEBUFFERPROC gl3wInvalidateFramebuffer;$/;"	v
gl3wInvalidateSubFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATESUBFRAMEBUFFERPROC gl3wInvalidateSubFramebuffer;$/;"	v
gl3wInvalidateTexImage	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATETEXIMAGEPROC gl3wInvalidateTexImage;$/;"	v
gl3wInvalidateTexSubImage	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATETEXSUBIMAGEPROC gl3wInvalidateTexSubImage;$/;"	v
gl3wIsBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISBUFFERPROC gl3wIsBuffer;$/;"	v
gl3wIsEnabled	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISENABLEDPROC gl3wIsEnabled;$/;"	v
gl3wIsEnabledi	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISENABLEDIPROC gl3wIsEnabledi;$/;"	v
gl3wIsFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISFRAMEBUFFERPROC gl3wIsFramebuffer;$/;"	v
gl3wIsNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISNAMEDSTRINGARBPROC gl3wIsNamedStringARB;$/;"	v
gl3wIsProgram	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISPROGRAMPROC gl3wIsProgram;$/;"	v
gl3wIsProgramPipeline	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISPROGRAMPIPELINEPROC gl3wIsProgramPipeline;$/;"	v
gl3wIsQuery	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISQUERYPROC gl3wIsQuery;$/;"	v
gl3wIsRenderbuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISRENDERBUFFERPROC gl3wIsRenderbuffer;$/;"	v
gl3wIsSampler	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISSAMPLERPROC gl3wIsSampler;$/;"	v
gl3wIsShader	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISSHADERPROC gl3wIsShader;$/;"	v
gl3wIsSupported	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^int gl3wIsSupported(int major, int minor)$/;"	f
gl3wIsSync	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISSYNCPROC gl3wIsSync;$/;"	v
gl3wIsTexture	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISTEXTUREPROC gl3wIsTexture;$/;"	v
gl3wIsTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISTRANSFORMFEEDBACKPROC gl3wIsTransformFeedback;$/;"	v
gl3wIsVertexArray	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISVERTEXARRAYPROC gl3wIsVertexArray;$/;"	v
gl3wLineWidth	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLLINEWIDTHPROC gl3wLineWidth;$/;"	v
gl3wLinkProgram	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLLINKPROGRAMPROC gl3wLinkProgram;$/;"	v
gl3wLogicOp	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLLOGICOPPROC gl3wLogicOp;$/;"	v
gl3wMapBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMAPBUFFERPROC gl3wMapBuffer;$/;"	v
gl3wMapBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMAPBUFFERRANGEPROC gl3wMapBufferRange;$/;"	v
gl3wMemoryBarrier	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;$/;"	v
gl3wMinSampleShading	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMINSAMPLESHADINGPROC gl3wMinSampleShading;$/;"	v
gl3wMinSampleShadingARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMINSAMPLESHADINGARBPROC gl3wMinSampleShadingARB;$/;"	v
gl3wMultiDrawArrays	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWARRAYSPROC gl3wMultiDrawArrays;$/;"	v
gl3wMultiDrawArraysIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWARRAYSINDIRECTPROC gl3wMultiDrawArraysIndirect;$/;"	v
gl3wMultiDrawElements	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWELEMENTSPROC gl3wMultiDrawElements;$/;"	v
gl3wMultiDrawElementsBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC gl3wMultiDrawElementsBaseVertex;$/;"	v
gl3wMultiDrawElementsIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWELEMENTSINDIRECTPROC gl3wMultiDrawElementsIndirect;$/;"	v
gl3wMultiTexCoordP1ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP1UIPROC gl3wMultiTexCoordP1ui;$/;"	v
gl3wMultiTexCoordP1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP1UIVPROC gl3wMultiTexCoordP1uiv;$/;"	v
gl3wMultiTexCoordP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP2UIPROC gl3wMultiTexCoordP2ui;$/;"	v
gl3wMultiTexCoordP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP2UIVPROC gl3wMultiTexCoordP2uiv;$/;"	v
gl3wMultiTexCoordP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP3UIPROC gl3wMultiTexCoordP3ui;$/;"	v
gl3wMultiTexCoordP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP3UIVPROC gl3wMultiTexCoordP3uiv;$/;"	v
gl3wMultiTexCoordP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP4UIPROC gl3wMultiTexCoordP4ui;$/;"	v
gl3wMultiTexCoordP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP4UIVPROC gl3wMultiTexCoordP4uiv;$/;"	v
gl3wNamedFramebufferParameteriEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC gl3wNamedFramebufferParameteriEXT;$/;"	v
gl3wNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNAMEDSTRINGARBPROC gl3wNamedStringARB;$/;"	v
gl3wNormalP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNORMALP3UIPROC gl3wNormalP3ui;$/;"	v
gl3wNormalP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNORMALP3UIVPROC gl3wNormalP3uiv;$/;"	v
gl3wObjectLabel	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLOBJECTLABELPROC gl3wObjectLabel;$/;"	v
gl3wObjectPtrLabel	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLOBJECTPTRLABELPROC gl3wObjectPtrLabel;$/;"	v
gl3wPatchParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPATCHPARAMETERFVPROC gl3wPatchParameterfv;$/;"	v
gl3wPatchParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPATCHPARAMETERIPROC gl3wPatchParameteri;$/;"	v
gl3wPauseTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPAUSETRANSFORMFEEDBACKPROC gl3wPauseTransformFeedback;$/;"	v
gl3wPixelStoref	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPIXELSTOREFPROC gl3wPixelStoref;$/;"	v
gl3wPixelStorei	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPIXELSTOREIPROC gl3wPixelStorei;$/;"	v
gl3wPointParameterf	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERFPROC gl3wPointParameterf;$/;"	v
gl3wPointParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERFVPROC gl3wPointParameterfv;$/;"	v
gl3wPointParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERIPROC gl3wPointParameteri;$/;"	v
gl3wPointParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERIVPROC gl3wPointParameteriv;$/;"	v
gl3wPointSize	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTSIZEPROC gl3wPointSize;$/;"	v
gl3wPolygonMode	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOLYGONMODEPROC gl3wPolygonMode;$/;"	v
gl3wPolygonOffset	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOLYGONOFFSETPROC gl3wPolygonOffset;$/;"	v
gl3wPopDebugGroup	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOPDEBUGGROUPPROC gl3wPopDebugGroup;$/;"	v
gl3wPrimitiveRestartIndex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPRIMITIVERESTARTINDEXPROC gl3wPrimitiveRestartIndex;$/;"	v
gl3wProgramBinary	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMBINARYPROC gl3wProgramBinary;$/;"	v
gl3wProgramParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMPARAMETERIPROC gl3wProgramParameteri;$/;"	v
gl3wProgramUniform1d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1DPROC gl3wProgramUniform1d;$/;"	v
gl3wProgramUniform1dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1DVPROC gl3wProgramUniform1dv;$/;"	v
gl3wProgramUniform1f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1FPROC gl3wProgramUniform1f;$/;"	v
gl3wProgramUniform1fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1FVPROC gl3wProgramUniform1fv;$/;"	v
gl3wProgramUniform1i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1IPROC gl3wProgramUniform1i;$/;"	v
gl3wProgramUniform1iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1IVPROC gl3wProgramUniform1iv;$/;"	v
gl3wProgramUniform1ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1UIPROC gl3wProgramUniform1ui;$/;"	v
gl3wProgramUniform1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1UIVPROC gl3wProgramUniform1uiv;$/;"	v
gl3wProgramUniform2d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2DPROC gl3wProgramUniform2d;$/;"	v
gl3wProgramUniform2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2DVPROC gl3wProgramUniform2dv;$/;"	v
gl3wProgramUniform2f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2FPROC gl3wProgramUniform2f;$/;"	v
gl3wProgramUniform2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2FVPROC gl3wProgramUniform2fv;$/;"	v
gl3wProgramUniform2i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2IPROC gl3wProgramUniform2i;$/;"	v
gl3wProgramUniform2iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2IVPROC gl3wProgramUniform2iv;$/;"	v
gl3wProgramUniform2ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2UIPROC gl3wProgramUniform2ui;$/;"	v
gl3wProgramUniform2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2UIVPROC gl3wProgramUniform2uiv;$/;"	v
gl3wProgramUniform3d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3DPROC gl3wProgramUniform3d;$/;"	v
gl3wProgramUniform3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3DVPROC gl3wProgramUniform3dv;$/;"	v
gl3wProgramUniform3f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3FPROC gl3wProgramUniform3f;$/;"	v
gl3wProgramUniform3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3FVPROC gl3wProgramUniform3fv;$/;"	v
gl3wProgramUniform3i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3IPROC gl3wProgramUniform3i;$/;"	v
gl3wProgramUniform3iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3IVPROC gl3wProgramUniform3iv;$/;"	v
gl3wProgramUniform3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3UIPROC gl3wProgramUniform3ui;$/;"	v
gl3wProgramUniform3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3UIVPROC gl3wProgramUniform3uiv;$/;"	v
gl3wProgramUniform4d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4DPROC gl3wProgramUniform4d;$/;"	v
gl3wProgramUniform4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4DVPROC gl3wProgramUniform4dv;$/;"	v
gl3wProgramUniform4f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4FPROC gl3wProgramUniform4f;$/;"	v
gl3wProgramUniform4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4FVPROC gl3wProgramUniform4fv;$/;"	v
gl3wProgramUniform4i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4IPROC gl3wProgramUniform4i;$/;"	v
gl3wProgramUniform4iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4IVPROC gl3wProgramUniform4iv;$/;"	v
gl3wProgramUniform4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4UIPROC gl3wProgramUniform4ui;$/;"	v
gl3wProgramUniform4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4UIVPROC gl3wProgramUniform4uiv;$/;"	v
gl3wProgramUniformMatrix2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2DVPROC gl3wProgramUniformMatrix2dv;$/;"	v
gl3wProgramUniformMatrix2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2FVPROC gl3wProgramUniformMatrix2fv;$/;"	v
gl3wProgramUniformMatrix2x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC gl3wProgramUniformMatrix2x3dv;$/;"	v
gl3wProgramUniformMatrix2x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC gl3wProgramUniformMatrix2x3fv;$/;"	v
gl3wProgramUniformMatrix2x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC gl3wProgramUniformMatrix2x4dv;$/;"	v
gl3wProgramUniformMatrix2x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC gl3wProgramUniformMatrix2x4fv;$/;"	v
gl3wProgramUniformMatrix3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3DVPROC gl3wProgramUniformMatrix3dv;$/;"	v
gl3wProgramUniformMatrix3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3FVPROC gl3wProgramUniformMatrix3fv;$/;"	v
gl3wProgramUniformMatrix3x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC gl3wProgramUniformMatrix3x2dv;$/;"	v
gl3wProgramUniformMatrix3x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC gl3wProgramUniformMatrix3x2fv;$/;"	v
gl3wProgramUniformMatrix3x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC gl3wProgramUniformMatrix3x4dv;$/;"	v
gl3wProgramUniformMatrix3x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC gl3wProgramUniformMatrix3x4fv;$/;"	v
gl3wProgramUniformMatrix4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4DVPROC gl3wProgramUniformMatrix4dv;$/;"	v
gl3wProgramUniformMatrix4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4FVPROC gl3wProgramUniformMatrix4fv;$/;"	v
gl3wProgramUniformMatrix4x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC gl3wProgramUniformMatrix4x2dv;$/;"	v
gl3wProgramUniformMatrix4x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC gl3wProgramUniformMatrix4x2fv;$/;"	v
gl3wProgramUniformMatrix4x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC gl3wProgramUniformMatrix4x3dv;$/;"	v
gl3wProgramUniformMatrix4x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC gl3wProgramUniformMatrix4x3fv;$/;"	v
gl3wProvokingVertex	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROVOKINGVERTEXPROC gl3wProvokingVertex;$/;"	v
gl3wPushDebugGroup	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPUSHDEBUGGROUPPROC gl3wPushDebugGroup;$/;"	v
gl3wQueryCounter	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLQUERYCOUNTERPROC gl3wQueryCounter;$/;"	v
gl3wReadBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLREADBUFFERPROC gl3wReadBuffer;$/;"	v
gl3wReadPixels	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLREADPIXELSPROC gl3wReadPixels;$/;"	v
gl3wReadnPixelsARB	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLREADNPIXELSARBPROC gl3wReadnPixelsARB;$/;"	v
gl3wReleaseShaderCompiler	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRELEASESHADERCOMPILERPROC gl3wReleaseShaderCompiler;$/;"	v
gl3wRenderbufferStorage	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRENDERBUFFERSTORAGEPROC gl3wRenderbufferStorage;$/;"	v
gl3wRenderbufferStorageMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC gl3wRenderbufferStorageMultisample;$/;"	v
gl3wResumeTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRESUMETRANSFORMFEEDBACKPROC gl3wResumeTransformFeedback;$/;"	v
gl3wSampleCoverage	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLECOVERAGEPROC gl3wSampleCoverage;$/;"	v
gl3wSampleMaski	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLEMASKIPROC gl3wSampleMaski;$/;"	v
gl3wSamplerParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIIVPROC gl3wSamplerParameterIiv;$/;"	v
gl3wSamplerParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIUIVPROC gl3wSamplerParameterIuiv;$/;"	v
gl3wSamplerParameterf	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERFPROC gl3wSamplerParameterf;$/;"	v
gl3wSamplerParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERFVPROC gl3wSamplerParameterfv;$/;"	v
gl3wSamplerParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIPROC gl3wSamplerParameteri;$/;"	v
gl3wSamplerParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIVPROC gl3wSamplerParameteriv;$/;"	v
gl3wScissor	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORPROC gl3wScissor;$/;"	v
gl3wScissorArrayv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORARRAYVPROC gl3wScissorArrayv;$/;"	v
gl3wScissorIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORINDEXEDPROC gl3wScissorIndexed;$/;"	v
gl3wScissorIndexedv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORINDEXEDVPROC gl3wScissorIndexedv;$/;"	v
gl3wSecondaryColorP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSECONDARYCOLORP3UIPROC gl3wSecondaryColorP3ui;$/;"	v
gl3wSecondaryColorP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSECONDARYCOLORP3UIVPROC gl3wSecondaryColorP3uiv;$/;"	v
gl3wShaderBinary	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSHADERBINARYPROC gl3wShaderBinary;$/;"	v
gl3wShaderSource	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSHADERSOURCEPROC gl3wShaderSource;$/;"	v
gl3wShaderStorageBlockBinding	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSHADERSTORAGEBLOCKBINDINGPROC gl3wShaderStorageBlockBinding;$/;"	v
gl3wStencilFunc	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILFUNCPROC gl3wStencilFunc;$/;"	v
gl3wStencilFuncSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILFUNCSEPARATEPROC gl3wStencilFuncSeparate;$/;"	v
gl3wStencilMask	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILMASKPROC gl3wStencilMask;$/;"	v
gl3wStencilMaskSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILMASKSEPARATEPROC gl3wStencilMaskSeparate;$/;"	v
gl3wStencilOp	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILOPPROC gl3wStencilOp;$/;"	v
gl3wStencilOpSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILOPSEPARATEPROC gl3wStencilOpSeparate;$/;"	v
gl3wTexBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXBUFFERPROC gl3wTexBuffer;$/;"	v
gl3wTexBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXBUFFERRANGEPROC gl3wTexBufferRange;$/;"	v
gl3wTexCoordP1ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP1UIPROC gl3wTexCoordP1ui;$/;"	v
gl3wTexCoordP1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP1UIVPROC gl3wTexCoordP1uiv;$/;"	v
gl3wTexCoordP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP2UIPROC gl3wTexCoordP2ui;$/;"	v
gl3wTexCoordP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP2UIVPROC gl3wTexCoordP2uiv;$/;"	v
gl3wTexCoordP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP3UIPROC gl3wTexCoordP3ui;$/;"	v
gl3wTexCoordP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP3UIVPROC gl3wTexCoordP3uiv;$/;"	v
gl3wTexCoordP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP4UIPROC gl3wTexCoordP4ui;$/;"	v
gl3wTexCoordP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP4UIVPROC gl3wTexCoordP4uiv;$/;"	v
gl3wTexImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE1DPROC gl3wTexImage1D;$/;"	v
gl3wTexImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE2DPROC gl3wTexImage2D;$/;"	v
gl3wTexImage2DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE2DMULTISAMPLEPROC gl3wTexImage2DMultisample;$/;"	v
gl3wTexImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE3DPROC gl3wTexImage3D;$/;"	v
gl3wTexImage3DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE3DMULTISAMPLEPROC gl3wTexImage3DMultisample;$/;"	v
gl3wTexParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIIVPROC gl3wTexParameterIiv;$/;"	v
gl3wTexParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIUIVPROC gl3wTexParameterIuiv;$/;"	v
gl3wTexParameterf	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERFPROC gl3wTexParameterf;$/;"	v
gl3wTexParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERFVPROC gl3wTexParameterfv;$/;"	v
gl3wTexParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIPROC gl3wTexParameteri;$/;"	v
gl3wTexParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIVPROC gl3wTexParameteriv;$/;"	v
gl3wTexStorage1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;$/;"	v
gl3wTexStorage2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;$/;"	v
gl3wTexStorage2DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE2DMULTISAMPLEPROC gl3wTexStorage2DMultisample;$/;"	v
gl3wTexStorage3D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE3DPROC gl3wTexStorage3D;$/;"	v
gl3wTexStorage3DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE3DMULTISAMPLEPROC gl3wTexStorage3DMultisample;$/;"	v
gl3wTexSubImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSUBIMAGE1DPROC gl3wTexSubImage1D;$/;"	v
gl3wTexSubImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSUBIMAGE2DPROC gl3wTexSubImage2D;$/;"	v
gl3wTexSubImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSUBIMAGE3DPROC gl3wTexSubImage3D;$/;"	v
gl3wTextureBufferRangeEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTUREBUFFERRANGEEXTPROC gl3wTextureBufferRangeEXT;$/;"	v
gl3wTextureStorage1DEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE1DEXTPROC gl3wTextureStorage1DEXT;$/;"	v
gl3wTextureStorage2DEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE2DEXTPROC gl3wTextureStorage2DEXT;$/;"	v
gl3wTextureStorage2DMultisampleEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC gl3wTextureStorage2DMultisampleEXT;$/;"	v
gl3wTextureStorage3DEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE3DEXTPROC gl3wTextureStorage3DEXT;$/;"	v
gl3wTextureStorage3DMultisampleEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC gl3wTextureStorage3DMultisampleEXT;$/;"	v
gl3wTextureView	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTUREVIEWPROC gl3wTextureView;$/;"	v
gl3wTransformFeedbackVaryings	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTRANSFORMFEEDBACKVARYINGSPROC gl3wTransformFeedbackVaryings;$/;"	v
gl3wUniform1d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1DPROC gl3wUniform1d;$/;"	v
gl3wUniform1dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1DVPROC gl3wUniform1dv;$/;"	v
gl3wUniform1f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1FPROC gl3wUniform1f;$/;"	v
gl3wUniform1fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1FVPROC gl3wUniform1fv;$/;"	v
gl3wUniform1i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1IPROC gl3wUniform1i;$/;"	v
gl3wUniform1iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1IVPROC gl3wUniform1iv;$/;"	v
gl3wUniform1ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1UIPROC gl3wUniform1ui;$/;"	v
gl3wUniform1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1UIVPROC gl3wUniform1uiv;$/;"	v
gl3wUniform2d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2DPROC gl3wUniform2d;$/;"	v
gl3wUniform2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2DVPROC gl3wUniform2dv;$/;"	v
gl3wUniform2f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2FPROC gl3wUniform2f;$/;"	v
gl3wUniform2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2FVPROC gl3wUniform2fv;$/;"	v
gl3wUniform2i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2IPROC gl3wUniform2i;$/;"	v
gl3wUniform2iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2IVPROC gl3wUniform2iv;$/;"	v
gl3wUniform2ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2UIPROC gl3wUniform2ui;$/;"	v
gl3wUniform2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2UIVPROC gl3wUniform2uiv;$/;"	v
gl3wUniform3d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3DPROC gl3wUniform3d;$/;"	v
gl3wUniform3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3DVPROC gl3wUniform3dv;$/;"	v
gl3wUniform3f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3FPROC gl3wUniform3f;$/;"	v
gl3wUniform3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3FVPROC gl3wUniform3fv;$/;"	v
gl3wUniform3i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3IPROC gl3wUniform3i;$/;"	v
gl3wUniform3iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3IVPROC gl3wUniform3iv;$/;"	v
gl3wUniform3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3UIPROC gl3wUniform3ui;$/;"	v
gl3wUniform3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3UIVPROC gl3wUniform3uiv;$/;"	v
gl3wUniform4d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4DPROC gl3wUniform4d;$/;"	v
gl3wUniform4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4DVPROC gl3wUniform4dv;$/;"	v
gl3wUniform4f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4FPROC gl3wUniform4f;$/;"	v
gl3wUniform4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4FVPROC gl3wUniform4fv;$/;"	v
gl3wUniform4i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4IPROC gl3wUniform4i;$/;"	v
gl3wUniform4iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4IVPROC gl3wUniform4iv;$/;"	v
gl3wUniform4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4UIPROC gl3wUniform4ui;$/;"	v
gl3wUniform4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4UIVPROC gl3wUniform4uiv;$/;"	v
gl3wUniformBlockBinding	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMBLOCKBINDINGPROC gl3wUniformBlockBinding;$/;"	v
gl3wUniformMatrix2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2DVPROC gl3wUniformMatrix2dv;$/;"	v
gl3wUniformMatrix2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2FVPROC gl3wUniformMatrix2fv;$/;"	v
gl3wUniformMatrix2x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X3DVPROC gl3wUniformMatrix2x3dv;$/;"	v
gl3wUniformMatrix2x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X3FVPROC gl3wUniformMatrix2x3fv;$/;"	v
gl3wUniformMatrix2x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X4DVPROC gl3wUniformMatrix2x4dv;$/;"	v
gl3wUniformMatrix2x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X4FVPROC gl3wUniformMatrix2x4fv;$/;"	v
gl3wUniformMatrix3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3DVPROC gl3wUniformMatrix3dv;$/;"	v
gl3wUniformMatrix3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3FVPROC gl3wUniformMatrix3fv;$/;"	v
gl3wUniformMatrix3x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X2DVPROC gl3wUniformMatrix3x2dv;$/;"	v
gl3wUniformMatrix3x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X2FVPROC gl3wUniformMatrix3x2fv;$/;"	v
gl3wUniformMatrix3x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X4DVPROC gl3wUniformMatrix3x4dv;$/;"	v
gl3wUniformMatrix3x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X4FVPROC gl3wUniformMatrix3x4fv;$/;"	v
gl3wUniformMatrix4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4DVPROC gl3wUniformMatrix4dv;$/;"	v
gl3wUniformMatrix4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4FVPROC gl3wUniformMatrix4fv;$/;"	v
gl3wUniformMatrix4x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X2DVPROC gl3wUniformMatrix4x2dv;$/;"	v
gl3wUniformMatrix4x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X2FVPROC gl3wUniformMatrix4x2fv;$/;"	v
gl3wUniformMatrix4x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X3DVPROC gl3wUniformMatrix4x3dv;$/;"	v
gl3wUniformMatrix4x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X3FVPROC gl3wUniformMatrix4x3fv;$/;"	v
gl3wUniformSubroutinesuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMSUBROUTINESUIVPROC gl3wUniformSubroutinesuiv;$/;"	v
gl3wUnmapBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNMAPBUFFERPROC gl3wUnmapBuffer;$/;"	v
gl3wUseProgram	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUSEPROGRAMPROC gl3wUseProgram;$/;"	v
gl3wUseProgramStages	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUSEPROGRAMSTAGESPROC gl3wUseProgramStages;$/;"	v
gl3wValidateProgram	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVALIDATEPROGRAMPROC gl3wValidateProgram;$/;"	v
gl3wValidateProgramPipeline	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVALIDATEPROGRAMPIPELINEPROC gl3wValidateProgramPipeline;$/;"	v
gl3wVertexArrayBindVertexBufferEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC gl3wVertexArrayBindVertexBufferEXT;$/;"	v
gl3wVertexArrayVertexAttribBindingEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC gl3wVertexArrayVertexAttribBindingEXT;$/;"	v
gl3wVertexArrayVertexAttribFormatEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC gl3wVertexArrayVertexAttribFormatEXT;$/;"	v
gl3wVertexArrayVertexAttribIFormatEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC gl3wVertexArrayVertexAttribIFormatEXT;$/;"	v
gl3wVertexArrayVertexAttribLFormatEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC gl3wVertexArrayVertexAttribLFormatEXT;$/;"	v
gl3wVertexArrayVertexBindingDivisorEXT	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC gl3wVertexArrayVertexBindingDivisorEXT;$/;"	v
gl3wVertexAttrib1d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1DPROC gl3wVertexAttrib1d;$/;"	v
gl3wVertexAttrib1dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1DVPROC gl3wVertexAttrib1dv;$/;"	v
gl3wVertexAttrib1f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1FPROC gl3wVertexAttrib1f;$/;"	v
gl3wVertexAttrib1fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1FVPROC gl3wVertexAttrib1fv;$/;"	v
gl3wVertexAttrib1s	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1SPROC gl3wVertexAttrib1s;$/;"	v
gl3wVertexAttrib1sv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1SVPROC gl3wVertexAttrib1sv;$/;"	v
gl3wVertexAttrib2d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2DPROC gl3wVertexAttrib2d;$/;"	v
gl3wVertexAttrib2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2DVPROC gl3wVertexAttrib2dv;$/;"	v
gl3wVertexAttrib2f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2FPROC gl3wVertexAttrib2f;$/;"	v
gl3wVertexAttrib2fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2FVPROC gl3wVertexAttrib2fv;$/;"	v
gl3wVertexAttrib2s	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2SPROC gl3wVertexAttrib2s;$/;"	v
gl3wVertexAttrib2sv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2SVPROC gl3wVertexAttrib2sv;$/;"	v
gl3wVertexAttrib3d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3DPROC gl3wVertexAttrib3d;$/;"	v
gl3wVertexAttrib3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3DVPROC gl3wVertexAttrib3dv;$/;"	v
gl3wVertexAttrib3f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3FPROC gl3wVertexAttrib3f;$/;"	v
gl3wVertexAttrib3fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3FVPROC gl3wVertexAttrib3fv;$/;"	v
gl3wVertexAttrib3s	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3SPROC gl3wVertexAttrib3s;$/;"	v
gl3wVertexAttrib3sv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3SVPROC gl3wVertexAttrib3sv;$/;"	v
gl3wVertexAttrib4Nbv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NBVPROC gl3wVertexAttrib4Nbv;$/;"	v
gl3wVertexAttrib4Niv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NIVPROC gl3wVertexAttrib4Niv;$/;"	v
gl3wVertexAttrib4Nsv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NSVPROC gl3wVertexAttrib4Nsv;$/;"	v
gl3wVertexAttrib4Nub	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUBPROC gl3wVertexAttrib4Nub;$/;"	v
gl3wVertexAttrib4Nubv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUBVPROC gl3wVertexAttrib4Nubv;$/;"	v
gl3wVertexAttrib4Nuiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUIVPROC gl3wVertexAttrib4Nuiv;$/;"	v
gl3wVertexAttrib4Nusv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUSVPROC gl3wVertexAttrib4Nusv;$/;"	v
gl3wVertexAttrib4bv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4BVPROC gl3wVertexAttrib4bv;$/;"	v
gl3wVertexAttrib4d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4DPROC gl3wVertexAttrib4d;$/;"	v
gl3wVertexAttrib4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4DVPROC gl3wVertexAttrib4dv;$/;"	v
gl3wVertexAttrib4f	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4FPROC gl3wVertexAttrib4f;$/;"	v
gl3wVertexAttrib4fv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4FVPROC gl3wVertexAttrib4fv;$/;"	v
gl3wVertexAttrib4iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4IVPROC gl3wVertexAttrib4iv;$/;"	v
gl3wVertexAttrib4s	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4SPROC gl3wVertexAttrib4s;$/;"	v
gl3wVertexAttrib4sv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4SVPROC gl3wVertexAttrib4sv;$/;"	v
gl3wVertexAttrib4ubv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4UBVPROC gl3wVertexAttrib4ubv;$/;"	v
gl3wVertexAttrib4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4UIVPROC gl3wVertexAttrib4uiv;$/;"	v
gl3wVertexAttrib4usv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4USVPROC gl3wVertexAttrib4usv;$/;"	v
gl3wVertexAttribBinding	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBBINDINGPROC gl3wVertexAttribBinding;$/;"	v
gl3wVertexAttribDivisor	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBDIVISORPROC gl3wVertexAttribDivisor;$/;"	v
gl3wVertexAttribFormat	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBFORMATPROC gl3wVertexAttribFormat;$/;"	v
gl3wVertexAttribI1i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1IPROC gl3wVertexAttribI1i;$/;"	v
gl3wVertexAttribI1iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1IVPROC gl3wVertexAttribI1iv;$/;"	v
gl3wVertexAttribI1ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1UIPROC gl3wVertexAttribI1ui;$/;"	v
gl3wVertexAttribI1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1UIVPROC gl3wVertexAttribI1uiv;$/;"	v
gl3wVertexAttribI2i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2IPROC gl3wVertexAttribI2i;$/;"	v
gl3wVertexAttribI2iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2IVPROC gl3wVertexAttribI2iv;$/;"	v
gl3wVertexAttribI2ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2UIPROC gl3wVertexAttribI2ui;$/;"	v
gl3wVertexAttribI2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2UIVPROC gl3wVertexAttribI2uiv;$/;"	v
gl3wVertexAttribI3i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3IPROC gl3wVertexAttribI3i;$/;"	v
gl3wVertexAttribI3iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3IVPROC gl3wVertexAttribI3iv;$/;"	v
gl3wVertexAttribI3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3UIPROC gl3wVertexAttribI3ui;$/;"	v
gl3wVertexAttribI3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3UIVPROC gl3wVertexAttribI3uiv;$/;"	v
gl3wVertexAttribI4bv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4BVPROC gl3wVertexAttribI4bv;$/;"	v
gl3wVertexAttribI4i	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4IPROC gl3wVertexAttribI4i;$/;"	v
gl3wVertexAttribI4iv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4IVPROC gl3wVertexAttribI4iv;$/;"	v
gl3wVertexAttribI4sv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4SVPROC gl3wVertexAttribI4sv;$/;"	v
gl3wVertexAttribI4ubv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4UBVPROC gl3wVertexAttribI4ubv;$/;"	v
gl3wVertexAttribI4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4UIPROC gl3wVertexAttribI4ui;$/;"	v
gl3wVertexAttribI4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4UIVPROC gl3wVertexAttribI4uiv;$/;"	v
gl3wVertexAttribI4usv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4USVPROC gl3wVertexAttribI4usv;$/;"	v
gl3wVertexAttribIFormat	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBIFORMATPROC gl3wVertexAttribIFormat;$/;"	v
gl3wVertexAttribIPointer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBIPOINTERPROC gl3wVertexAttribIPointer;$/;"	v
gl3wVertexAttribL1d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL1DPROC gl3wVertexAttribL1d;$/;"	v
gl3wVertexAttribL1dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL1DVPROC gl3wVertexAttribL1dv;$/;"	v
gl3wVertexAttribL2d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL2DPROC gl3wVertexAttribL2d;$/;"	v
gl3wVertexAttribL2dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL2DVPROC gl3wVertexAttribL2dv;$/;"	v
gl3wVertexAttribL3d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL3DPROC gl3wVertexAttribL3d;$/;"	v
gl3wVertexAttribL3dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL3DVPROC gl3wVertexAttribL3dv;$/;"	v
gl3wVertexAttribL4d	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL4DPROC gl3wVertexAttribL4d;$/;"	v
gl3wVertexAttribL4dv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL4DVPROC gl3wVertexAttribL4dv;$/;"	v
gl3wVertexAttribLFormat	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBLFORMATPROC gl3wVertexAttribLFormat;$/;"	v
gl3wVertexAttribLPointer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBLPOINTERPROC gl3wVertexAttribLPointer;$/;"	v
gl3wVertexAttribP1ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP1UIPROC gl3wVertexAttribP1ui;$/;"	v
gl3wVertexAttribP1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP1UIVPROC gl3wVertexAttribP1uiv;$/;"	v
gl3wVertexAttribP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP2UIPROC gl3wVertexAttribP2ui;$/;"	v
gl3wVertexAttribP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP2UIVPROC gl3wVertexAttribP2uiv;$/;"	v
gl3wVertexAttribP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP3UIPROC gl3wVertexAttribP3ui;$/;"	v
gl3wVertexAttribP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP3UIVPROC gl3wVertexAttribP3uiv;$/;"	v
gl3wVertexAttribP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP4UIPROC gl3wVertexAttribP4ui;$/;"	v
gl3wVertexAttribP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP4UIVPROC gl3wVertexAttribP4uiv;$/;"	v
gl3wVertexAttribPointer	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBPOINTERPROC gl3wVertexAttribPointer;$/;"	v
gl3wVertexBindingDivisor	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXBINDINGDIVISORPROC gl3wVertexBindingDivisor;$/;"	v
gl3wVertexP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP2UIPROC gl3wVertexP2ui;$/;"	v
gl3wVertexP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP2UIVPROC gl3wVertexP2uiv;$/;"	v
gl3wVertexP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP3UIPROC gl3wVertexP3ui;$/;"	v
gl3wVertexP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP3UIVPROC gl3wVertexP3uiv;$/;"	v
gl3wVertexP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP4UIPROC gl3wVertexP4ui;$/;"	v
gl3wVertexP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP4UIVPROC gl3wVertexP4uiv;$/;"	v
gl3wViewport	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTPROC gl3wViewport;$/;"	v
gl3wViewportArrayv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTARRAYVPROC gl3wViewportArrayv;$/;"	v
gl3wViewportIndexedf	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTINDEXEDFPROC gl3wViewportIndexedf;$/;"	v
gl3wViewportIndexedfv	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTINDEXEDFVPROC gl3wViewportIndexedfv;$/;"	v
gl3wWaitSync	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^PFNGLWAITSYNCPROC gl3wWaitSync;$/;"	v
glActiveShaderProgram	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glActiveShaderProgram	/;"	d
glActiveTexture	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glActiveTexture	/;"	d
glAttachShader	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glAttachShader	/;"	d
glBeginConditionalRender	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginConditionalRender	/;"	d
glBeginQuery	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginQuery	/;"	d
glBeginQueryIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginQueryIndexed	/;"	d
glBeginTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginTransformFeedback	/;"	d
glBindAttribLocation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindAttribLocation	/;"	d
glBindBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindBuffer	/;"	d
glBindBufferBase	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindBufferBase	/;"	d
glBindBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindBufferRange	/;"	d
glBindFragDataLocation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindFragDataLocation	/;"	d
glBindFragDataLocationIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindFragDataLocationIndexed	/;"	d
glBindFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindFramebuffer	/;"	d
glBindImageTexture	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindImageTexture	/;"	d
glBindProgramPipeline	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindProgramPipeline	/;"	d
glBindRenderbuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindRenderbuffer	/;"	d
glBindSampler	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindSampler	/;"	d
glBindTexture	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindTexture	/;"	d
glBindTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindTransformFeedback	/;"	d
glBindVertexArray	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindVertexArray	/;"	d
glBindVertexBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBindVertexBuffer	/;"	d
glBlendColor	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendColor	/;"	d
glBlendEquation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquation	/;"	d
glBlendEquationSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationSeparate	/;"	d
glBlendEquationSeparatei	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationSeparatei	/;"	d
glBlendEquationSeparateiARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationSeparateiARB	/;"	d
glBlendEquationi	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationi	/;"	d
glBlendEquationiARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationiARB	/;"	d
glBlendFunc	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFunc	/;"	d
glBlendFuncSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFuncSeparate	/;"	d
glBlendFuncSeparatei	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFuncSeparatei	/;"	d
glBlendFuncSeparateiARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFuncSeparateiARB	/;"	d
glBlendFunci	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFunci	/;"	d
glBlendFunciARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFunciARB	/;"	d
glBlitFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBlitFramebuffer	/;"	d
glBufferData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBufferData	/;"	d
glBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glBufferSubData	/;"	d
glCheckFramebufferStatus	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCheckFramebufferStatus	/;"	d
glClampColor	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClampColor	/;"	d
glClear	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClear	/;"	d
glClearBufferData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferData	/;"	d
glClearBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferSubData	/;"	d
glClearBufferfi	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferfi	/;"	d
glClearBufferfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferfv	/;"	d
glClearBufferiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferiv	/;"	d
glClearBufferuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferuiv	/;"	d
glClearColor	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearColor	/;"	d
glClearDepth	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearDepth	/;"	d
glClearDepthf	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearDepthf	/;"	d
glClearNamedBufferDataEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearNamedBufferDataEXT	/;"	d
glClearNamedBufferSubDataEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearNamedBufferSubDataEXT	/;"	d
glClearStencil	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClearStencil	/;"	d
glClientWaitSync	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glClientWaitSync	/;"	d
glColorMask	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glColorMask	/;"	d
glColorMaski	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glColorMaski	/;"	d
glColorP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP3ui	/;"	d
glColorP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP3uiv	/;"	d
glColorP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP4ui	/;"	d
glColorP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP4uiv	/;"	d
glCompileShader	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompileShader	/;"	d
glCompileShaderIncludeARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompileShaderIncludeARB	/;"	d
glCompressedTexImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexImage1D	/;"	d
glCompressedTexImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexImage2D	/;"	d
glCompressedTexImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexImage3D	/;"	d
glCompressedTexSubImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexSubImage1D	/;"	d
glCompressedTexSubImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexSubImage2D	/;"	d
glCompressedTexSubImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexSubImage3D	/;"	d
glCopyBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyBufferSubData	/;"	d
glCopyImageSubData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyImageSubData	/;"	d
glCopyTexImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexImage1D	/;"	d
glCopyTexImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexImage2D	/;"	d
glCopyTexSubImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexSubImage1D	/;"	d
glCopyTexSubImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexSubImage2D	/;"	d
glCopyTexSubImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexSubImage3D	/;"	d
glCreateProgram	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateProgram	/;"	d
glCreateShader	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateShader	/;"	d
glCreateShaderProgramv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateShaderProgramv	/;"	d
glCreateSyncFromCLeventARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateSyncFromCLeventARB	/;"	d
glCullFace	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glCullFace	/;"	d
glDebugMessageCallback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageCallback	/;"	d
glDebugMessageCallbackARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageCallbackARB	/;"	d
glDebugMessageControl	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageControl	/;"	d
glDebugMessageControlARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageControlARB	/;"	d
glDebugMessageInsert	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageInsert	/;"	d
glDebugMessageInsertARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageInsertARB	/;"	d
glDeleteBuffers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteBuffers	/;"	d
glDeleteFramebuffers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteFramebuffers	/;"	d
glDeleteNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteNamedStringARB	/;"	d
glDeleteProgram	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteProgram	/;"	d
glDeleteProgramPipelines	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteProgramPipelines	/;"	d
glDeleteQueries	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteQueries	/;"	d
glDeleteRenderbuffers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteRenderbuffers	/;"	d
glDeleteSamplers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteSamplers	/;"	d
glDeleteShader	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteShader	/;"	d
glDeleteSync	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteSync	/;"	d
glDeleteTextures	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteTextures	/;"	d
glDeleteTransformFeedbacks	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteTransformFeedbacks	/;"	d
glDeleteVertexArrays	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteVertexArrays	/;"	d
glDepthFunc	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthFunc	/;"	d
glDepthMask	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthMask	/;"	d
glDepthRange	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRange	/;"	d
glDepthRangeArrayv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRangeArrayv	/;"	d
glDepthRangeIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRangeIndexed	/;"	d
glDepthRangef	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRangef	/;"	d
glDetachShader	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDetachShader	/;"	d
glDisable	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDisable	/;"	d
glDisableVertexAttribArray	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDisableVertexAttribArray	/;"	d
glDisablei	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDisablei	/;"	d
glDispatchCompute	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDispatchCompute	/;"	d
glDispatchComputeIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDispatchComputeIndirect	/;"	d
glDrawArrays	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArrays	/;"	d
glDrawArraysIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArraysIndirect	/;"	d
glDrawArraysInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArraysInstanced	/;"	d
glDrawArraysInstancedBaseInstance	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArraysInstancedBaseInstance	/;"	d
glDrawBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawBuffer	/;"	d
glDrawBuffers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawBuffers	/;"	d
glDrawElements	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElements	/;"	d
glDrawElementsBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsBaseVertex	/;"	d
glDrawElementsIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsIndirect	/;"	d
glDrawElementsInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstanced	/;"	d
glDrawElementsInstancedBaseInstance	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstancedBaseInstance	/;"	d
glDrawElementsInstancedBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstancedBaseVertex	/;"	d
glDrawElementsInstancedBaseVertexBaseInstance	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstancedBaseVertexBaseInstance	/;"	d
glDrawRangeElements	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawRangeElements	/;"	d
glDrawRangeElementsBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawRangeElementsBaseVertex	/;"	d
glDrawTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedback	/;"	d
glDrawTransformFeedbackInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedbackInstanced	/;"	d
glDrawTransformFeedbackStream	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedbackStream	/;"	d
glDrawTransformFeedbackStreamInstanced	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedbackStreamInstanced	/;"	d
glEnable	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glEnable	/;"	d
glEnableVertexAttribArray	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glEnableVertexAttribArray	/;"	d
glEnablei	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glEnablei	/;"	d
glEndConditionalRender	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glEndConditionalRender	/;"	d
glEndQuery	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glEndQuery	/;"	d
glEndQueryIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glEndQueryIndexed	/;"	d
glEndTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glEndTransformFeedback	/;"	d
glFenceSync	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFenceSync	/;"	d
glFinish	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFinish	/;"	d
glFlush	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFlush	/;"	d
glFlushMappedBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFlushMappedBufferRange	/;"	d
glFramebufferParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferParameteri	/;"	d
glFramebufferRenderbuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferRenderbuffer	/;"	d
glFramebufferTexture	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture	/;"	d
glFramebufferTexture1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture1D	/;"	d
glFramebufferTexture2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture2D	/;"	d
glFramebufferTexture3D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture3D	/;"	d
glFramebufferTextureLayer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTextureLayer	/;"	d
glFrontFace	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glFrontFace	/;"	d
glGenBuffers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenBuffers	/;"	d
glGenFramebuffers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenFramebuffers	/;"	d
glGenProgramPipelines	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenProgramPipelines	/;"	d
glGenQueries	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenQueries	/;"	d
glGenRenderbuffers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenRenderbuffers	/;"	d
glGenSamplers	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenSamplers	/;"	d
glGenTextures	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenTextures	/;"	d
glGenTransformFeedbacks	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenTransformFeedbacks	/;"	d
glGenVertexArrays	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenVertexArrays	/;"	d
glGenerateMipmap	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGenerateMipmap	/;"	d
glGetActiveAtomicCounterBufferiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveAtomicCounterBufferiv	/;"	d
glGetActiveAttrib	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveAttrib	/;"	d
glGetActiveSubroutineName	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveSubroutineName	/;"	d
glGetActiveSubroutineUniformName	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveSubroutineUniformName	/;"	d
glGetActiveSubroutineUniformiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveSubroutineUniformiv	/;"	d
glGetActiveUniform	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniform	/;"	d
glGetActiveUniformBlockName	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformBlockName	/;"	d
glGetActiveUniformBlockiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformBlockiv	/;"	d
glGetActiveUniformName	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformName	/;"	d
glGetActiveUniformsiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformsiv	/;"	d
glGetAttachedShaders	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetAttachedShaders	/;"	d
glGetAttribLocation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetAttribLocation	/;"	d
glGetBooleani_v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBooleani_v	/;"	d
glGetBooleanv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBooleanv	/;"	d
glGetBufferParameteri64v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferParameteri64v	/;"	d
glGetBufferParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferParameteriv	/;"	d
glGetBufferPointerv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferPointerv	/;"	d
glGetBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferSubData	/;"	d
glGetCompressedTexImage	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetCompressedTexImage	/;"	d
glGetDebugMessageLog	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDebugMessageLog	/;"	d
glGetDebugMessageLogARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDebugMessageLogARB	/;"	d
glGetDoublei_v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDoublei_v	/;"	d
glGetDoublev	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDoublev	/;"	d
glGetError	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetError	/;"	d
glGetFloati_v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFloati_v	/;"	d
glGetFloatv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFloatv	/;"	d
glGetFragDataIndex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFragDataIndex	/;"	d
glGetFragDataLocation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFragDataLocation	/;"	d
glGetFramebufferAttachmentParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFramebufferAttachmentParameteriv	/;"	d
glGetFramebufferParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFramebufferParameteriv	/;"	d
glGetGraphicsResetStatusARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetGraphicsResetStatusARB	/;"	d
glGetInteger64i_v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInteger64i_v	/;"	d
glGetInteger64v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInteger64v	/;"	d
glGetIntegeri_v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetIntegeri_v	/;"	d
glGetIntegerv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetIntegerv	/;"	d
glGetInternalformati64v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInternalformati64v	/;"	d
glGetInternalformativ	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInternalformativ	/;"	d
glGetMultisamplefv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetMultisamplefv	/;"	d
glGetNamedFramebufferParameterivEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetNamedFramebufferParameterivEXT	/;"	d
glGetNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetNamedStringARB	/;"	d
glGetNamedStringivARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetNamedStringivARB	/;"	d
glGetObjectLabel	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetObjectLabel	/;"	d
glGetObjectPtrLabel	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetObjectPtrLabel	/;"	d
glGetPointerv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetPointerv	/;"	d
glGetProgramBinary	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramBinary	/;"	d
glGetProgramInfoLog	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramInfoLog	/;"	d
glGetProgramInterfaceiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramInterfaceiv	/;"	d
glGetProgramPipelineInfoLog	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramPipelineInfoLog	/;"	d
glGetProgramPipelineiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramPipelineiv	/;"	d
glGetProgramResourceIndex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceIndex	/;"	d
glGetProgramResourceLocation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceLocation	/;"	d
glGetProgramResourceLocationIndex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceLocationIndex	/;"	d
glGetProgramResourceName	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceName	/;"	d
glGetProgramResourceiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceiv	/;"	d
glGetProgramStageiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramStageiv	/;"	d
glGetProgramiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramiv	/;"	d
glGetQueryIndexediv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryIndexediv	/;"	d
glGetQueryObjecti64v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjecti64v	/;"	d
glGetQueryObjectiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjectiv	/;"	d
glGetQueryObjectui64v	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjectui64v	/;"	d
glGetQueryObjectuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjectuiv	/;"	d
glGetQueryiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryiv	/;"	d
glGetRenderbufferParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetRenderbufferParameteriv	/;"	d
glGetSamplerParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameterIiv	/;"	d
glGetSamplerParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameterIuiv	/;"	d
glGetSamplerParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameterfv	/;"	d
glGetSamplerParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameteriv	/;"	d
glGetShaderInfoLog	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderInfoLog	/;"	d
glGetShaderPrecisionFormat	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderPrecisionFormat	/;"	d
glGetShaderSource	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderSource	/;"	d
glGetShaderiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderiv	/;"	d
glGetString	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetString	/;"	d
glGetStringi	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetStringi	/;"	d
glGetSubroutineIndex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSubroutineIndex	/;"	d
glGetSubroutineUniformLocation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSubroutineUniformLocation	/;"	d
glGetSynciv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSynciv	/;"	d
glGetTexImage	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexImage	/;"	d
glGetTexLevelParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexLevelParameterfv	/;"	d
glGetTexLevelParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexLevelParameteriv	/;"	d
glGetTexParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameterIiv	/;"	d
glGetTexParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameterIuiv	/;"	d
glGetTexParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameterfv	/;"	d
glGetTexParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameteriv	/;"	d
glGetTransformFeedbackVarying	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTransformFeedbackVarying	/;"	d
glGetUniformBlockIndex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformBlockIndex	/;"	d
glGetUniformIndices	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformIndices	/;"	d
glGetUniformLocation	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformLocation	/;"	d
glGetUniformSubroutineuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformSubroutineuiv	/;"	d
glGetUniformdv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformdv	/;"	d
glGetUniformfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformfv	/;"	d
glGetUniformiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformiv	/;"	d
glGetUniformuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformuiv	/;"	d
glGetVertexAttribIiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribIiv	/;"	d
glGetVertexAttribIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribIuiv	/;"	d
glGetVertexAttribLdv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribLdv	/;"	d
glGetVertexAttribPointerv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribPointerv	/;"	d
glGetVertexAttribdv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribdv	/;"	d
glGetVertexAttribfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribfv	/;"	d
glGetVertexAttribiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribiv	/;"	d
glGetnCompressedTexImageARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnCompressedTexImageARB	/;"	d
glGetnTexImageARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnTexImageARB	/;"	d
glGetnUniformdvARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformdvARB	/;"	d
glGetnUniformfvARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformfvARB	/;"	d
glGetnUniformivARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformivARB	/;"	d
glGetnUniformuivARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformuivARB	/;"	d
glHint	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glHint	/;"	d
glInvalidateBufferData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateBufferData	/;"	d
glInvalidateBufferSubData	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateBufferSubData	/;"	d
glInvalidateFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateFramebuffer	/;"	d
glInvalidateSubFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateSubFramebuffer	/;"	d
glInvalidateTexImage	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateTexImage	/;"	d
glInvalidateTexSubImage	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateTexSubImage	/;"	d
glIsBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsBuffer	/;"	d
glIsEnabled	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsEnabled	/;"	d
glIsEnabledi	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsEnabledi	/;"	d
glIsFramebuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsFramebuffer	/;"	d
glIsNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsNamedStringARB	/;"	d
glIsProgram	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsProgram	/;"	d
glIsProgramPipeline	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsProgramPipeline	/;"	d
glIsQuery	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsQuery	/;"	d
glIsRenderbuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsRenderbuffer	/;"	d
glIsSampler	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsSampler	/;"	d
glIsShader	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsShader	/;"	d
glIsSync	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsSync	/;"	d
glIsTexture	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsTexture	/;"	d
glIsTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsTransformFeedback	/;"	d
glIsVertexArray	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glIsVertexArray	/;"	d
glLineWidth	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glLineWidth	/;"	d
glLinkProgram	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glLinkProgram	/;"	d
glLogicOp	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glLogicOp	/;"	d
glMapBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMapBuffer	/;"	d
glMapBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMapBufferRange	/;"	d
glMemoryBarrier	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMemoryBarrier	/;"	d
glMinSampleShading	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMinSampleShading	/;"	d
glMinSampleShadingARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMinSampleShadingARB	/;"	d
glMultiDrawArrays	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawArrays	/;"	d
glMultiDrawArraysIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawArraysIndirect	/;"	d
glMultiDrawElements	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawElements	/;"	d
glMultiDrawElementsBaseVertex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawElementsBaseVertex	/;"	d
glMultiDrawElementsIndirect	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawElementsIndirect	/;"	d
glMultiTexCoordP1ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP1ui	/;"	d
glMultiTexCoordP1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP1uiv	/;"	d
glMultiTexCoordP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP2ui	/;"	d
glMultiTexCoordP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP2uiv	/;"	d
glMultiTexCoordP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP3ui	/;"	d
glMultiTexCoordP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP3uiv	/;"	d
glMultiTexCoordP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP4ui	/;"	d
glMultiTexCoordP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP4uiv	/;"	d
glNamedFramebufferParameteriEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glNamedFramebufferParameteriEXT	/;"	d
glNamedStringARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glNamedStringARB	/;"	d
glNormalP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glNormalP3ui	/;"	d
glNormalP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glNormalP3uiv	/;"	d
glObjectLabel	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glObjectLabel	/;"	d
glObjectPtrLabel	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glObjectPtrLabel	/;"	d
glPatchParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPatchParameterfv	/;"	d
glPatchParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPatchParameteri	/;"	d
glPauseTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPauseTransformFeedback	/;"	d
glPixelStoref	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPixelStoref	/;"	d
glPixelStorei	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPixelStorei	/;"	d
glPointParameterf	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameterf	/;"	d
glPointParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameterfv	/;"	d
glPointParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameteri	/;"	d
glPointParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameteriv	/;"	d
glPointSize	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPointSize	/;"	d
glPolygonMode	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPolygonMode	/;"	d
glPolygonOffset	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPolygonOffset	/;"	d
glPopDebugGroup	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPopDebugGroup	/;"	d
glPrimitiveRestartIndex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPrimitiveRestartIndex	/;"	d
glProgramBinary	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramBinary	/;"	d
glProgramParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramParameteri	/;"	d
glProgramUniform1d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1d	/;"	d
glProgramUniform1dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1dv	/;"	d
glProgramUniform1f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1f	/;"	d
glProgramUniform1fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1fv	/;"	d
glProgramUniform1i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1i	/;"	d
glProgramUniform1iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1iv	/;"	d
glProgramUniform1ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1ui	/;"	d
glProgramUniform1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1uiv	/;"	d
glProgramUniform2d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2d	/;"	d
glProgramUniform2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2dv	/;"	d
glProgramUniform2f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2f	/;"	d
glProgramUniform2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2fv	/;"	d
glProgramUniform2i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2i	/;"	d
glProgramUniform2iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2iv	/;"	d
glProgramUniform2ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2ui	/;"	d
glProgramUniform2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2uiv	/;"	d
glProgramUniform3d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3d	/;"	d
glProgramUniform3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3dv	/;"	d
glProgramUniform3f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3f	/;"	d
glProgramUniform3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3fv	/;"	d
glProgramUniform3i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3i	/;"	d
glProgramUniform3iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3iv	/;"	d
glProgramUniform3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3ui	/;"	d
glProgramUniform3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3uiv	/;"	d
glProgramUniform4d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4d	/;"	d
glProgramUniform4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4dv	/;"	d
glProgramUniform4f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4f	/;"	d
glProgramUniform4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4fv	/;"	d
glProgramUniform4i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4i	/;"	d
glProgramUniform4iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4iv	/;"	d
glProgramUniform4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4ui	/;"	d
glProgramUniform4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4uiv	/;"	d
glProgramUniformMatrix2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2dv	/;"	d
glProgramUniformMatrix2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2fv	/;"	d
glProgramUniformMatrix2x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x3dv	/;"	d
glProgramUniformMatrix2x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x3fv	/;"	d
glProgramUniformMatrix2x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x4dv	/;"	d
glProgramUniformMatrix2x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x4fv	/;"	d
glProgramUniformMatrix3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3dv	/;"	d
glProgramUniformMatrix3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3fv	/;"	d
glProgramUniformMatrix3x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x2dv	/;"	d
glProgramUniformMatrix3x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x2fv	/;"	d
glProgramUniformMatrix3x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x4dv	/;"	d
glProgramUniformMatrix3x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x4fv	/;"	d
glProgramUniformMatrix4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4dv	/;"	d
glProgramUniformMatrix4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4fv	/;"	d
glProgramUniformMatrix4x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x2dv	/;"	d
glProgramUniformMatrix4x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x2fv	/;"	d
glProgramUniformMatrix4x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x3dv	/;"	d
glProgramUniformMatrix4x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x3fv	/;"	d
glProvokingVertex	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glProvokingVertex	/;"	d
glPushDebugGroup	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glPushDebugGroup	/;"	d
glQueryCounter	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glQueryCounter	/;"	d
glReadBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glReadBuffer	/;"	d
glReadPixels	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glReadPixels	/;"	d
glReadnPixelsARB	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glReadnPixelsARB	/;"	d
glReleaseShaderCompiler	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glReleaseShaderCompiler	/;"	d
glRenderbufferStorage	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glRenderbufferStorage	/;"	d
glRenderbufferStorageMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glRenderbufferStorageMultisample	/;"	d
glResumeTransformFeedback	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glResumeTransformFeedback	/;"	d
glSampleCoverage	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSampleCoverage	/;"	d
glSampleMaski	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSampleMaski	/;"	d
glSamplerParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterIiv	/;"	d
glSamplerParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterIuiv	/;"	d
glSamplerParameterf	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterf	/;"	d
glSamplerParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterfv	/;"	d
glSamplerParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameteri	/;"	d
glSamplerParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameteriv	/;"	d
glScissor	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glScissor	/;"	d
glScissorArrayv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glScissorArrayv	/;"	d
glScissorIndexed	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glScissorIndexed	/;"	d
glScissorIndexedv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glScissorIndexedv	/;"	d
glSecondaryColorP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSecondaryColorP3ui	/;"	d
glSecondaryColorP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glSecondaryColorP3uiv	/;"	d
glShaderBinary	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glShaderBinary	/;"	d
glShaderSource	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glShaderSource	/;"	d
glShaderStorageBlockBinding	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glShaderStorageBlockBinding	/;"	d
glStencilFunc	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilFunc	/;"	d
glStencilFuncSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilFuncSeparate	/;"	d
glStencilMask	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilMask	/;"	d
glStencilMaskSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilMaskSeparate	/;"	d
glStencilOp	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilOp	/;"	d
glStencilOpSeparate	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilOpSeparate	/;"	d
glTexBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexBuffer	/;"	d
glTexBufferRange	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexBufferRange	/;"	d
glTexCoordP1ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP1ui	/;"	d
glTexCoordP1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP1uiv	/;"	d
glTexCoordP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP2ui	/;"	d
glTexCoordP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP2uiv	/;"	d
glTexCoordP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP3ui	/;"	d
glTexCoordP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP3uiv	/;"	d
glTexCoordP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP4ui	/;"	d
glTexCoordP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP4uiv	/;"	d
glTexImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage1D	/;"	d
glTexImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage2D	/;"	d
glTexImage2DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage2DMultisample	/;"	d
glTexImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage3D	/;"	d
glTexImage3DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage3DMultisample	/;"	d
glTexParameterIiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterIiv	/;"	d
glTexParameterIuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterIuiv	/;"	d
glTexParameterf	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterf	/;"	d
glTexParameterfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterfv	/;"	d
glTexParameteri	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameteri	/;"	d
glTexParameteriv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameteriv	/;"	d
glTexStorage1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage1D	/;"	d
glTexStorage2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage2D	/;"	d
glTexStorage2DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage2DMultisample	/;"	d
glTexStorage3D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage3D	/;"	d
glTexStorage3DMultisample	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage3DMultisample	/;"	d
glTexSubImage1D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexSubImage1D	/;"	d
glTexSubImage2D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexSubImage2D	/;"	d
glTexSubImage3D	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTexSubImage3D	/;"	d
glTextureBufferRangeEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureBufferRangeEXT	/;"	d
glTextureStorage1DEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage1DEXT	/;"	d
glTextureStorage2DEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage2DEXT	/;"	d
glTextureStorage2DMultisampleEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage2DMultisampleEXT	/;"	d
glTextureStorage3DEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage3DEXT	/;"	d
glTextureStorage3DMultisampleEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage3DMultisampleEXT	/;"	d
glTextureView	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureView	/;"	d
glTransformFeedbackVaryings	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glTransformFeedbackVaryings	/;"	d
glUniform1d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1d	/;"	d
glUniform1dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1dv	/;"	d
glUniform1f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1f	/;"	d
glUniform1fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1fv	/;"	d
glUniform1i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1i	/;"	d
glUniform1iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1iv	/;"	d
glUniform1ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1ui	/;"	d
glUniform1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1uiv	/;"	d
glUniform2d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2d	/;"	d
glUniform2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2dv	/;"	d
glUniform2f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2f	/;"	d
glUniform2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2fv	/;"	d
glUniform2i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2i	/;"	d
glUniform2iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2iv	/;"	d
glUniform2ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2ui	/;"	d
glUniform2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2uiv	/;"	d
glUniform3d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3d	/;"	d
glUniform3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3dv	/;"	d
glUniform3f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3f	/;"	d
glUniform3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3fv	/;"	d
glUniform3i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3i	/;"	d
glUniform3iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3iv	/;"	d
glUniform3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3ui	/;"	d
glUniform3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3uiv	/;"	d
glUniform4d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4d	/;"	d
glUniform4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4dv	/;"	d
glUniform4f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4f	/;"	d
glUniform4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4fv	/;"	d
glUniform4i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4i	/;"	d
glUniform4iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4iv	/;"	d
glUniform4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4ui	/;"	d
glUniform4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4uiv	/;"	d
glUniformBlockBinding	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformBlockBinding	/;"	d
glUniformMatrix2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2dv	/;"	d
glUniformMatrix2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2fv	/;"	d
glUniformMatrix2x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x3dv	/;"	d
glUniformMatrix2x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x3fv	/;"	d
glUniformMatrix2x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x4dv	/;"	d
glUniformMatrix2x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x4fv	/;"	d
glUniformMatrix3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3dv	/;"	d
glUniformMatrix3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3fv	/;"	d
glUniformMatrix3x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x2dv	/;"	d
glUniformMatrix3x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x2fv	/;"	d
glUniformMatrix3x4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x4dv	/;"	d
glUniformMatrix3x4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x4fv	/;"	d
glUniformMatrix4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4dv	/;"	d
glUniformMatrix4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4fv	/;"	d
glUniformMatrix4x2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x2dv	/;"	d
glUniformMatrix4x2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x2fv	/;"	d
glUniformMatrix4x3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x3dv	/;"	d
glUniformMatrix4x3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x3fv	/;"	d
glUniformSubroutinesuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformSubroutinesuiv	/;"	d
glUnmapBuffer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUnmapBuffer	/;"	d
glUseProgram	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUseProgram	/;"	d
glUseProgramStages	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glUseProgramStages	/;"	d
glValidateProgram	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glValidateProgram	/;"	d
glValidateProgramPipeline	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glValidateProgramPipeline	/;"	d
glVertexArrayBindVertexBufferEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayBindVertexBufferEXT	/;"	d
glVertexArrayVertexAttribBindingEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribBindingEXT	/;"	d
glVertexArrayVertexAttribFormatEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribFormatEXT	/;"	d
glVertexArrayVertexAttribIFormatEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribIFormatEXT	/;"	d
glVertexArrayVertexAttribLFormatEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribLFormatEXT	/;"	d
glVertexArrayVertexBindingDivisorEXT	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexBindingDivisorEXT	/;"	d
glVertexAttrib1d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1d	/;"	d
glVertexAttrib1dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1dv	/;"	d
glVertexAttrib1f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1f	/;"	d
glVertexAttrib1fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1fv	/;"	d
glVertexAttrib1s	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1s	/;"	d
glVertexAttrib1sv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1sv	/;"	d
glVertexAttrib2d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2d	/;"	d
glVertexAttrib2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2dv	/;"	d
glVertexAttrib2f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2f	/;"	d
glVertexAttrib2fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2fv	/;"	d
glVertexAttrib2s	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2s	/;"	d
glVertexAttrib2sv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2sv	/;"	d
glVertexAttrib3d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3d	/;"	d
glVertexAttrib3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3dv	/;"	d
glVertexAttrib3f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3f	/;"	d
glVertexAttrib3fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3fv	/;"	d
glVertexAttrib3s	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3s	/;"	d
glVertexAttrib3sv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3sv	/;"	d
glVertexAttrib4Nbv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nbv	/;"	d
glVertexAttrib4Niv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Niv	/;"	d
glVertexAttrib4Nsv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nsv	/;"	d
glVertexAttrib4Nub	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nub	/;"	d
glVertexAttrib4Nubv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nubv	/;"	d
glVertexAttrib4Nuiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nuiv	/;"	d
glVertexAttrib4Nusv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nusv	/;"	d
glVertexAttrib4bv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4bv	/;"	d
glVertexAttrib4d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4d	/;"	d
glVertexAttrib4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4dv	/;"	d
glVertexAttrib4f	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4f	/;"	d
glVertexAttrib4fv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4fv	/;"	d
glVertexAttrib4iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4iv	/;"	d
glVertexAttrib4s	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4s	/;"	d
glVertexAttrib4sv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4sv	/;"	d
glVertexAttrib4ubv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4ubv	/;"	d
glVertexAttrib4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4uiv	/;"	d
glVertexAttrib4usv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4usv	/;"	d
glVertexAttribBinding	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribBinding	/;"	d
glVertexAttribDivisor	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribDivisor	/;"	d
glVertexAttribFormat	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribFormat	/;"	d
glVertexAttribI1i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1i	/;"	d
glVertexAttribI1iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1iv	/;"	d
glVertexAttribI1ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1ui	/;"	d
glVertexAttribI1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1uiv	/;"	d
glVertexAttribI2i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2i	/;"	d
glVertexAttribI2iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2iv	/;"	d
glVertexAttribI2ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2ui	/;"	d
glVertexAttribI2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2uiv	/;"	d
glVertexAttribI3i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3i	/;"	d
glVertexAttribI3iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3iv	/;"	d
glVertexAttribI3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3ui	/;"	d
glVertexAttribI3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3uiv	/;"	d
glVertexAttribI4bv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4bv	/;"	d
glVertexAttribI4i	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4i	/;"	d
glVertexAttribI4iv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4iv	/;"	d
glVertexAttribI4sv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4sv	/;"	d
glVertexAttribI4ubv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4ubv	/;"	d
glVertexAttribI4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4ui	/;"	d
glVertexAttribI4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4uiv	/;"	d
glVertexAttribI4usv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4usv	/;"	d
glVertexAttribIFormat	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribIFormat	/;"	d
glVertexAttribIPointer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribIPointer	/;"	d
glVertexAttribL1d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL1d	/;"	d
glVertexAttribL1dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL1dv	/;"	d
glVertexAttribL2d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL2d	/;"	d
glVertexAttribL2dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL2dv	/;"	d
glVertexAttribL3d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL3d	/;"	d
glVertexAttribL3dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL3dv	/;"	d
glVertexAttribL4d	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL4d	/;"	d
glVertexAttribL4dv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL4dv	/;"	d
glVertexAttribLFormat	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribLFormat	/;"	d
glVertexAttribLPointer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribLPointer	/;"	d
glVertexAttribP1ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP1ui	/;"	d
glVertexAttribP1uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP1uiv	/;"	d
glVertexAttribP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP2ui	/;"	d
glVertexAttribP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP2uiv	/;"	d
glVertexAttribP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP3ui	/;"	d
glVertexAttribP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP3uiv	/;"	d
glVertexAttribP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP4ui	/;"	d
glVertexAttribP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP4uiv	/;"	d
glVertexAttribPointer	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribPointer	/;"	d
glVertexBindingDivisor	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexBindingDivisor	/;"	d
glVertexP2ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP2ui	/;"	d
glVertexP2uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP2uiv	/;"	d
glVertexP3ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP3ui	/;"	d
glVertexP3uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP3uiv	/;"	d
glVertexP4ui	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP4ui	/;"	d
glVertexP4uiv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP4uiv	/;"	d
glViewport	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glViewport	/;"	d
glViewportArrayv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glViewportArrayv	/;"	d
glViewportIndexedf	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glViewportIndexedf	/;"	d
glViewportIndexedfv	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glViewportIndexedfv	/;"	d
glWaitSync	imgui-master/examples/libs/gl3w/GL/gl3w.h	/^#define glWaitSync	/;"	d
glfw_error_callback	imgui-master/examples/example_glfw_opengl2/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	file:
glfw_error_callback	imgui-master/examples/example_glfw_opengl3/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	file:
glfw_error_callback	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	file:
glfw_resize_callback	imgui-master/examples/example_glfw_vulkan/main.cpp	/^static void glfw_resize_callback(GLFWwindow*, int w, int h)$/;"	f	file:
glut_display_func	imgui-master/examples/example_freeglut_opengl2/main.cpp	/^void glut_display_func()$/;"	f
glyf	imgui-master/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
gpos	imgui-master/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
green	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* green;$/;"	m	struct:GLFWgammaramp
greenBits	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int greenBits;$/;"	m	struct:GLFWvidmode
gsubrs	imgui-master/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo
h	imgui-master/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect
h	imgui-master/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
h	imgui-master/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon15
h_oversample	imgui-master/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon12
h_oversample	imgui-master/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
has_preferred_x	imgui-master/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anon5
head	imgui-master/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
head	imgui-master/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap::stbtt__hheap_chunk
height	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWimage
height	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWvidmode
height	imgui-master/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context
height	imgui-master/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anon7
height	imgui-master/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context
height	imgui-master/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon24
heuristic	imgui-master/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context
hhea	imgui-master/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hmtx	imgui-master/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
id	imgui-master/examples/libs/glfw/include/GLFW/glfw3native.h	/^  typedef void* id;$/;"	t
id	imgui-master/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect
id	imgui-master/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
ignored	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	m	struct:__anon26
indexToLocFormat	imgui-master/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo
index_from_pointer	imgui-master/imgui.h	/^    inline int          index_from_pointer(const_iterator it) const     { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; return (int)off; }$/;"	f	class:ImVector
index_map	imgui-master/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo
init_mode	imgui-master/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context
initialized	imgui-master/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anon5
insert	imgui-master/imgui.h	/^    inline iterator     insert(const_iterator it, const value_type& v)  { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(value_type)); memcpy(&Data[off], &v, sizeof(v)); Size++; return Data + off; }$/;"	f	class:ImVector
insert_length	imgui-master/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anon3
insert_mode	imgui-master/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anon5
int32_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef __int32 int32_t;$/;"	t
int32_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef long int int32_t;$/;"	t
int64_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef __int64 int64_t;$/;"	t
int64_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef long int int64_t;$/;"	t
int64_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef long long int int64_t;$/;"	t
invert	imgui-master/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge
is_separator	imgui-master/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)                                        { return ImCharIsBlankW(c) || c==',' || c==';' || c=='(' || c==')' || c=='{' || c=='}' || c=='[' || c==']' || c=='|'; }$/;"	f	namespace:ImGuiStb
is_word_boundary	imgui-master/imstb_textedit.h	/^static int is_word_boundary( STB_TEXTEDIT_STRING *str, int idx )$/;"	f
is_word_boundary_from_left	imgui-master/imgui_widgets.cpp	/^static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator( obj->TextW[idx-1] ) && is_separator( obj->TextW[idx] ) ) : 1; }$/;"	f	namespace:ImGuiStb
is_word_boundary_from_right	imgui-master/imgui_widgets.cpp	/^static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator( obj->TextW[idx-1] ) && !is_separator( obj->TextW[idx] ) ) : 1; }$/;"	f	namespace:ImGuiStb
iterator	imgui-master/imgui.h	/^    typedef value_type*         iterator;$/;"	t	class:ImVector
kern	imgui-master/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
key	imgui-master/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::Pair
length	imgui-master/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon7
libgl	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^static HMODULE libgl;$/;"	v	file:
libgl	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^static void *libgl;$/;"	v	file:
load_procs	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^static void load_procs(void)$/;"	f	file:
loca	imgui-master/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
m_clientHeight	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientHeight;									\/* Height of screen *\/$/;"	m	struct:__anon27
m_clientName	imgui-master/examples/libs/usynergy/uSynergy.h	/^	const char*						m_clientName;									\/* Name of Synergy Screen \/ Client *\/$/;"	m	struct:__anon27
m_clientWidth	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientWidth;									\/* Width of screen *\/$/;"	m	struct:__anon27
m_clipboardCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyClipboardCallback		m_clipboardCallback;							\/* Callback for clipboard events *\/$/;"	m	struct:__anon27
m_connectFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyConnectFunc				m_connectFunc;									\/* Connect function *\/$/;"	m	struct:__anon27
m_connected	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_connected;									\/* Is our socket connected? *\/$/;"	m	struct:__anon27
m_cookie	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyCookie					m_cookie;										\/* Cookie pointer passed to callback functions (can be NULL) *\/$/;"	m	struct:__anon27
m_getTimeFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyGetTimeFunc				m_getTimeFunc;									\/* Get current time function *\/$/;"	m	struct:__anon27
m_hasReceivedHello	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_hasReceivedHello;								\/* Have we received a 'Hello' from the server? *\/$/;"	m	struct:__anon27
m_isCaptured	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_isCaptured;									\/* Is Synergy active (i.e. this client is receiving input messages?) *\/$/;"	m	struct:__anon27
m_joystickButtons	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_joystickButtons[USYNERGY_NUM_JOYSTICKS];		\/* Joystick button state *\/$/;"	m	struct:__anon27
m_joystickCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyJoystickCallback		m_joystickCallback;								\/* Callback for joystick events *\/$/;"	m	struct:__anon27
m_joystickSticks	imgui-master/examples/libs/usynergy/uSynergy.h	/^	int8_t							m_joystickSticks[USYNERGY_NUM_JOYSTICKS][4];	\/* Joystick stick position in 2 axes for 2 sticks *\/$/;"	m	struct:__anon27
m_keyboardCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyKeyboardCallback		m_keyboardCallback;								\/* Callback for keyboard events *\/$/;"	m	struct:__anon27
m_lastMessageTime	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_lastMessageTime;								\/* Time at which last message was received *\/$/;"	m	struct:__anon27
m_mouseButtonLeft	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonLeft;								\/* Mouse left button *\/$/;"	m	struct:__anon27
m_mouseButtonMiddle	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonMiddle;							\/* Mouse middle button *\/$/;"	m	struct:__anon27
m_mouseButtonRight	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonRight;								\/* Mouse right button *\/$/;"	m	struct:__anon27
m_mouseCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyMouseCallback			m_mouseCallback;								\/* Callback for mouse events *\/$/;"	m	struct:__anon27
m_mouseWheelX	imgui-master/examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelX;									\/* Mouse wheel X position *\/$/;"	m	struct:__anon27
m_mouseWheelY	imgui-master/examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelY;									\/* Mouse wheel Y position *\/$/;"	m	struct:__anon27
m_mouseX	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseX;										\/* Mouse X position *\/$/;"	m	struct:__anon27
m_mouseY	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseY;										\/* Mouse Y position *\/$/;"	m	struct:__anon27
m_receiveBuffer	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_receiveBuffer[USYNERGY_RECEIVE_BUFFER_SIZE];	\/* Receive buffer *\/$/;"	m	struct:__anon27
m_receiveFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyReceiveFunc				m_receiveFunc;									\/* Receive data function *\/$/;"	m	struct:__anon27
m_receiveOfs	imgui-master/examples/libs/usynergy/uSynergy.h	/^	int								m_receiveOfs;									\/* Receive buffer offset *\/$/;"	m	struct:__anon27
m_replyBuffer	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_replyBuffer[USYNERGY_REPLY_BUFFER_SIZE];		\/* Reply buffer *\/$/;"	m	struct:__anon27
m_replyCur	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint8_t*						m_replyCur;										\/* Write offset into reply buffer *\/$/;"	m	struct:__anon27
m_screenActiveCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyScreenActiveCallback	m_screenActiveCallback;							\/* Callback for entering and leaving screen *\/$/;"	m	struct:__anon27
m_sendFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergySendFunc				m_sendFunc;										\/* Send data function *\/$/;"	m	struct:__anon27
m_sequenceNumber	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_sequenceNumber;								\/* Packet sequence number *\/$/;"	m	struct:__anon27
m_sleepFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergySleepFunc				m_sleepFunc;									\/* Thread sleep function *\/$/;"	m	struct:__anon27
m_traceFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^	uSynergyTraceFunc				m_traceFunc;									\/* Function for tracing status (can be NULL) *\/$/;"	m	struct:__anon27
main	imgui-master/examples/example_allegro5/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_freeglut_opengl2/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	imgui-master/examples/example_glfw_opengl2/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_glfw_opengl3/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_glfw_vulkan/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_marmalade/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_null/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_sdl_opengl2/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_sdl_opengl3/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_sdl_vulkan/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_win32_directx10/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_win32_directx11/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_win32_directx12/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/examples/example_win32_directx9/main.cpp	/^int main(int, char**)$/;"	f
main	imgui-master/imstb_truetype.h	/^int main(int argc, char **argv)$/;"	f
main	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^int main(int argc, char** argv)$/;"	f
major	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^	int major, minor;$/;"	m	struct:__anon28	file:
max_x	imgui-master/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon22
max_y	imgui-master/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon22
min_x	imgui-master/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon22
min_y	imgui-master/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon22
minor	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^	int major, minor;$/;"	m	struct:__anon28	file:
mvp	imgui-master/examples/imgui_impl_dx10.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER	file:
mvp	imgui-master/examples/imgui_impl_dx11.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER	file:
mvp	imgui-master/examples/imgui_impl_dx12.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER	file:
my_display_code	imgui-master/examples/example_freeglut_opengl2/main.cpp	/^void my_display_code()$/;"	f
my_stbtt_initfont	imgui-master/imstb_truetype.h	/^void my_stbtt_initfont(void)$/;"	f
my_stbtt_print	imgui-master/imstb_truetype.h	/^void my_stbtt_print(float x, float y, char *text)$/;"	f
next	imgui-master/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node
next	imgui-master/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge
next	imgui-master/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk::stbtt__hheap_chunk
nodes	imgui-master/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context
numGlyphs	imgui-master/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo
num_chars	imgui-master/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anon6
num_chars	imgui-master/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon12
num_nodes	imgui-master/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context
num_remaining_in_head_chunk	imgui-master/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap
num_vertices	imgui-master/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon22
open_libgl	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^static void open_libgl(void)$/;"	f	file:
operator *	imgui-master/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x*rhs.x, lhs.y*rhs.y); }$/;"	f
operator *	imgui-master/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(lhs.x*rhs, lhs.y*rhs); }$/;"	f
operator *	imgui-master/imgui_internal.h	/^static inline ImVec4 operator*(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x*rhs.x, lhs.y*rhs.y, lhs.z*rhs.z, lhs.w*rhs.w); }$/;"	f
operator *=	imgui-master/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)                  { lhs.x *= rhs; lhs.y *= rhs; return lhs; }$/;"	f
operator +	imgui-master/imgui_internal.h	/^static inline ImVec2 operator+(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x+rhs.x, lhs.y+rhs.y); }$/;"	f
operator +	imgui-master/imgui_internal.h	/^static inline ImVec4 operator+(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x+rhs.x, lhs.y+rhs.y, lhs.z+rhs.z, lhs.w+rhs.w); }$/;"	f
operator +=	imgui-master/imgui_internal.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }$/;"	f
operator -	imgui-master/imgui_internal.h	/^static inline ImVec2 operator-(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x-rhs.x, lhs.y-rhs.y); }$/;"	f
operator -	imgui-master/imgui_internal.h	/^static inline ImVec4 operator-(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x-rhs.x, lhs.y-rhs.y, lhs.z-rhs.z, lhs.w-rhs.w); }$/;"	f
operator -=	imgui-master/imgui_internal.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x -= rhs.x; lhs.y -= rhs.y; return lhs; }$/;"	f
operator /	imgui-master/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x\/rhs.x, lhs.y\/rhs.y); }$/;"	f
operator /	imgui-master/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const float rhs)              { return ImVec2(lhs.x\/rhs, lhs.y\/rhs); }$/;"	f
operator /=	imgui-master/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)                  { lhs.x \/= rhs; lhs.y \/= rhs; return lhs; }$/;"	f
operator =	imgui-master/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)       { clear(); resize(src.Size); memcpy(Data, src.Data, (size_t)Size * sizeof(value_type)); return *this; }$/;"	f	class:ImVector
operator ImU32	imgui-master/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }$/;"	f	struct:ImColor
operator ImVec4	imgui-master/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	imgui-master/imgui.h	/^    float operator[] (size_t i) const { IM_ASSERT(i <= 1); return (&x)[i]; }    \/\/ We very rarely use this [] operator, the assert overhead is fine.$/;"	f	struct:ImVec2
operator []	imgui-master/imgui.h	/^    inline char         operator[](int i)       { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i]; }$/;"	f	struct:ImGuiTextBuffer
operator []	imgui-master/imgui.h	/^    inline const value_type&    operator[](int i) const         { IM_ASSERT(i < Size); return Data[i]; }$/;"	f	class:ImVector
operator []	imgui-master/imgui.h	/^    inline value_type&          operator[](int i)               { IM_ASSERT(i < Size); return Data[i]; }$/;"	f	class:ImVector
operator bool	imgui-master/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_frame) return false; RefFrame = current_frame; return true; }$/;"	f	struct:ImGuiOnceUponAFrame
operator delete	imgui-master/imgui.h	/^inline void  operator delete(void*, ImNewDummy, void*)   {} \/\/ This is only required so we can use the symetrical new()$/;"	f
operator new	imgui-master/imgui.h	/^inline void* operator new(size_t, ImNewDummy, void* ptr) { return ptr; }$/;"	f
outliterals	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static void outliterals(stb_uchar *in, int numlit)$/;"	f	file:
pack_info	imgui-master/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context
padding	imgui-master/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon14
padding	imgui-master/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context
padding1	imgui-master/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon5
padding2	imgui-master/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon5
padding3	imgui-master/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon5
parse_version	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^static int parse_version(void)$/;"	f	file:
pixels	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned char* pixels;$/;"	m	struct:GLFWimage
pixels	imgui-master/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon15
pixels	imgui-master/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context
pop_back	imgui-master/imgui.h	/^    inline void         pop_back()                                      { IM_ASSERT(Size > 0); Size--; }$/;"	f	class:ImVector
pos	imgui-master/examples/imgui_impl_allegro5.cpp	/^    ImVec2 pos;$/;"	m	struct:ImDrawVertAllegro	file:
pos	imgui-master/examples/imgui_impl_dx9.cpp	/^    float    pos[3];$/;"	m	struct:CUSTOMVERTEX	file:
pos	imgui-master/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert
preferred_x	imgui-master/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anon5
prev_first	imgui-master/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anon7
prev_link	imgui-master/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anon32
proggy_clean_ttf_compressed_data_base85	imgui-master/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980+1] =$/;"	v	file:
push_back	imgui-master/imgui.h	/^    inline void         push_back(const value_type& v)                  { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }$/;"	f	class:ImVector
push_front	imgui-master/imgui.h	/^    inline void         push_front(const value_type& v)                 { if (Size == 0) push_back(v); else insert(Data, v); }$/;"	f	class:ImVector
pvertices	imgui-master/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon22
rect_height_compare	imgui-master/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f
rect_original_order	imgui-master/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f
red	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* red;$/;"	m	struct:GLFWgammaramp
redBits	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int redBits;$/;"	m	struct:GLFWvidmode
redo_char_point	imgui-master/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon4
redo_point	imgui-master/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon4
refreshRate	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int refreshRate;$/;"	m	struct:GLFWvidmode
reserve	imgui-master/imgui.h	/^    inline void         reserve(int new_capacity)$/;"	f	class:ImVector
reserve	imgui-master/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer
resize	imgui-master/imgui.h	/^    inline void         resize(int new_size)                    { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }$/;"	f	class:ImVector
resize	imgui-master/imgui.h	/^    inline void         resize(int new_size,const value_type& v){ if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) memcpy(&Data[n], &v, sizeof(v)); Size = new_size; }$/;"	f	class:ImVector
resize_grip_def	imgui-master/imgui.cpp	/^const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v
s0	imgui-master/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon10
s1	imgui-master/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon10
sAddString	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sAddString(uSynergyContext *context, const char *string)$/;"	f	file:
sAddUInt16	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt16(uSynergyContext *context, uint16_t value)$/;"	f	file:
sAddUInt32	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt32(uSynergyContext *context, uint32_t value)$/;"	f	file:
sAddUInt8	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt8(uSynergyContext *context, uint8_t value)$/;"	f	file:
sNetToNative16	imgui-master/examples/libs/usynergy/uSynergy.c	/^static int16_t sNetToNative16(const unsigned char *value)$/;"	f	file:
sNetToNative32	imgui-master/examples/libs/usynergy/uSynergy.c	/^static int32_t sNetToNative32(const unsigned char *value)$/;"	f	file:
sProcessMessage	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sProcessMessage(uSynergyContext *context, const uint8_t *message)$/;"	f	file:
sSendJoystickCallback	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sSendJoystickCallback(uSynergyContext *context, uint8_t joyNum)$/;"	f	file:
sSendKeyboardCallback	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sSendKeyboardCallback(uSynergyContext *context, uint16_t key, uint16_t modifiers, uSynergyBool down, uSynergyBool repeat)$/;"	f	file:
sSendMouseCallback	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sSendMouseCallback(uSynergyContext *context)$/;"	f	file:
sSendReply	imgui-master/examples/libs/usynergy/uSynergy.c	/^static uSynergyBool sSendReply(uSynergyContext *context)$/;"	f	file:
sSetDisconnected	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sSetDisconnected(uSynergyContext *context)$/;"	f	file:
sTrace	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sTrace(uSynergyContext *context, const char* text)$/;"	f	file:
sUpdateContext	imgui-master/examples/libs/usynergy/uSynergy.c	/^static void sUpdateContext(uSynergyContext *context)$/;"	f	file:
select_end	imgui-master/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anon5
select_start	imgui-master/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anon5
show_another_window	imgui-master/examples/example_freeglut_opengl2/main.cpp	/^static bool show_another_window = false;$/;"	v	file:
show_demo_window	imgui-master/examples/example_freeglut_opengl2/main.cpp	/^static bool show_demo_window = true;$/;"	v	file:
single_line	imgui-master/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anon5
size	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned int size;$/;"	m	struct:GLFWgammaramp
size	imgui-master/imgui.h	/^    inline int                  size() const                    { return Size; }$/;"	f	class:ImVector
size	imgui-master/imgui.h	/^    int                 size() const            { return Buf.Data ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer
size	imgui-master/imstb_truetype.h	/^   int size;$/;"	m	struct:__anon8
split	imgui-master/imgui.cpp	/^void ImGuiTextFilter::TextRange::split(char separator, ImVector<TextRange>* out) const$/;"	f	class:ImGuiTextFilter::TextRange
started	imgui-master/imstb_truetype.h	/^   int started;$/;"	m	struct:__anon22
stb__barrier_in_b	imgui-master/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	file:
stb__barrier_out_b	imgui-master/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	file:
stb__barrier_out_e	imgui-master/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	file:
stb__dout	imgui-master/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	file:
stb__hashsize	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static  stb_uint stb__hashsize = 32768;$/;"	v	file:
stb__hc	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc(/;"	d	file:
stb__hc2	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc2(/;"	d	file:
stb__hc3	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc3(/;"	d	file:
stb__in2	imgui-master/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	imgui-master/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	imgui-master/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	imgui-master/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	file:
stb__match	imgui-master/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	file:
stb__nc	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__nc(/;"	d	file:
stb__out	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uchar *stb__out;$/;"	v	file:
stb__outbytes	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint   stb__outbytes;$/;"	v	file:
stb__outfile	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static FILE      *stb__outfile;$/;"	v	file:
stb__running_adler	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb__running_adler;$/;"	v	file:
stb__window	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static int stb__window = 0x40000; \/\/ 256K$/;"	v	file:
stb__write	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static void stb__write(unsigned char v)$/;"	f	file:
stb_adler32	imgui-master/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen)$/;"	f	file:
stb_adler32	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint stb_adler32(stb_uint adler32, stb_uchar *buffer, stb_uint buflen)$/;"	f	file:
stb_compress	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^stb_uint stb_compress(stb_uchar *out, stb_uchar *input, stb_uint length)$/;"	f
stb_compress_chunk	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_chunk(stb_uchar *history,$/;"	f	file:
stb_compress_inner	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_inner(stb_uchar *input, stb_uint length)$/;"	f	file:
stb_decompress	imgui-master/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \/*length*\/)$/;"	f	file:
stb_decompress_length	imgui-master/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	file:
stb_decompress_token	imgui-master/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	file:
stb_matchlen	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb_matchlen(stb_uchar *m1, stb_uchar *m2, stb_uint maxlen)$/;"	f	file:
stb_not_crap	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_not_crap(int best, int dist)$/;"	f	file:
stb_out	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^#define stb_out(/;"	d	file:
stb_out2	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out2(stb_uint v) { stb_out(v >> 8); stb_out(v); }$/;"	f	file:
stb_out3	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out3(stb_uint v) { stb_out(v >> 16); stb_out(v >> 8); stb_out(v); }$/;"	f	file:
stb_out4	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out4(stb_uint v) { stb_out(v >> 24); stb_out(v >> 16); stb_out(v >> 8 ); stb_out(v); }$/;"	f	file:
stb_text_create_undo_record	imgui-master/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f
stb_text_createundo	imgui-master/imstb_textedit.h	/^static STB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len, int delete_len)$/;"	f
stb_text_locate_coord	imgui-master/imstb_textedit.h	/^static int stb_text_locate_coord(STB_TEXTEDIT_STRING *str, float x, float y)$/;"	f
stb_text_makeundo_delete	imgui-master/imstb_textedit.h	/^static void stb_text_makeundo_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, int length)$/;"	f
stb_text_makeundo_insert	imgui-master/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f
stb_text_makeundo_replace	imgui-master/imstb_textedit.h	/^static void stb_text_makeundo_replace(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, int old_length, int new_length)$/;"	f
stb_text_redo	imgui-master/imstb_textedit.h	/^static void stb_text_redo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_text_undo	imgui-master/imstb_textedit.h	/^static void stb_text_undo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_clamp	imgui-master/imstb_textedit.h	/^static void stb_textedit_clamp(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_clear_state	imgui-master/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f
stb_textedit_click	imgui-master/imstb_textedit.h	/^static void stb_textedit_click(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float y)$/;"	f
stb_textedit_cut	imgui-master/imstb_textedit.h	/^static int stb_textedit_cut(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_delete	imgui-master/imstb_textedit.h	/^static void stb_textedit_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, int len)$/;"	f
stb_textedit_delete_selection	imgui-master/imstb_textedit.h	/^static void stb_textedit_delete_selection(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_discard_redo	imgui-master/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f
stb_textedit_discard_undo	imgui-master/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f
stb_textedit_drag	imgui-master/imstb_textedit.h	/^static void stb_textedit_drag(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float y)$/;"	f
stb_textedit_find_charpos	imgui-master/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, STB_TEXTEDIT_STRING *str, int n, int single_line)$/;"	f
stb_textedit_flush_redo	imgui-master/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f
stb_textedit_initialize_state	imgui-master/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f
stb_textedit_key	imgui-master/imstb_textedit.h	/^static void stb_textedit_key(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_KEYTYPE key)$/;"	f
stb_textedit_move_to_first	imgui-master/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f
stb_textedit_move_to_last	imgui-master/imstb_textedit.h	/^static void stb_textedit_move_to_last(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f
stb_textedit_move_to_word_next	imgui-master/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( STB_TEXTEDIT_STRING *str, int c )$/;"	f
stb_textedit_move_to_word_previous	imgui-master/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( STB_TEXTEDIT_STRING *str, int c )$/;"	f
stb_textedit_paste	imgui-master/imstb_textedit.h	/^static int stb_textedit_paste(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_CHARTYPE const *ctext, int len)$/;"	f
stb_textedit_paste_internal	imgui-master/imstb_textedit.h	/^static int stb_textedit_paste_internal(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_CHARTYPE *text, int len)$/;"	f
stb_textedit_prep_selection_at_cursor	imgui-master/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f
stb_textedit_sortselection	imgui-master/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f
stb_uchar	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned char stb_uchar;$/;"	t	file:
stb_uint	imgui-master/misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned int stb_uint;$/;"	t	file:
stbrp__findresult	imgui-master/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anon32
stbrp__skyline_find_best_pos	imgui-master/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f
stbrp__skyline_find_min_y	imgui-master/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int *pwaste)$/;"	f
stbrp__skyline_pack_rectangle	imgui-master/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int height)$/;"	f
stbrp_context	imgui-master/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	imgui-master/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	imgui-master/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon24
stbrp_coord	imgui-master/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t
stbrp_coord	imgui-master/imstb_rectpack.h	/^typedef unsigned short stbrp_coord;$/;"	t
stbrp_coord	imgui-master/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t
stbrp_init_target	imgui-master/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_init_target	imgui-master/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_node	imgui-master/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	imgui-master/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	imgui-master/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon25
stbrp_pack_rects	imgui-master/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_pack_rects	imgui-master/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_rect	imgui-master/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	imgui-master/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	imgui-master/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	imgui-master/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	imgui-master/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f
stbrp_setup_heuristic	imgui-master/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f
stbtt_BakeFontBitmap	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f
stbtt_BakeFontBitmap_internal	imgui-master/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian_internal	imgui-master/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2) $/;"	f
stbtt_FindGlyphIndex	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f
stbtt_FindMatchingFont	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f
stbtt_FindMatchingFont_internal	imgui-master/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbtt_int32 flags)$/;"	f
stbtt_FlattenCurves	imgui-master/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)$/;"	f
stbtt_FreeBitmap	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeSDF	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeShape	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f
stbtt_GetBakedQuad	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)$/;"	f
stbtt_GetCodepointBitmap	imgui-master/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBitmapBox	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapBoxSubpixel	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapSubpixel	imgui-master/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBox	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetCodepointHMetrics	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetCodepointKernAdvance	imgui-master/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f
stbtt_GetCodepointSDF	imgui-master/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int codepoint, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointShape	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)$/;"	f
stbtt_GetFontBoundingBox	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetFontNameString	imgui-master/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)$/;"	f
stbtt_GetFontOffsetForIndex	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f
stbtt_GetFontOffsetForIndex_internal	imgui-master/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f
stbtt_GetFontVMetrics	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)$/;"	f
stbtt_GetFontVMetricsOS2	imgui-master/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDescent, int *typoLineGap)$/;"	f
stbtt_GetGlyphBitmap	imgui-master/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBitmapBox	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapBoxSubpixel	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapSubpixel	imgui-master/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBox	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetGlyphHMetrics	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetGlyphKernAdvance	imgui-master/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f
stbtt_GetGlyphSDF	imgui-master/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphShape	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt_GetNumberOfFonts	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f
stbtt_GetNumberOfFonts_internal	imgui-master/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f
stbtt_GetPackedQuad	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int align_to_integer)$/;"	f
stbtt_InitFont	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f
stbtt_InitFont_internal	imgui-master/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f
stbtt_IsGlyphEmpty	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt_MakeCodepointBitmap	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixel	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixelPrefilter	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int codepoint)$/;"	f
stbtt_MakeGlyphBitmap	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixel	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixelPrefilter	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)$/;"	f
stbtt_PackBegin	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)$/;"	f
stbtt_PackEnd	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f
stbtt_PackFontRange	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, float font_size,$/;"	f
stbtt_PackFontRanges	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, stbtt_pack_range *ranges, int num_ranges)$/;"	f
stbtt_PackFontRangesGatherRects	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackFontRangesPackRects	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num_rects)$/;"	f
stbtt_PackFontRangesRenderIntoRects	imgui-master/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackSetOversampling	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, unsigned int v_oversample)$/;"	f
stbtt_Rasterize	imgui-master/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)$/;"	f
stbtt_ScaleForMappingEmToPixels	imgui-master/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f
stbtt_ScaleForPixelHeight	imgui-master/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f
stbtt__CompareUTF8toUTF16_bigendian_prefix	imgui-master/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1, stbtt_uint8 *s2, stbtt_int32 len2) $/;"	f
stbtt__GetCoverageIndex	imgui-master/imstb_truetype.h	/^static stbtt_int32  stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f
stbtt__GetGlyfOffset	imgui-master/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__GetGlyphClass	imgui-master/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f
stbtt__GetGlyphGPOSInfoAdvance	imgui-master/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphInfoT2	imgui-master/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt__GetGlyphKernInfoAdvance	imgui-master/imstb_truetype.h	/^static int  stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphShapeT2	imgui-master/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__GetGlyphShapeTT	imgui-master/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__active_edge	imgui-master/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	imgui-master/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	imgui-master/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f
stbtt__bitmap	imgui-master/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon15
stbtt__buf	imgui-master/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon8
stbtt__buf_get	imgui-master/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f
stbtt__buf_get16	imgui-master/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	imgui-master/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	imgui-master/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f
stbtt__buf_peek8	imgui-master/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f
stbtt__buf_range	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f
stbtt__buf_seek	imgui-master/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f
stbtt__buf_skip	imgui-master/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f
stbtt__cff_get_index	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f
stbtt__cff_index_count	imgui-master/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f
stbtt__cff_index_get	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f
stbtt__cff_int	imgui-master/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f
stbtt__cff_skip_operand	imgui-master/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f
stbtt__check_size16	imgui-master/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t
stbtt__check_size32	imgui-master/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t
stbtt__cid_get_glyph_subrs	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__close_shape	imgui-master/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off,$/;"	f
stbtt__compute_crossings_x	imgui-master/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f
stbtt__csctx	imgui-master/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon22
stbtt__csctx_close_shape	imgui-master/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f
stbtt__csctx_rccurve_to	imgui-master/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy2, float dx3, float dy3)$/;"	f
stbtt__csctx_rline_to	imgui-master/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_rmove_to	imgui-master/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_v	imgui-master/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy, stbtt_int32 cx1, stbtt_int32 cy1)$/;"	f
stbtt__cuberoot	imgui-master/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f
stbtt__dict_get	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f
stbtt__dict_get_ints	imgui-master/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f
stbtt__edge	imgui-master/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	imgui-master/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	imgui-master/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)$/;"	f
stbtt__fill_active_edges_new	imgui-master/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__active_edge *e, float y_top)$/;"	f
stbtt__find_table	imgui-master/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)$/;"	f
stbtt__get_subr	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f
stbtt__get_subrs	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f
stbtt__h_prefilter	imgui-master/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt__handle_clipped_edge	imgui-master/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, float y0, float x1, float y1)$/;"	f
stbtt__hheap	imgui-master/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	imgui-master/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	imgui-master/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f
stbtt__hheap_chunk	imgui-master/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	imgui-master/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	imgui-master/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f
stbtt__hheap_free	imgui-master/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f
stbtt__isfont	imgui-master/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f
stbtt__matches	imgui-master/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)$/;"	f
stbtt__matchpair	imgui-master/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)$/;"	f
stbtt__new_active	imgui-master/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float start_point, void *userdata)$/;"	f
stbtt__new_buf	imgui-master/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f
stbtt__oversample_shift	imgui-master/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f
stbtt__point	imgui-master/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon23
stbtt__rasterize	imgui-master/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)$/;"	f
stbtt__rasterize_sorted_edges	imgui-master/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)$/;"	f
stbtt__ray_intersect_bezier	imgui-master/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], float q2[2], float hits[2][2])$/;"	f
stbtt__run_charstring	imgui-master/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f
stbtt__solve_cubic	imgui-master/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f
stbtt__sort_edges	imgui-master/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_ins_sort	imgui-master/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_quicksort	imgui-master/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f
stbtt__tesselate_cubic	imgui-master/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3, float objspace_flatness_squared, int n)$/;"	f
stbtt__tesselate_curve	imgui-master/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)$/;"	f
stbtt__test_oversample_pow2	imgui-master/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ? 1 : -1];$/;"	t
stbtt__track_vertex	imgui-master/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f
stbtt__v_prefilter	imgui-master/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt_aligned_quad	imgui-master/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon10
stbtt_bakedchar	imgui-master/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon9
stbtt_fontinfo	imgui-master/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	imgui-master/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	imgui-master/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t
stbtt_int32	imgui-master/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t
stbtt_int8	imgui-master/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t
stbtt_pack_context	imgui-master/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	imgui-master/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	imgui-master/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon12
stbtt_packedchar	imgui-master/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon11
stbtt_setvertex	imgui-master/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy)$/;"	f
stbtt_tag	imgui-master/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	imgui-master/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	imgui-master/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t
stbtt_uint32	imgui-master/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t
stbtt_uint8	imgui-master/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t
stbtt_vertex	imgui-master/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon14
stbtt_vertex_type	imgui-master/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
stride	imgui-master/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon15
stride_in_bytes	imgui-master/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context
subrs	imgui-master/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo
swap	imgui-master/imgui.h	/^    inline void                 swap(ImVector<value_type>& rhs) { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; value_type* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }$/;"	f	class:ImVector
sy	imgui-master/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge
t0	imgui-master/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon10
t1	imgui-master/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon10
temp_bitmap	imgui-master/imstb_truetype.h	/^unsigned char temp_bitmap[512*512];$/;"	v
ttBYTE	imgui-master/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	imgui-master/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	imgui-master/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	imgui-master/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttSHORT	imgui-master/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f
ttULONG	imgui-master/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttUSHORT	imgui-master/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f
ttf_buffer	imgui-master/imstb_truetype.h	/^char ttf_buffer[1<<25];$/;"	v
ttf_buffer	imgui-master/imstb_truetype.h	/^unsigned char ttf_buffer[1<<20];$/;"	v
type	imgui-master/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon14
uSynergyBool	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef int			uSynergyBool;$/;"	t
uSynergyClipboardCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyClipboardCallback)(uSynergyCookie cookie, enum uSynergyClipboardFormat format, const uint8_t *data, uint32_t size);$/;"	t
uSynergyClipboardFormat	imgui-master/examples/libs/usynergy/uSynergy.h	/^enum uSynergyClipboardFormat$/;"	g
uSynergyConnectFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyConnectFunc)(uSynergyCookie cookie);$/;"	t
uSynergyContext	imgui-master/examples/libs/usynergy/uSynergy.h	/^} uSynergyContext;$/;"	t	typeref:struct:__anon27
uSynergyCookie	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	t	typeref:struct:__anon26
uSynergyGetTimeFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef uint32_t	(*uSynergyGetTimeFunc)();$/;"	t
uSynergyInit	imgui-master/examples/libs/usynergy/uSynergy.c	/^void uSynergyInit(uSynergyContext *context)$/;"	f
uSynergyJoystickCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyJoystickCallback)(uSynergyCookie cookie, uint8_t joyNum, uint16_t buttons, int8_t leftStickX, int8_t leftStickY, int8_t rightStickX, int8_t rightStickY);$/;"	t
uSynergyKeyboardCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyKeyboardCallback)(uSynergyCookie cookie, uint16_t key, uint16_t modifiers, uSynergyBool down, uSynergyBool repeat);$/;"	t
uSynergyMouseCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyMouseCallback)(uSynergyCookie cookie, uint16_t x, uint16_t y, int16_t wheelX, int16_t wheelY, uSynergyBool buttonLeft, uSynergyBool buttonRight, uSynergyBool buttonMiddle);$/;"	t
uSynergyReceiveFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyReceiveFunc)(uSynergyCookie cookie, uint8_t *buffer, int maxLength, int* outLength);$/;"	t
uSynergyScreenActiveCallback	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyScreenActiveCallback)(uSynergyCookie cookie, uSynergyBool active);$/;"	t
uSynergySendClipboard	imgui-master/examples/libs/usynergy/uSynergy.c	/^void uSynergySendClipboard(uSynergyContext *context, const char *text)$/;"	f
uSynergySendFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergySendFunc)(uSynergyCookie cookie, const uint8_t *buffer, int length);$/;"	t
uSynergySleepFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergySleepFunc)(uSynergyCookie cookie, int timeMs);$/;"	t
uSynergyTraceFunc	imgui-master/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyTraceFunc)(uSynergyCookie cookie, const char *text);$/;"	t
uSynergyUpdate	imgui-master/examples/libs/usynergy/uSynergy.c	/^void uSynergyUpdate(uSynergyContext *context)$/;"	f
uint64_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned long int uint64_t;$/;"	t
uint64_t	imgui-master/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned long long int uint64_t;$/;"	t
undo_char	imgui-master/imstb_textedit.h	/^   STB_TEXTEDIT_CHARTYPE  undo_char[STB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anon4
undo_char_point	imgui-master/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon4
undo_point	imgui-master/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon4
undo_rec	imgui-master/imstb_textedit.h	/^   StbUndoRecord          undo_rec [STB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anon4
undostate	imgui-master/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anon5
user_allocator_context	imgui-master/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context
userdata	imgui-master/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo
uv	imgui-master/examples/imgui_impl_allegro5.cpp	/^    ImVec2 uv;$/;"	m	struct:ImDrawVertAllegro	file:
uv	imgui-master/examples/imgui_impl_dx9.cpp	/^    float    uv[2];$/;"	m	struct:CUSTOMVERTEX	file:
uv	imgui-master/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert
v_oversample	imgui-master/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon12
v_oversample	imgui-master/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
va_copy	imgui-master/imgui.cpp	/^#define va_copy(/;"	d	file:
val_f	imgui-master/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::Pair::__anon2
val_i	imgui-master/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::Pair::__anon2
val_p	imgui-master/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::Pair::__anon2
value_type	imgui-master/imgui.h	/^    typedef T                   value_type;$/;"	t	class:ImVector
version	imgui-master/examples/libs/gl3w/GL/gl3w.c	/^} version;$/;"	v	typeref:struct:__anon28	file:
vsnprintf	imgui-master/imgui.cpp	/^#define vsnprintf /;"	d	file:
vsnprintf	imgui-master/imgui_demo.cpp	/^#define vsnprintf /;"	d	file:
w	imgui-master/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
w	imgui-master/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect
w	imgui-master/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
w	imgui-master/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon15
was_packed	imgui-master/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect
was_packed	imgui-master/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
where	imgui-master/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anon3
width	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWimage
width	imgui-master/examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWvidmode
width	imgui-master/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context
width	imgui-master/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context
width	imgui-master/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon24
window	imgui-master/examples/example_apple_metal/Shared/AppDelegate.h	/^@property (strong, nonatomic) UIWindow *window;$/;"	v
x	imgui-master/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
x	imgui-master/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2
x	imgui-master/imgui_internal.h	/^    float               x;$/;"	m	struct:ImVec1
x	imgui-master/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon32
x	imgui-master/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect
x	imgui-master/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node
x	imgui-master/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon7
x	imgui-master/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon14
x	imgui-master/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon22
x	imgui-master/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon23
x	imgui-master/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
x	imgui-master/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon24
x	imgui-master/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
x	imgui-master/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon25
x0	imgui-master/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, etc)$/;"	m	struct:__anon6
x0	imgui-master/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x0	imgui-master/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon10
x0	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon11
x0	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon9
x1	imgui-master/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, etc)$/;"	m	struct:__anon6
x1	imgui-master/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x1	imgui-master/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon10
x1	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon11
x1	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon9
xadvance	imgui-master/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon11
xadvance	imgui-master/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon9
xoff	imgui-master/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon11
xoff	imgui-master/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon9
xoff2	imgui-master/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon11
y	imgui-master/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
y	imgui-master/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2
y	imgui-master/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon32
y	imgui-master/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect
y	imgui-master/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node
y	imgui-master/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon7
y	imgui-master/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon14
y	imgui-master/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon22
y	imgui-master/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon23
y	imgui-master/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon24
y	imgui-master/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
y0	imgui-master/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y0	imgui-master/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon10
y0	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon11
y0	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon9
y1	imgui-master/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y1	imgui-master/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon10
y1	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon11
y1	imgui-master/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon9
ymax	imgui-master/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon6
ymin	imgui-master/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon6
yoff	imgui-master/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon11
yoff	imgui-master/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon9
yoff2	imgui-master/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon11
z	imgui-master/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4
~ExampleAppConsole	imgui-master/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole
~ImDrawData	imgui-master/imgui.h	/^    ~ImDrawData()   { Clear(); }$/;"	f	struct:ImDrawData
~ImDrawList	imgui-master/imgui.h	/^    ~ImDrawList() { ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImFont	imgui-master/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	imgui-master/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	imgui-master/imgui.h	/^    ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      \/\/ Assert if user forgot to call End() or Step() until false.$/;"	f	struct:ImGuiListClipper
~ImGuiWindow	imgui-master/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	imgui-master/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	imgui-master/imgui.h	/^    inline ~ImVector()          { if (Data) ImGui::MemFree(Data); }$/;"	f	class:ImVector
